{"version":3,"sources":["Assets/logo.png","State/index.ts","State/Reducers.ts","Utility/CollectionParser.ts","Utility/GoogleApi.ts","Utility/Scry/index.ts","Utility/useEventListener.ts","Components/Styled/Theme.ts","Components/DrawerDeckList.tsx","Components/Styled/CardNameAutocomplete.tsx","Components/Styled/Grid.tsx","Components/Applets/AddDeck.tsx","Utility/Assert.ts","Utility/useCardAction.ts","Components/Styled/IncrementNumber.tsx","Components/Styled/SymbolIcon.tsx","Components/Styled/SymbolTypography.tsx","Components/Previews/CompressedCard.tsx","Components/Styled/IndentedTypography.tsx","Components/Previews/CompressedCollection.tsx","Components/Styled/TooltipButton.tsx","Components/Previews/ActionButtons/ChangeSectionButton.tsx","Components/Previews/ActionButtons/DeleteButton.tsx","Components/Previews/ActionButtons/WishlistButton.tsx","Components/Previews/ImagesCard.tsx","Components/Previews/ImagesCollection.tsx","Components/Styled/SetIcon.tsx","Components/Previews/ListCard.tsx","Components/Previews/ListCollection.tsx","Components/Previews/CollectionPreview.tsx","Components/Previews/Common/PreviewStyleToggle.tsx","Components/Previews/Common/ShowGroupsToggle.tsx","Components/Previews/Common/SortToggle.tsx","Components/Styled/Icons.tsx","Components/Applets/DeckPreview.tsx","Components/Applets/CardSearch.tsx","Components/Applets/UserInfo.tsx","Components/Home.tsx","Components/NotFound.tsx","Components/SignInButton.tsx","Components/SignIn.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DeckName","SectionName","reducers","EmptyCards","sections","reduce","obj","s","Default","initialState","files","Collection","Wishlist","decks","name","cards","cardList","symbolList","setList","selectedDeck","modifierKeys","shift","State","React","createContext","undefined","reducer","state","action","type","link","omit","card","symbols","symbol","sets","code","isDirty","amount","deckName","sectionName","key","value","temp","i","CollectionParser","serialize","collection","split","map","section","index","lines","line","match","filter","isNull","parseInt","comment","prev","val","p","v","deserialize","deck","Object","entries","str","values","GoogleApiInit","apiKey","process","clientId","discoveryDocs","scope","createNewFile","a","async","props","fileContent","folder","file","Blob","metadata","mimeType","appProperties","parents","accessToken","gapi","auth","getToken","access_token","form","FormData","append","JSON","stringify","fetch","method","headers","Headers","Authorization","body","res","json","id","getFileContents","client","drive","get","fileId","alt","deleteFile","delete","createNewDeck","dispatch","restProps","Sideboard","Maybeboard","GoogleApi","initClient","onUpdateStatus","load","init","then","auth2","getAuthInstance","isSignedIn","listen","console","error","getProfile","currentUser","getBasicProfile","signIn","signOut","prepareAppData","list","spaces","fields","response","collectionFile","result","find","f","info","wishlistFile","otherFiles","length","previewUrl","updateFile","deleteDeck","Api","endpoint","Axios","create","baseURL","responseType","Symbology","All","r","data","ParseMana","cost","params","Cards","Autocomplete","q","include_extras","Named","fuzzy","Sets","Scry","getImage","images","layout","card_faces","image_uris","getPlaceholder","cardName","replace","useEventListener","eventName","handler","element","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","MainTheme","createMuiTheme","palette","primary","main","colors","deepOrange","secondary","blueGrey","constants","drawerWidth","drawerWidthClosed","appletHeight","css","ThemeProv","styledCss","styled","baseStyled","StyledItemText","ListItemText","DrawerDeckList","open","useContext","selectDeck","renderItem","icon","Tooltip","title","placement","ListItem","button","onClick","ListItemAvatar","Badge","invisible","color","overlap","badgeContent","anchorOrigin","vertical","horizontal","Avatar","src","List","Divider","CardNameAutocomplete","label","onNameSelect","useState","setValue","setOpen","options","setOptions","isLoading","setIsLoading","typingTimer","setTypingTimer","onChange","newValue","style","width","onOpen","onClose","e","onInputChange","reason","clearTimeout","setTimeout","names","toLowerCase","includes","loading","renderInput","TextField","fullWidth","variant","InputProps","endAdornment","Fragment","CircularProgress","size","FlexCol","div","AppletPaper","Paper","theme","spacing","AppletActions","Title","Typography","attrs","component","gutterBottom","PreviewRow","AddDeck","importText","setImportText","setDeckName","invalidName","setInvalidName","setPreviewUrl","handleClose","handleImport","validateName","Grid","item","xs","sm","md","helperText","target","ButtonGroup","Button","disabled","Dialog","aria-labelledby","maxWidth","DialogTitle","DialogContent","DialogContentText","autoFocus","multiline","rows","DialogActions","assert","condition","message","AssertionError","useCardActions","targetDeck","isOnWishlist","keys","updateCardQuantity","isNullOrUndefined","openScryfallPage","scryfall_uri","toggleWishlist","wishlistTooltip","removeCard","changeSection","newSection","addToDeck","StyledAvatar","className","text","IncrementNumber","stopPropagation","Symbol","svg","SymbolIcon","symbolObj","setSymbolObj","loose_variant","dangerouslySetInnerHTML","__html","SymbolTypography","typographyProps","parsed","setParsed","m","CustomChip","Chip","CompressedCard","deleteIcon","mana_cost","noWrap","avatar","onDelete","IndentedTypography","CompressedCollecion","sortBy","sortOrder","showGroups","container","direction","c","zeroMinWidth","StyledIconButton","IconButton","background","darken","dark","TooltipButton","children","aria-label","ChangeSectionButton","actions","anchorRef","contains","ref","prevOpen","Popper","anchorEl","role","transition","TransitionProps","Grow","transformOrigin","elevation","ClickAwayListener","onClickAway","MenuList","MenuItem","DeleteButton","WishlistButton","Body","Image","img","IncrementActions","BottomActions","ActionsMenu","ImagesCard","actionsOpen","setActionsOpen","Fab","ImagesCollecion","alignItems","lg","xl","Set","rarity","SetIcon","set","setObj","setSetObj","offset","stopColor","gradientTransform","icon_svg","Actions","breakpoints","down","between","ListCard","TableRow","SetWidthCell","align","NameCell","Link","href","TableCell","position","CustomPaddingTable","Table","ListCollecion","TableHead","TableBody","colSpan","desc","b","orderBy","func","getSorting","order","StableSort","array","cmp","stabilizedThis","el","sort","rarityOrder","GetSortFunction","indexOf","CollectionPreview","passedProps","renderCollection","PreviewStyleToggle","onToggle","Error","IconForStyle","ShowGroupsToggle","show","setShow","SortToggle","setSortBy","setSortOrder","startIcon","by","selected","IconWrap","CompressIcon","faCompressAlt","ExpandIcon","faExpandAlt","GoogleIcon","faGoogle","ClipboardIcon","faClipboard","SectionRow","ExportRow","DeckPreview","expanded","setExpanded","exportOpened","setExportOpened","setStyle","setShowGroups","missingCards","byName","on","justify","copy","readOnly","CardSearch","setCardName","autoompleteOptions","setAutocompleteOptions","dialogOpen","setDialogOpen","closeDialog","g","u","w","colorExactMatch","cmc","cmcType","setFilter","handleColors","newFilter","checked","freeSolo","autoHighlight","disableClearable","inputValue","FormGroup","row","FormControlLabel","control","Checkbox","alert","UserInfo","Home","Container","NotFound","SignInButton","SignIn","padding","Logo","height","draggable","bodyOpen","transitions","easing","sharp","duration","enteringScreen","bodyClose","leavingScreen","CustomAppBar","AppBar","zIndex","drawer","MenuButton","drawerOpen","drawerClose","CustomDrawer","Drawer","DrawerToolbar","Toolbar","MainContent","ProfileAvatar","App","useReducer","profile","setProfile","setIsSignedIn","Promise","all","svg_uri","transformResponse","responses","icon_svg_uri","Provider","edge","overflow","getGivenName","getEmail","getImageUrl","basename","to","exact","path","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StylesProvider","injectFirst","CssBaseline","document","getElementById","URL","origin","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a040ebe2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.81aa9e7e.png\";","import React from \"react\";\r\nimport Scry from \"scryfall-sdk\";\r\nimport DeepReadonly from \"../Utility/DeepReadonly\";\r\nimport { ScryCardSymbol, ScrySet } from \"../Utility/Scry/Types\";\r\nimport { Action } from \"./Actions\";\r\n\r\nexport enum DeckName {\r\n    Collection = \"_collection\",\r\n    Wishlist = \"_wishlist\",\r\n}\r\n\r\nexport enum SectionName {\r\n    Default = \"_default\",\r\n    Sideboard = \"Sideboard\",\r\n    Maybeboard = \"Maybeboard\",\r\n}\r\n\r\nexport const EmptyCards = (...sections: string[]): DeckCards => sections.reduce((obj, s) => ({ ...obj, [s]: {} }), { [SectionName.Default]: {} });\r\n\r\nexport type DeckCardList = DeepReadonly<{\r\n    [cardName: string]: DeckCard;\r\n}>;\r\n\r\nexport type DeckCards = DeepReadonly<{\r\n    [SectionName.Default]: DeckCardList;\r\n    [section: string]: DeckCardList;\r\n}>;\r\n\r\nexport type DeckCard = DeepReadonly<{\r\n    amount: number;\r\n    name: string;\r\n    comment?: string;\r\n}>;\r\n\r\nexport type DeckProps = Omit<Deck, \"cards\">;\r\n\r\nexport type Deck = DeepReadonly<{\r\n    name: string;\r\n    previewUrl?: string;\r\n    cards: DeckCards;\r\n    isDirty?: boolean;\r\n}>;\r\n\r\nexport type FileIds = DeepReadonly<{\r\n    [DeckName.Collection]: string;\r\n    [DeckName.Wishlist]: string;\r\n    [deckName: string]: string;\r\n}>;\r\n\r\nexport type Decks = DeepReadonly<{\r\n    [DeckName.Collection]: Deck;\r\n    [DeckName.Wishlist]: Deck;\r\n    [deckName: string]: Deck;\r\n}>;\r\n\r\nexport type CardList = DeepReadonly<{\r\n    [cardName: string]: Scry.Card;\r\n}>;\r\n\r\nexport type SymbolList = DeepReadonly<{\r\n    [symbol: string]: ScryCardSymbol;\r\n}>;\r\n\r\nexport type SetList = DeepReadonly<{\r\n    [setName: string]: ScrySet;\r\n}>;\r\n\r\nexport type ModifierKeys = DeepReadonly<{\r\n    shift: boolean;\r\n}>\r\n\r\nexport type AppState = DeepReadonly<{\r\n    files: FileIds;\r\n    decks: Decks;\r\n    cardList: CardList;\r\n    symbolList: SymbolList;\r\n    setList: SetList;\r\n    selectedDeck: string | null;\r\n    modifierKeys: ModifierKeys;\r\n}>;\r\n\r\nexport const initialState: AppState = {\r\n    files: {\r\n        [DeckName.Collection]: \"\",\r\n        [DeckName.Wishlist]: \"\",\r\n    },\r\n    decks: {\r\n        [DeckName.Collection]: { name: DeckName.Collection, cards: EmptyCards() },\r\n        [DeckName.Wishlist]: { name: DeckName.Wishlist, cards: EmptyCards() },\r\n    },\r\n    cardList: {},\r\n    symbolList: {},\r\n    setList: {},\r\n    selectedDeck: null,\r\n    modifierKeys: {\r\n        shift: false,\r\n    }\r\n};\r\n\r\nexport const State = React.createContext<[AppState, React.Dispatch<Action>]>([initialState, undefined as any]);\r\n","import { omit } from \"lodash\";\r\nimport { AppState, CardList, Decks, EmptyCards, FileIds, ModifierKeys, SetList, SymbolList } from \".\";\r\nimport { Action } from \"./Actions\";\r\n\r\nconst filesReducer = (state: FileIds, action: Action): FileIds => {\r\n    switch (action.type) {\r\n        case \"CreateDeck\":\r\n            return {\r\n                ...state,\r\n                [action.name]: action.link,\r\n            };\r\n        case \"DeleteDeck\":\r\n            return { ...omit(state, [action.name]) } as FileIds;\r\n    }\r\n    return state;\r\n};\r\n\r\nconst cardListReducer = (state: CardList, action: Action): CardList => {\r\n    switch (action.type) {\r\n        case \"AddCard\":\r\n            return {\r\n                ...state,\r\n                [action.card.name]: action.card,\r\n            };\r\n    }\r\n    return state;\r\n};\r\n\r\nconst symbolListReducer = (state: SymbolList, action: Action): SymbolList => {\r\n    switch (action.type) {\r\n        case \"AddSymbols\":\r\n            return action.symbols.reduce((obj, s) => ({ ...obj, [s.symbol]: s }), {});\r\n    }\r\n    return state;\r\n};\r\n\r\nconst setListReducer = (state: SetList, action: Action): SetList => {\r\n    switch (action.type) {\r\n        case \"AddSets\":\r\n            return action.sets.reduce((obj, s) => ({ ...obj, [s.code]: s }), {});\r\n    }\r\n    return state;\r\n};\r\n\r\nconst decksReducer = (state: Decks, action: Action): Decks => {\r\n    switch (action.type) {\r\n        case \"CreateDeck\":\r\n            return {\r\n                ...state,\r\n                [action.name]: {\r\n                    cards: EmptyCards(),\r\n                    ...omit(action, [\"type\", \"link\"]),\r\n                },\r\n            };\r\n        case \"UpdateDeck\":\r\n            return {\r\n                ...state,\r\n                [action.name]: {\r\n                    ...state[action.name],\r\n                    isDirty: true,\r\n                    ...omit(action, [\"type\"]),\r\n                },\r\n            };\r\n        case \"UpdateDeckCard\":\r\n            if (action.card.amount === 0) {\r\n                return {\r\n                    ...state,\r\n                    [action.deckName]: {\r\n                        ...state[action.deckName],\r\n                        cards: {\r\n                            ...state[action.deckName].cards,\r\n                            [action.sectionName]: omit(state[action.deckName].cards[action.sectionName], action.card.name),\r\n                        },\r\n                        isDirty: true,\r\n                    },\r\n                };\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.deckName]: {\r\n                    ...state[action.deckName],\r\n                    cards: {\r\n                        ...state[action.deckName].cards,\r\n                        [action.sectionName]: {\r\n                            ...state[action.deckName].cards[action.sectionName],\r\n                            [action.card.name]: {\r\n                                ...state[action.deckName].cards[action.sectionName][action.card.name],\r\n                                ...action.card,\r\n                            },\r\n                        },\r\n                    },\r\n                    isDirty: true,\r\n                },\r\n            };\r\n        case \"DeleteDeck\":\r\n            return { ...omit(state, [action.name]) } as Decks;\r\n    }\r\n    return state;\r\n};\r\n\r\nconst selectedDeckReducer = (state: string | null, action: Action): string | null => {\r\n    switch (action.type) {\r\n        case \"SelectDeck\":\r\n            return action.name;\r\n        case \"DeleteDeck\":\r\n            return action.name === state ? null : state;\r\n    }\r\n    return state;\r\n};\r\n\r\nconst modifierKeysReducer = (state: ModifierKeys, action: Action): ModifierKeys => {\r\n    switch (action.type) {\r\n        case \"SetModifierKey\":\r\n            return {\r\n                ...state,\r\n                [action.key]: action.value,\r\n            };\r\n    }\r\n    return state;\r\n};\r\n\r\nconst combineReducers = <State, Action>(reducers: { [P in keyof State]: (state: State[P], action: Action) => State[P] }) => {\r\n    return (state: State, action: Action) => {\r\n        const temp: State = {} as any;\r\n        for (const i in reducers) {\r\n            temp[i] = reducers[i](state[i], action);\r\n        }\r\n        return temp;\r\n    };\r\n};\r\n\r\nexport const reducer = combineReducers<AppState, Action>({\r\n    files: filesReducer,\r\n    cardList: cardListReducer,\r\n    symbolList: symbolListReducer,\r\n    setList: setListReducer,\r\n    decks: decksReducer,\r\n    selectedDeck: selectedDeckReducer,\r\n    modifierKeys: modifierKeysReducer,\r\n});\r\n","import { isNull } from \"lodash\";\r\nimport { DeckCard, DeckCards, EmptyCards, SectionName } from \"../State\";\r\n\r\nconst serialize = (collection?: string, ...sections: string[]): DeckCards => {\r\n    if (!collection || collection === \"\") {\r\n        return EmptyCards(...sections);\r\n    }\r\n    return collection\r\n        .split(\"##\")\r\n        .map((section, index) => {\r\n            let name: string, lines: string[];\r\n            if (index === 0) {\r\n                name = SectionName.Default;\r\n                lines = section.split(/\\r?\\n/);\r\n            } else {\r\n                [name, ...lines] = section.split(/\\r?\\n/);\r\n            }\r\n            return [\r\n                name,\r\n                lines\r\n                    .map(line => line.match(/^(\\d*) +(.*?)(?: # (.*))?$/))\r\n                    .filter(match => !isNull(match))\r\n                    .map(match => ({\r\n                        amount: parseInt(match![1]),\r\n                        name: match![2],\r\n                        comment: match![3],\r\n                    })),\r\n            ] as [string, DeckCard[]];\r\n        })\r\n        .reduce(\r\n            (prev, val) => ({ ...prev, [val[0]]: val[1].reduce((p, v) => ({ ...p, [v.name]: v }), {}) }),\r\n            EmptyCards(...sections)\r\n        );\r\n};\r\n\r\nconst deserialize = (deck: DeckCards) =>\r\n    Object.entries(deck).reduce(\r\n        (str, section) =>\r\n            `${str}${section[0] !== SectionName.Default ? `#${section[0]}\\n` : \"\"}${Object.values(section[1]).reduce(\r\n                (s, card) => `${s}${card.amount} ${card.name}${card.comment ? ` # ${card.comment}` : \"\"}\\n`,\r\n                \"\"\r\n            )}\\n`,\r\n        \"\"\r\n    );\r\n\r\nconst CollectionParser = {\r\n    serialize,\r\n    deserialize,\r\n};\r\n\r\nexport default CollectionParser;\r\n","/* global gapi */\r\nimport React from \"react\";\r\nimport { DeckName, DeckProps, SectionName } from \"../State\";\r\nimport { Action } from \"../State/Actions\";\r\nimport CollectionParser from \"./CollectionParser\";\r\n\r\nconst GoogleApiInit = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    clientId: process.env.REACT_APP_CLIENT_ID,\r\n    discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"],\r\n    scope: \"profile https://www.googleapis.com/auth/drive.appdata https://www.googleapis.com/auth/drive.file\",\r\n};\r\n\r\nconst initClient = (onUpdateStatus: (isSignedIn: boolean) => void) => {\r\n    gapi.load(\"client:auth2\", () => {\r\n        gapi.client.init(GoogleApiInit).then(() => {\r\n            gapi.auth2.getAuthInstance().isSignedIn.listen(onUpdateStatus);\r\n            onUpdateStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\r\n        }, console.error);\r\n    });\r\n};\r\n\r\nconst prepareAppData = () => async (dispatch: React.Dispatch<Action>) => {\r\n    var response = await gapi.client.drive.files.list({\r\n        spaces: \"appDataFolder\",\r\n        fields: \"nextPageToken, files(id, name, appProperties)\",\r\n    });\r\n\r\n    const collectionFile = response.result?.files?.find(f => f.appProperties?.name === DeckName.Collection);\r\n    if (!collectionFile) {\r\n        console.info(\"Creating collection...\");\r\n        createNewDeck(dispatch, { name: DeckName.Collection });\r\n    } else {\r\n        console.info(\"Loading collection...\");\r\n        dispatch({ type: \"CreateDeck\", name: DeckName.Collection, link: collectionFile.id! });\r\n        dispatch({\r\n            type: \"UpdateDeck\",\r\n            name: DeckName.Collection,\r\n            cards: CollectionParser.serialize(await getFileContents({ id: collectionFile.id! })),\r\n            isDirty: false,\r\n        });\r\n    }\r\n\r\n    const wishlistFile = response.result?.files?.find(f => f.appProperties?.name === DeckName.Wishlist);\r\n    if (!wishlistFile) {\r\n        console.info(\"Creating wishlist...\");\r\n        createNewDeck(dispatch, { name: DeckName.Wishlist });\r\n    } else {\r\n        console.info(\"Loading wishlist...\");\r\n        dispatch({ type: \"CreateDeck\", name: DeckName.Wishlist, link: wishlistFile.id! });\r\n        dispatch({\r\n            type: \"UpdateDeck\",\r\n            name: DeckName.Wishlist,\r\n            cards: CollectionParser.serialize(await getFileContents({ id: wishlistFile.id! })),\r\n            isDirty: false,\r\n        });\r\n    }\r\n\r\n    const otherFiles = response.result?.files?.filter(f => f.appProperties?.name !== DeckName.Collection && f.appProperties?.name !== DeckName.Wishlist)!;\r\n    for (let i = 0; i < otherFiles.length; i++) {\r\n        const file = otherFiles[i];\r\n        const name = file.appProperties?.name ?? file.name?.match(/(.*?)\\.txt/)?.[0] ?? \"unnamed\";\r\n        dispatch({ type: \"CreateDeck\", name, link: file.id! });\r\n        dispatch({\r\n            type: \"UpdateDeck\",\r\n            name,\r\n            previewUrl: file.appProperties?.previewUrl,\r\n            cards: CollectionParser.serialize(await getFileContents({ id: file.id! }), SectionName.Sideboard, SectionName.Maybeboard),\r\n            isDirty: false,\r\n        });\r\n    }\r\n};\r\n\r\nconst createNewFile = async ({\r\n    name,\r\n    props,\r\n    fileContent,\r\n    folder,\r\n}: {\r\n    name: string;\r\n    props?: object;\r\n    fileContent?: string;\r\n    folder?: string[];\r\n}): Promise<string> => {\r\n    const file = new Blob([fileContent ?? \"\"], { type: \"text/plain\" });\r\n    const metadata = {\r\n        name,\r\n        mimeType: \"text/plain\",\r\n        appProperties: props ?? {},\r\n        parents: [\"appDataFolder\", ...(folder ?? [])],\r\n    };\r\n\r\n    const accessToken = gapi.auth.getToken().access_token;\r\n    const form = new FormData();\r\n    form.append(\"metadata\", new Blob([JSON.stringify(metadata)], { type: \"application/json\" }));\r\n    form.append(\"file\", file);\r\n\r\n    const res = await fetch(\"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id\", {\r\n        method: \"POST\",\r\n        headers: new Headers({ Authorization: \"Bearer \" + accessToken }),\r\n        body: form,\r\n    });\r\n    const val = await res.json();\r\n    return val.id;\r\n};\r\n\r\nconst updateFile = async ({ id, fileContent }: { id: string; fileContent: string }) => {\r\n    const file = new Blob([fileContent], { type: \"text/plain\" });\r\n\r\n    const accessToken = gapi.auth.getToken().access_token;\r\n    const form = new FormData();\r\n    form.append(\"file\", file);\r\n\r\n    const res = await fetch(`https://www.googleapis.com/upload/drive/v3/files/${id}?uploadType=media&fields=id`, {\r\n        method: \"PATCH\",\r\n        headers: new Headers({ Authorization: \"Bearer \" + accessToken }),\r\n        body: form,\r\n    });\r\n    const val = await res.json();\r\n    return val.id;\r\n};\r\n\r\nconst getFileContents = async ({ id }: { id: string }) => {\r\n    const res = await gapi.client.drive.files.get({\r\n        fileId: id,\r\n        alt: \"media\",\r\n    });\r\n    return res.body;\r\n};\r\n\r\nconst deleteFile = async ({ id }: { id: string }) => gapi.client.drive.files.delete({ fileId: id });\r\n\r\nconst createNewDeck = async (dispatch: React.Dispatch<Action>, { name, fileContent, ...restProps }: DeckProps & { fileContent?: string }) => {\r\n    dispatch({\r\n        type: \"CreateDeck\",\r\n        name,\r\n        link: await createNewFile({\r\n            name: `${name}.txt`,\r\n            props: {\r\n                name,\r\n                ...restProps,\r\n            },\r\n            fileContent,\r\n        }),\r\n        cards: CollectionParser.serialize(fileContent, SectionName.Sideboard, SectionName.Maybeboard),\r\n        isDirty: false,\r\n        ...restProps,\r\n    });\r\n};\r\n\r\nconst deleteDeck = async (dispatch: React.Dispatch<Action>, { name, id }: { name: string; id: string }) => {\r\n    await deleteFile({ id });\r\n    dispatch({ type: \"DeleteDeck\", name });\r\n};\r\n\r\nconst getProfile = () => {\r\n    return gapi.auth2\r\n        .getAuthInstance()\r\n        .currentUser.get()\r\n        .getBasicProfile();\r\n};\r\n\r\nconst signIn = () => gapi.auth2.getAuthInstance().signIn();\r\nconst signOut = () => gapi.auth2.getAuthInstance().signOut();\r\n\r\nexport type GoogleProfile = gapi.auth2.BasicProfile;\r\n\r\nconst GoogleApi = {\r\n    initClient,\r\n    getProfile,\r\n    signIn,\r\n    signOut,\r\n    prepareAppData,\r\n    createNewFile,\r\n    updateFile,\r\n    deleteFile,\r\n    createNewDeck,\r\n    deleteDeck,\r\n    getFileContents,\r\n};\r\nexport default GoogleApi;\r\n","import ScrySdk from \"scryfall-sdk\";\r\nimport DeepReadonly from \"../DeepReadonly\";\r\nimport Axios from \"axios\";\r\nimport { ScryCardSymbol, ScryManaCost, ScrySet } from \"./Types\";\r\n\r\ntype List<T = any> = {\r\n    data: T[];\r\n};\r\n\r\nconst Api = (() => {\r\n    let endpoint = Axios.create({\r\n        baseURL: \"https://api.scryfall.com\",\r\n        responseType: \"json\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    });\r\n\r\n    return {\r\n        endpoint,\r\n        Symbology: {\r\n            All: () => endpoint.get<List<ScryCardSymbol>>(\"/symbology\").then(r => r.data.data),\r\n            ParseMana: (cost: string) => endpoint.get<ScryManaCost>(\"/symbology/parse-mana\", { params: { cost } }).then(r => r.data),\r\n        },\r\n        Cards: {\r\n            Autocomplete: (q: string) =>\r\n                endpoint\r\n                    .get<List<string>>(\"/cards/autocomplete\", { params: { q, include_extras: true } })\r\n                    .then(r => r.data.data),\r\n            Named: (fuzzy: string) => endpoint.get<ScrySdk.Card>(\"/cards/named\", { params: { fuzzy } }).then(r => r.data),\r\n        },\r\n        Sets: {\r\n            All: () => endpoint.get<List<ScrySet>>(\"/sets\").then(r => r.data.data),\r\n        }\r\n    };\r\n})();\r\n\r\nconst getImage = (card: DeepReadonly<ScrySdk.Card>, type: keyof ScrySdk.ImageUris): string | null => {\r\n    var images: ScrySdk.ImageUris | null | undefined;\r\n    switch (card.layout) {\r\n        case \"transform\":\r\n        case \"double_faced_token\":\r\n            images = card.card_faces![0].image_uris;\r\n            break;\r\n        default:\r\n            images = card.image_uris;\r\n    }\r\n    return images?.[type] ?? null;\r\n};\r\n\r\nconst getPlaceholder = (cardName: string): string => `https://via.placeholder.com/146x204?text=${cardName.replace(/\\s/, \"+\")}`;\r\n\r\nconst Scry = {\r\n    ...Api,\r\n    getImage,\r\n    getPlaceholder,\r\n};\r\nexport default Scry;\r\n","import React from \"react\";\r\n\r\nconst useEventListener = <K extends keyof WindowEventMap>(eventName: K, handler: (this: Window, ev: WindowEventMap[K]) => any, element = window) => {\r\n    const savedHandler = React.useRef<any>();\r\n    \r\n    React.useEffect(() => {\r\n        savedHandler.current = handler;\r\n    }, [handler]);\r\n\r\n    React.useEffect(\r\n        () => {\r\n            if (!element || !element.addEventListener) return;\r\n            const eventListener = (event: WindowEventMap[K]) => savedHandler.current(event);\r\n            element.addEventListener(eventName, eventListener);\r\n            return () => {\r\n                element.removeEventListener(eventName, eventListener);\r\n            };\r\n        },\r\n        [eventName, element]\r\n    );\r\n};\r\nexport default useEventListener;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport baseStyled, { css as styledCss, ThemedStyledInterface, ThemedStyledProps, ThemeProvider as ThemeProv } from \"styled-components\";\r\nimport { colors } from \"@material-ui/core\";\r\n\r\nconst additionalArgs = {\r\n    constants: {\r\n        drawerWidth: \"260px\",\r\n        drawerWidthClosed: \"72px\",\r\n        appletHeight: \"280px\",\r\n    },\r\n};\r\n\r\nexport const MainTheme = createMuiTheme(\r\n    {\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: colors.deepOrange[700] },\r\n            secondary: { main: colors.blueGrey[500] },\r\n        },\r\n    },\r\n    additionalArgs\r\n);\r\n\r\nexport const ThemeProvider = ThemeProv;\r\nexport const css = styledCss;\r\n\r\nexport type Theme = typeof MainTheme & typeof additionalArgs;\r\nexport type ComponentProps<T = {}> = ThemedStyledProps<T, Theme>;\r\nconst styled = baseStyled as ThemedStyledInterface<Theme>;\r\nexport default styled;\r\n","import { Avatar, Badge, Divider, List, ListItem, ListItemAvatar, ListItemText, Tooltip } from \"@material-ui/core\";\r\nimport CollectionsIcon from \"@material-ui/icons/Collections\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport React from \"react\";\r\nimport { Deck, DeckName, State } from \"../State\";\r\nimport styled from \"./Styled/Theme\";\r\n\r\nconst StyledItemText = styled(ListItemText)`\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n`;\r\n\r\ntype Props = {\r\n    open: boolean;\r\n};\r\n\r\nconst DrawerDeckList: React.FC<Props> = ({ open }) => {\r\n    const [state, dispatch] = React.useContext(State);\r\n    const selectDeck = (name: string) => () => {\r\n        dispatch({ type: \"SelectDeck\", name });\r\n    };\r\n\r\n    const renderItem = (deck: Deck, name?: string, icon?: JSX.Element) => (\r\n        <Tooltip key={deck.name} title={open ? \"\" : (state.decks[deck.name].isDirty ? \"*\" : \"\") + (name ?? deck.name)} placement=\"right\">\r\n            <ListItem button onClick={selectDeck(deck.name)}>\r\n                <ListItemAvatar>\r\n                    <Badge\r\n                        invisible={!state.decks[deck.name].isDirty}\r\n                        color=\"primary\"\r\n                        overlap=\"circle\"\r\n                        badgeContent=\" \"\r\n                        anchorOrigin={{\r\n                            vertical: \"bottom\",\r\n                            horizontal: \"right\",\r\n                        }}\r\n                    >\r\n                        <Avatar alt={name ?? deck.name} src={deck.previewUrl}>\r\n                            {icon ?? <CollectionsIcon />}\r\n                        </Avatar>\r\n                    </Badge>\r\n                </ListItemAvatar>\r\n                <StyledItemText primary={name ?? deck.name} />\r\n            </ListItem>\r\n        </Tooltip>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {renderItem(state.decks[DeckName.Collection], \"Collection\")}\r\n                {renderItem(state.decks[DeckName.Wishlist], \"Wishlist\", <FavoriteIcon />)}\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                {Object.values(state.decks)\r\n                    .filter(deck => deck.name !== DeckName.Collection && deck.name !== DeckName.Wishlist)\r\n                    .map(deck => renderItem(deck))}\r\n            </List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DrawerDeckList;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Scry from \"../../Utility/Scry\";\r\n\r\ntype Props = {\r\n    label: string;\r\n    onNameSelect?: (name: string) => void;\r\n};\r\n\r\nconst CardNameAutocomplete: React.FC<Props> = ({ label, onNameSelect }) => {\r\n    const [value, setValue] = React.useState<string>(\"\");\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState<string[]>([]);\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n    const [typingTimer, setTypingTimer] = React.useState<number | undefined>(undefined);\r\n\r\n    const onInputChange = (newValue: string, reason: \"input\" | \"reset\") => {\r\n        if (value === newValue || reason === \"reset\") {\r\n            return;\r\n        }\r\n        setValue(newValue);\r\n\r\n        clearTimeout(typingTimer);\r\n        setTypingTimer(\r\n            setTimeout(() => {\r\n                if (newValue.length < 2) {\r\n                    return;\r\n                }\r\n                setIsLoading(true);\r\n                Scry.Cards.Autocomplete(newValue).then(names => {\r\n                    setOptions(names);\r\n                    setIsLoading(false);\r\n                    if (names.length === 1 && names[0].toLowerCase().includes(newValue.toLowerCase())) {\r\n                        setValue(names[0]);\r\n                        onChange(names[0]);\r\n                        setOpen(false);\r\n                    }\r\n                });\r\n            }, 500)\r\n        );\r\n    };\r\n\r\n    const onChange = (newValue: string) => {\r\n        setValue(newValue);\r\n        setOptions([]);\r\n        onNameSelect && onNameSelect(newValue);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            style={{ width: 300 }}\r\n            open={open}\r\n            value={value}\r\n            onOpen={() => setOpen(true)}\r\n            onClose={() => setOpen(false)}\r\n            onChange={(e, val) => onChange(val)}\r\n            onInputChange={(e, val, reason) => onInputChange(val, reason)}\r\n            options={options}\r\n            loading={isLoading}\r\n            renderInput={params => (\r\n                <TextField\r\n                    {...params}\r\n                    label={label}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {isLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    );\r\n};\r\nexport default CardNameAutocomplete;\r\n","import { Paper, Typography } from \"@material-ui/core\";\r\nimport styled from \"./Theme\";\r\n\r\nexport const FlexCol = styled.div`\r\n    flex: 1 1 auto;\r\n`;\r\n\r\nexport const AppletPaper = styled(Paper)`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n    min-height: ${p => p.theme.constants.appletHeight};\r\n    padding: ${p => p.theme.spacing(2)}px;\r\n`;\r\n\r\nexport const AppletActions = styled.div`\r\n    align-self: flex-end;\r\n`;\r\n\r\nexport const Title = styled(Typography).attrs(p => ({\r\n    component: \"h2\",\r\n    variant: \"h6\",\r\n    color: \"primary\",\r\n    gutterBottom: true,\r\n}))``;\r\n","import { Avatar, Button, ButtonGroup, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, TextField } from \"@material-ui/core\";\r\nimport CollectionsIcon from \"@material-ui/icons/Collections\";\r\nimport React from \"react\";\r\nimport { State } from \"../../State\";\r\nimport GoogleApi from \"../../Utility/GoogleApi\";\r\nimport Scry from \"../../Utility/Scry\";\r\nimport CardNameAutocomplete from \"../Styled/CardNameAutocomplete\";\r\nimport { AppletActions, AppletPaper, FlexCol, Title } from \"../Styled/Grid\";\r\nimport styled from \"../Styled/Theme\";\r\n\r\nconst PreviewRow = styled.div`\r\n    display: flex;\r\n    margin-top: ${p => p.theme.spacing(1)}px;\r\n    align-items: center;\r\n\r\n    & .MuiAutocomplete-root {\r\n        flex-grow: 1;\r\n        margin-right: ${p => p.theme.spacing(1)}px;\r\n    }\r\n`;\r\n\r\nconst AddDeck: React.FC = () => {\r\n    const [state, dispatch] = React.useContext(State);\r\n\r\n    const [importText, setImportText] = React.useState<string>(\"\");\r\n    const [deckName, setDeckName] = React.useState<string>(\"\");\r\n    const [open, setOpen] = React.useState(false);\r\n    const [invalidName, setInvalidName] = React.useState<string | null>(null);\r\n\r\n    const [previewUrl, setPreviewUrl] = React.useState<string>(\"\");\r\n\r\n    const handleClickOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleImport = () => {\r\n        setOpen(false);\r\n        GoogleApi.createNewDeck(dispatch, { name: deckName, fileContent: importText, previewUrl });\r\n        setImportText(\"\");\r\n        validateName(\"\");\r\n        setPreviewUrl(\"\");\r\n    };\r\n\r\n    const validateName = (name: string) => {\r\n        setDeckName(name);\r\n        if (name === \"\") {\r\n            setInvalidName(\"Deck name can't be empty\");\r\n            return;\r\n        }\r\n        if (state.decks[name]) {\r\n            setInvalidName(\"Deck with this name already exists\");\r\n            return;\r\n        }\r\n        setInvalidName(null);\r\n    };\r\n\r\n    const updatePreview = (name: string) => {\r\n        if (!name) {\r\n            setPreviewUrl(\"\");\r\n            return;\r\n        }\r\n        Scry.Cards.Named(name).then(card => {\r\n            setPreviewUrl(Scry.getImage(card, \"art_crop\") ?? \"\");\r\n        });\r\n    };\r\n\r\n    React.useEffect(() => validateName(\"\"), []);\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={4}>\r\n            <AppletPaper>\r\n                <Title>Add deck</Title>\r\n                <FlexCol>\r\n                    <TextField\r\n                        label=\"Deck name\"\r\n                        variant=\"outlined\"\r\n                        error={!!invalidName}\r\n                        helperText={invalidName}\r\n                        value={deckName}\r\n                        onChange={e => validateName(e.target.value)}\r\n                        fullWidth\r\n                    />\r\n                    <PreviewRow>\r\n                        <CardNameAutocomplete label=\"Preview card\" onNameSelect={updatePreview} />\r\n                        <Avatar alt=\"Preview icon\" src={previewUrl}>\r\n                            <CollectionsIcon />\r\n                        </Avatar>\r\n                    </PreviewRow>\r\n                </FlexCol>\r\n                <AppletActions>\r\n                    <ButtonGroup size=\"small\">\r\n                        <Button disabled={!!invalidName} onClick={handleClickOpen}>\r\n                            Import\r\n                        </Button>\r\n                        <Button disabled={!!invalidName} color=\"primary\" onClick={handleImport}>\r\n                            Create empty\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </AppletActions>\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"import-deck-dialog\" fullWidth maxWidth=\"md\">\r\n                    <DialogTitle id=\"import-deck-dialog\">Import</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>Paste exported deck below.</DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            fullWidth\r\n                            label=\"Import\"\r\n                            multiline\r\n                            rows=\"15\"\r\n                            variant=\"outlined\"\r\n                            value={importText}\r\n                            onChange={e => setImportText(e.target.value)}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={handleImport} color=\"primary\">\r\n                            Import\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </AppletPaper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default AddDeck;\r\n","import { AssertionError } from \"assert\";\r\n\r\nfunction assert(condition: any, message: string): asserts condition {\r\n    if (!condition) {\r\n        throw new AssertionError({ message });\r\n    }\r\n}\r\nexport default assert;","import React from \"react\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport { CollectionCardProps } from \"../Components/Previews/CollectionPreview\";\r\nimport { DeckName, SectionName, State } from \"../State\";\r\nimport assert from \"./Assert\";\r\n\r\nconst useCardActions = ({ card, deckName, sectionName }: CollectionCardProps) => {\r\n    const [state, dispatch] = React.useContext(State);\r\n\r\n    const targetDeck = deckName ?? state.selectedDeck ?? null;\r\n    const isOnWishlist = () => state.decks[DeckName.Wishlist].cards[SectionName.Default][card.name] !== undefined;\r\n    const sections = (targetDeck ? Object.keys(state.decks[targetDeck].cards) : []).filter(s => s !== sectionName);\r\n    return {\r\n        updateCardQuantity: (val: number) => {\r\n            assert(!isNullOrUndefined(deckName), \"DeckName should not be empty if the preview actions are Deck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: sectionName ?? SectionName.Default,\r\n                card: {\r\n                    ...card,\r\n                    amount: val,\r\n                },\r\n            });\r\n        },\r\n        openScryfallPage: () => card.scryfall_uri && window.open(card.scryfall_uri, \"_blank\"),\r\n        isOnWishlist,\r\n        toggleWishlist: () =>\r\n            isOnWishlist()\r\n                ? dispatch({\r\n                    type: \"UpdateDeckCard\",\r\n                    deckName: DeckName.Wishlist,\r\n                    sectionName: SectionName.Default,\r\n                    card: {\r\n                        ...card,\r\n                        amount: 0,\r\n                    },\r\n                })\r\n                : dispatch({\r\n                    type: \"UpdateDeckCard\",\r\n                    deckName: DeckName.Wishlist,\r\n                    sectionName: SectionName.Default,\r\n                    card: {\r\n                        ...card,\r\n                        amount: 1,\r\n                    },\r\n                }),\r\n        wishlistTooltip: () => (isOnWishlist() ? \"Remove from wishlist\" : \"Add to wishlist\"),\r\n        removeCard: () => {\r\n            assert(!isNullOrUndefined(deckName), \"DeckName should not be empty if the preview actions are Deck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: sectionName ?? SectionName.Default,\r\n                card: {\r\n                    ...card,\r\n                    amount: 0,\r\n                },\r\n            });\r\n        },\r\n        sections,\r\n        changeSection: (newSection: string) => {\r\n            assert(!isNullOrUndefined(deckName), \"DeckName should not be empty if the preview actions are Deck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: sectionName ?? SectionName.Default,\r\n                card: {\r\n                    ...card,\r\n                    amount: 0,\r\n                },\r\n            });\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: newSection,\r\n                card: {\r\n                    ...card,\r\n                    amount: card.amount,\r\n                },\r\n            });\r\n        },\r\n        addToDeck: (section: string = SectionName.Default) => {\r\n            assert(!isNullOrUndefined(targetDeck), \"TargetDeck should not be empty if the preview actions are SearchDeck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName: targetDeck,\r\n                sectionName: section,\r\n                card: {\r\n                    ...card,\r\n                    amount: 1,\r\n                },\r\n            });\r\n        }\r\n    } as const;\r\n};\r\nexport default useCardActions;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport { AvatarProps } from \"@material-ui/core/Avatar\";\r\nimport React from \"react\";\r\nimport { State } from \"../../State\";\r\nimport styled, { ComponentProps, css } from \"./Theme\";\r\n\r\ntype StyledAvatarProps = { action: \"+\" | \"-\"; size: Props[\"size\"] } & AvatarProps;\r\n\r\nconst StyledAvatar = styled(Avatar).attrs((p: ComponentProps<StyledAvatarProps>) => ({\r\n    className: p.size === \"chip\" ? p.className + \" MuiChip-avatar MuiChip-avatarSmall\" : p.className,\r\n}))<StyledAvatarProps>`\r\n    cursor: pointer;\r\n    color: ${p => p.theme.palette.text.primary};\r\n\r\n    ${p =>\r\n        p.size === \"inline\" &&\r\n        css`\r\n            width: ${p.theme.spacing(3)}px;\r\n            height: ${p.theme.spacing(3)}px;\r\n            font-size: 0.875rem;\r\n        `}\r\n\r\n    &:hover:before {\r\n        content: \"${p => p.action}\";\r\n    }\r\n`;\r\n\r\ntype Props = {\r\n    val: number;\r\n    onChange: (val: number) => void;\r\n    size?: \"chip\" | \"inline\";\r\n};\r\n\r\nconst IncrementNumber: React.FC<Props> = ({ val, onChange, size }) => {\r\n    const state = React.useContext(State)[0];\r\n\r\n    const onClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.stopPropagation();\r\n        onChange(val + (state.modifierKeys.shift ? 1 : -1));\r\n    };\r\n    return (\r\n        <StyledAvatar title=\"\" onClick={onClick} action={state.modifierKeys.shift ? \"+\" : \"-\"} size={size}>\r\n            {val}\r\n        </StyledAvatar>\r\n    );\r\n};\r\nexport default IncrementNumber;\r\n","import React from \"react\";\r\nimport { State } from \"../../State\";\r\nimport { ScryCardSymbol } from \"../../Utility/Scry/Types\";\r\nimport styled from \"./Theme\";\r\n\r\nconst Symbol = styled.svg`\r\n    display: inline-block;\r\n    height: 16px;\r\n    width: 16px;\r\n    margin: 1px 1px -2px 1px;\r\n`;\r\n\r\ntype Props = {\r\n    symbol: string;\r\n};\r\n\r\nconst SymbolIcon: React.FC<Props> = ({ symbol }) => {\r\n    const [state] = React.useContext(State);\r\n    const [symbolObj, setSymbolObj] = React.useState<ScryCardSymbol>();\r\n    React.useEffect(() => {\r\n        setSymbolObj(state.symbolList[symbol] ?? Object.values(state.symbolList).find(s => s.loose_variant === symbol));\r\n    }, [symbol, state.symbolList]);\r\n    return symbolObj ? <Symbol dangerouslySetInnerHTML={{ __html: symbolObj.svg }} /> : <>{symbol}</>;\r\n};\r\n\r\nexport default SymbolIcon;\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { TypographyProps } from \"@material-ui/core/Typography\";\r\nimport SymbolIcon from \"./SymbolIcon\";\r\n\r\ntype Props = TypographyProps & {\r\n    text: string;\r\n};\r\n\r\nconst SymbolTypography: React.FC<Props> = ({ text, ...typographyProps }) => {\r\n    const [parsed, setParsed] = React.useState<JSX.Element[]>([]);\r\n    React.useEffect(() => {\r\n        setParsed((text.match(/({.*?})|([^{]+)/g) ?? []).map((m, i) => (m[0] === \"{\" ? <SymbolIcon key={i} symbol={m} /> : <span key={i}>{m}</span>)));\r\n    }, [text]);\r\n    return <Typography {...typographyProps}>{parsed}</Typography>;\r\n};\r\n\r\nexport default SymbolTypography;\r\n","import { Chip } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../Utility/useCardAction\";\r\nimport IncrementNumber from \"../Styled/IncrementNumber\";\r\nimport styled from \"../Styled/Theme\";\r\nimport SymbolTypography from \"../Styled/SymbolTypography\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\n\r\nconst CustomChip = styled(Chip)`\r\n    width: 100%;\r\n\r\n    & .MuiChip-label {\r\n        flex: 1 1 auto;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    & .MuiChip-deleteIcon {\r\n        width: unset;\r\n        height: unset;\r\n        flex-shrink: 0;\r\n        margin-left: ${p => p.theme.spacing(1)}px;\r\n        margin-top: 1px;\r\n    }\r\n`;\r\n\r\nconst CompressedCard: React.FC<CollectionCardProps> = props => {\r\n    const { updateCardQuantity, openScryfallPage } = useCardActions(props);\r\n    const { card } = props;\r\n    return (\r\n        <CustomChip\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            label={card.name}\r\n            deleteIcon={<SymbolTypography text={card.mana_cost ?? \"\"} noWrap />}\r\n            avatar={<IncrementNumber size=\"chip\" val={card.amount} onChange={updateCardQuantity} />}\r\n            onDelete={openScryfallPage}\r\n            onClick={openScryfallPage}\r\n            title=\"Open on scryfall\"\r\n        />\r\n    );\r\n};\r\nexport default CompressedCard;\r\n","import styled from \"./Theme\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst IndentedTypography = styled(Typography)`\r\n    text-indent: ${p => p.theme.spacing(1)}px;\r\n`;\r\nexport default IndentedTypography;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\nimport CompressedCard from \"./CompressedCard\";\r\nimport IndentedTypography from \"../Styled/IndentedTypography\";\r\n\r\nconst CompressedCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <Grid container direction=\"column\">\r\n            {cards.length >= 1 ? (\r\n                cards.map(c => (\r\n                    <Grid item key={c.name} xs zeroMinWidth>\r\n                        <CompressedCard card={c} {...props} />\r\n                    </Grid>\r\n                ))\r\n            ) : (\r\n                <Grid item xs={12}>\r\n                    <IndentedTypography color=\"textSecondary\" variant=\"subtitle2\">Empty</IndentedTypography>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\nexport default CompressedCollecion;\r\n","import { IconButton, Tooltip, Typography } from \"@material-ui/core\";\r\nimport { IconButtonProps } from \"@material-ui/core/IconButton/IconButton\";\r\nimport { darken } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport styled, { css } from \"./Theme\";\r\n\r\nconst StyledIconButton = styled(IconButton)<{ background?: \"primary\" | \"secondary\" }>`\r\n    ${p =>\r\n        p.background &&\r\n        css`\r\n            background-color: ${p.theme.palette[p.background].main};\r\n            &.Mui-disabled {\r\n                background-color: ${darken(p.theme.palette[p.background].main, 0.3)};\r\n            }\r\n        `};\r\n    &:hover {\r\n        ${p =>\r\n        p.background &&\r\n            css`\r\n                background-color: ${p.theme.palette[p.background].dark};\r\n            `};\r\n    }\r\n`;\r\n\r\ntype Props = {\r\n    onClick: () => void;\r\n    title: string;\r\n    size?: IconButtonProps[\"size\"];\r\n    disabled?: boolean;\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst TooltipButton: React.FC<Props> = ({ onClick, title, size, background, disabled, children }) => {\r\n    return (\r\n        <Tooltip title={title}>\r\n            <span>\r\n                <StyledIconButton size={size} background={background} disabled={disabled} onClick={onClick} aria-label={title}>\r\n                    {children}\r\n                    <Typography variant=\"srOnly\">{title}</Typography>\r\n                </StyledIconButton>\r\n            </span>\r\n        </Tooltip>\r\n    );\r\n};\r\nexport default TooltipButton;\r\n","import { IconButtonProps } from \"@material-ui/core/IconButton\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../../Utility/useCardAction\";\r\nimport SwapVertIcon from \"@material-ui/icons/SwapVert\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\nimport { ClickAwayListener, Grow, MenuItem, MenuList, Paper, Popper } from \"@material-ui/core\";\r\nimport { SectionName } from \"../../../State\";\r\n\r\ntype Props = {\r\n    actions: ReturnType<typeof useCardActions>;\r\n    size?: IconButtonProps[\"size\"];\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst ChangeSectionButton: React.FC<Props> = ({ actions, size, background }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLDivElement>(null);\r\n\r\n    const handleToggle = () => setOpen(prevOpen => !prevOpen);\r\n    const handleClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <span ref={anchorRef}>\r\n                <TooltipButton title=\"Change section\" onClick={handleToggle} disabled={actions.sections.length <= 0} background={background} size={size}>\r\n                    <SwapVertIcon />\r\n                </TooltipButton>\r\n            </span>\r\n            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition>\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                        }}\r\n                    >\r\n                        <Paper elevation={5}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList>\r\n                                    {(actions.sections).map(s => (\r\n                                        <MenuItem\r\n                                            key={s}\r\n                                            onClick={() => actions.changeSection(s)}\r\n                                        >\r\n                                            {s === SectionName.Default ? \"Default\" : s}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    );\r\n};\r\nexport default ChangeSectionButton;\r\n","import { IconButtonProps } from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../../Utility/useCardAction\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\n\r\ntype Props = {\r\n    actions: ReturnType<typeof useCardActions>;\r\n    size?: IconButtonProps[\"size\"];\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst DeleteButton: React.FC<Props> = ({ actions, size, background }) => {\r\n    return (\r\n        <TooltipButton title=\"Remove card\" onClick={actions.removeCard} background={background} size={size}>\r\n            <DeleteIcon />\r\n        </TooltipButton>\r\n    );\r\n};\r\nexport default DeleteButton;\r\n","import { IconButtonProps } from \"@material-ui/core/IconButton\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../../Utility/useCardAction\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\n\r\ntype Props = {\r\n    actions: ReturnType<typeof useCardActions>;\r\n    size?: IconButtonProps[\"size\"];\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst WishlistButton: React.FC<Props> = ({ actions, size, background }) => {\r\n    return (\r\n        <TooltipButton title={actions.wishlistTooltip()} onClick={actions.toggleWishlist} background={background} size={size}>\r\n            {actions.isOnWishlist() ? <FavoriteIcon /> : <FavoriteBorderIcon />}\r\n        </TooltipButton>\r\n    );\r\n};\r\nexport default WishlistButton;\r\n","import { Fab } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport React from \"react\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport Scry from \"../../Utility/Scry\";\r\nimport useCardActions from \"../../Utility/useCardAction\";\r\nimport IncrementNumber from \"../Styled/IncrementNumber\";\r\nimport styled from \"../Styled/Theme\";\r\nimport ChangeSectionButton from \"./ActionButtons/ChangeSectionButton\";\r\nimport DeleteButton from \"./ActionButtons/DeleteButton\";\r\nimport WishlistButton from \"./ActionButtons/WishlistButton\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    padding-bottom: 139.344262295%;\r\n    width: 100%;\r\n    height: 0;\r\n    position: relative;\r\n`;\r\n\r\nconst Image = styled.img`\r\n    border-radius: 4.75% / 3.5%;\r\n    background-image: repeating-linear-gradient(-55deg, #ddd, #ddd 5px, #ccc 5px, #ccc 10px);\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst IncrementActions = styled.div`\r\n    position: absolute;\r\n    top: 25%;\r\n    left: ${p => p.theme.spacing(2)}px;\r\n`;\r\n\r\nconst BottomActions = styled.div`\r\n    position: absolute;\r\n    bottom: ${p => p.theme.spacing(2)}px;\r\n    right: ${p => p.theme.spacing(2)}px;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    opacity: 0;\r\n    transition: opacity 0.2s ease-in-out;\r\n\r\n    ${Body}:hover & {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\nconst ActionsMenu = styled.div<{ open: boolean }>`\r\n    transform: scaleX(${p => (p.open ? 1 : 0)});\r\n    transition: all 0.2s ease-in-out;\r\n\r\n    & > * {\r\n        margin-right: ${p => p.theme.spacing(1)}px;\r\n    }\r\n`;\r\n\r\nconst ImagesCard: React.FC<CollectionCardProps> = props => {\r\n    const actions = useCardActions(props);\r\n    const { card } = props;\r\n\r\n    const [actionsOpen, setActionsOpen] = React.useState(false);\r\n    const toggleActionsOpen = () => setActionsOpen(prev => !prev);\r\n\r\n    return (\r\n        <Body>\r\n            <Image src={Scry.getImage(card, \"normal\") ?? \"\"} onClick={actions.openScryfallPage} title=\"Open on scryfall\" />\r\n            {!isNullOrUndefined(card.amount) && (\r\n                <IncrementActions>\r\n                    <IncrementNumber val={card.amount} onChange={actions.updateCardQuantity} />\r\n                </IncrementActions>\r\n            )}\r\n            <BottomActions>\r\n                <ActionsMenu open={actionsOpen}>\r\n                    <WishlistButton actions={actions} background=\"secondary\" />\r\n                    <ChangeSectionButton actions={actions} background=\"secondary\" />\r\n                    <DeleteButton actions={actions} background=\"secondary\" />\r\n                </ActionsMenu>\r\n                <Fab color=\"primary\" onClick={toggleActionsOpen}>\r\n                    <MenuIcon />\r\n                </Fab>\r\n            </BottomActions>\r\n        </Body>\r\n    );\r\n};\r\nexport default ImagesCard;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport IndentedTypography from \"../Styled/IndentedTypography\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\nimport ImagesCard from \"./ImagesCard\";\r\n\r\nconst ImagesCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <Grid container spacing={1} alignItems=\"center\">\r\n            {cards.length >= 1 ? (\r\n                cards.map(c => (\r\n                    <Grid key={c.name} item xs={6} lg={6} xl={4}>\r\n                        <ImagesCard card={c} {...props} />\r\n                    </Grid>\r\n                ))\r\n            ) : (\r\n                <Grid item xs={12}>\r\n                    <IndentedTypography color=\"textSecondary\">Empty</IndentedTypography>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\nexport default ImagesCollecion;\r\n","import React from \"react\";\r\nimport { State } from \"../../State\";\r\nimport { ScryCardRarity, ScrySet } from \"../../Utility/Scry/Types\";\r\nimport styled from \"./Theme\";\r\n\r\nconst Set = styled.svg<{ rarity: ScryCardRarity }>`\r\n    width: 25px;\r\n    height: 20px;\r\n    fill: url(#rarity-${p => p.rarity});\r\n`;\r\n\r\ntype Props = {\r\n    set: string;\r\n    rarity: ScryCardRarity;\r\n};\r\n\r\nconst SetIcon: React.FC<Props> = ({ set, rarity }) => {\r\n    const [state] = React.useContext(State);\r\n    const [setObj, setSetObj] = React.useState<ScrySet>();\r\n    React.useEffect(() => {\r\n        setSetObj(state.setList[set]);\r\n    }, [set, state.setList]);\r\n    return setObj ? (\r\n        <Set rarity={rarity}>\r\n            <defs>\r\n                <linearGradient id=\"rarity-common\">\r\n                    <stop offset=\"0%\" stopColor=\"#000\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"rarity-uncommon\" gradientTransform=\"rotate(90)\">\r\n                    <stop offset=\"0%\" stopColor=\"#4d565a\" />\r\n                    <stop offset=\"50%\" stopColor=\"#a0c3d3\" />\r\n                    <stop offset=\"100%\" stopColor=\"#4d565a\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"rarity-rare\" gradientTransform=\"rotate(90)\">\r\n                    <stop offset=\"0%\" stopColor=\"#85723e\" />\r\n                    <stop offset=\"50%\" stopColor=\"#d4b975\" />\r\n                    <stop offset=\"100%\" stopColor=\"#85723e\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"rarity-mythic\" gradientTransform=\"rotate(90)\">\r\n                    <stop offset=\"0%\" stopColor=\"#b02911\" />\r\n                    <stop offset=\"50%\" stopColor=\"#e87f03\" />\r\n                    <stop offset=\"100%\" stopColor=\"#b02911\" />\r\n                </linearGradient>\r\n            </defs>\r\n            <svg dangerouslySetInnerHTML={{ __html: setObj.icon_svg }} />\r\n        </Set>\r\n    ) : (\r\n        <>{set}</>\r\n    );\r\n};\r\n\r\nexport default SetIcon;\r\n","import { Link, TableCell, TableRow } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport React from \"react\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport useCardActions from \"../../Utility/useCardAction\";\r\nimport IncrementNumber from \"../Styled/IncrementNumber\";\r\nimport SetIcon from \"../Styled/SetIcon\";\r\nimport SymbolTypography from \"../Styled/SymbolTypography\";\r\nimport styled, { css } from \"../Styled/Theme\";\r\nimport TooltipButton from \"../Styled/TooltipButton\";\r\nimport ChangeSectionButton from \"./ActionButtons/ChangeSectionButton\";\r\nimport DeleteButton from \"./ActionButtons/DeleteButton\";\r\nimport WishlistButton from \"./ActionButtons/WishlistButton\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\nimport { NameCell, SetWidthCell } from \"./ListCollection\";\r\n\r\nconst Actions = styled.div<{ open: boolean }>`\r\n    white-space: nowrap;\r\n    & > *:not(:last-child) {\r\n        margin-right: ${p => p.theme.spacing(0.5)}px;\r\n    }\r\n\r\n    ${p => p.theme.breakpoints.down(\"xs\")} {\r\n        & {\r\n            ${p =>\r\n        !p.open &&\r\n                css`\r\n                    display: none;\r\n                `}\r\n\r\n            ${p =>\r\n        p.open &&\r\n                css`\r\n                    position: absolute;\r\n                    transform: translateX(calc(-100% - 4px));\r\n                `}\r\n        }\r\n    }\r\n\r\n    ${p => p.theme.breakpoints.between(\"md\", \"sm\")} {\r\n        & {\r\n            ${p =>\r\n        !p.open &&\r\n                css`\r\n                    display: none;\r\n                `}\r\n\r\n            ${p =>\r\n        p.open &&\r\n                css`\r\n                    position: absolute;\r\n                    transform: translateX(calc(-100% - 4px));\r\n                `}\r\n        }\r\n    }\r\n`;\r\n\r\nconst ActionsMenu = styled.div`\r\n    display: none;\r\n    ${p => p.theme.breakpoints.down(\"xs\")} {\r\n        & {\r\n            display: initial;\r\n        }\r\n    }\r\n    ${p => p.theme.breakpoints.between(\"md\", \"sm\")} {\r\n        & {\r\n            display: initial;\r\n        }\r\n    }\r\n`;\r\n\r\nconst ListCard: React.FC<CollectionCardProps> = props => {\r\n    const actions = useCardActions(props);\r\n    const { card } = props;\r\n\r\n    const [actionsOpen, setActionsOpen] = React.useState(false);\r\n    const toggleActionsOpen = () => setActionsOpen(prev => !prev);\r\n\r\n    return (\r\n        <TableRow>\r\n            <SetWidthCell width=\"40px\" component=\"th\" scope=\"row\" align=\"center\">\r\n                {!isNullOrUndefined(card.amount) ? <IncrementNumber size=\"inline\" val={card.amount} onChange={actions.updateCardQuantity} /> : \"-\"}\r\n            </SetWidthCell>\r\n            <NameCell>\r\n                <Link href=\"#\" onClick={actions.openScryfallPage} color=\"inherit\" title=\"Open on scryfall\">\r\n                    {card.name}\r\n                </Link>\r\n            </NameCell>\r\n            <SetWidthCell width=\"40px\" align=\"center\">\r\n                <SetIcon set={card.set} rarity={card.rarity} />\r\n            </SetWidthCell>\r\n            <TableCell>\r\n                <SymbolTypography text={card.mana_cost ?? \"\"} noWrap />\r\n            </TableCell>\r\n            <TableCell style={{ position: \"relative\" }}>\r\n                <Actions open={actionsOpen}>\r\n                    <WishlistButton actions={actions} size=\"small\" background={actionsOpen ? \"secondary\" : undefined} />\r\n                    <ChangeSectionButton actions={actions} size=\"small\" background={actionsOpen ? \"secondary\" : undefined} />\r\n                    <DeleteButton actions={actions} size=\"small\" background={actionsOpen ? \"secondary\" : undefined} />\r\n                </Actions>\r\n                <ActionsMenu>\r\n                    <TooltipButton title=\"Actions\" onClick={toggleActionsOpen} size=\"small\">\r\n                        <MenuIcon />\r\n                    </TooltipButton>\r\n                </ActionsMenu>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n};\r\nexport default ListCard;\r\n","import { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport IndentedTypography from \"../Styled/IndentedTypography\";\r\nimport styled from \"../Styled/Theme\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\nimport ListCard from \"./ListCard\";\r\n\r\nconst CustomPaddingTable = styled(Table)`\r\n    width: 100%;\r\n    overflow-y: scroll;\r\n    & .MuiTableCell-sizeSmall {\r\n        padding: ${p => p.theme.spacing(0.25, 1)};\r\n    }\r\n`;\r\n\r\nexport const SetWidthCell = styled(TableCell).attrs<{ width: string }>(p => ({\r\n    width: p.width,\r\n}))<{ width: string }>``;\r\n\r\nexport const NameCell = styled(TableCell)`\r\n    width: 60%;\r\n    max-width: 120px;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n`;\r\n\r\nconst ListCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <CustomPaddingTable size=\"small\" aria-label=\"card table\">\r\n            <TableHead>\r\n                <TableRow>\r\n                    <SetWidthCell width=\"40px\" align=\"center\">\r\n                        #\r\n                    </SetWidthCell>\r\n                    <NameCell>Name</NameCell>\r\n                    <SetWidthCell width=\"40px\" align=\"center\">\r\n                        Set\r\n                    </SetWidthCell>\r\n                    <TableCell>Cost</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {cards.length >= 1 ? (\r\n                    cards.map(c => <ListCard key={c.name} card={c} {...props} />)\r\n                ) : (\r\n                    <TableRow>\r\n                        <TableCell colSpan={6}>\r\n                            <IndentedTypography color=\"textSecondary\">Empty</IndentedTypography>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </TableBody>\r\n        </CustomPaddingTable>\r\n    );\r\n};\r\nexport default ListCollecion;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport omit from \"lodash.omit\";\r\nimport React from \"react\";\r\nimport ScrySdk from \"scryfall-sdk\";\r\nimport { DeckCard, SectionName } from \"../../State\";\r\nimport CompressedCollecion from \"./CompressedCollection\";\r\nimport ImagesCollecion from \"./ImagesCollection\";\r\nimport ListCollecion from \"./ListCollection\";\r\n\r\nexport type PreviewStyle = \"Standard\" | \"List\" | \"Images\" | \"Compressed\";\r\nexport type PreviewActions = \"SearchDeck\" | \"SearchWishlist\" | \"Deck\";\r\nexport type SortByOptions = \"Name\" | \"Cmc\" | \"Type\" | \"Rarity\";\r\nexport type SortOrderOptions = \"Asc\" | \"Desc\";\r\n\r\nexport type CollectionPreviewProps = {\r\n    cards: (DeckCard & ScrySdk.Card)[];\r\n    actions: PreviewActions;\r\n    sortBy: SortByOptions;\r\n    sortOrder: SortOrderOptions;\r\n    showGroups: boolean;\r\n    deckName?: string;\r\n    sectionName?: string;\r\n};\r\n\r\nexport type CollectionCardProps = {\r\n    card: DeckCard & ScrySdk.Card;\r\n    actions: PreviewActions;\r\n    deckName?: string;\r\n    sectionName?: string;\r\n};\r\n\r\nconst desc = <T extends object>(a: T, b: T, orderBy: keyof T, func: <U extends any>(v: U) => U | number) => {\r\n    if (func(b[orderBy]) < func(a[orderBy])) {\r\n        return -1;\r\n    }\r\n    if (func(b[orderBy]) > func(a[orderBy])) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n};\r\n\r\nconst getSorting = <T extends object>(order: SortOrderOptions, orderBy: keyof T, func: <U extends any>(v: U) => U | number = v => v): ((a: T, b: T) => number) => {\r\n    return order === \"Desc\" ? (a, b) => desc(a, b, orderBy, func) : (a, b) => -desc(a, b, orderBy, func);\r\n};\r\n\r\n\r\nconst StableSort = <T extends object>(array: T[], cmp: (a: T, b: T) => number) => {\r\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = cmp(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n};\r\n\r\nconst rarityOrder = [\"common\", \"uncommon\", \"rare\", \"mythic\"] as const;\r\nconst GetSortFunction = (sortBy: SortByOptions, sortOrder: SortOrderOptions) => {\r\n    switch (sortBy) {\r\n        case \"Name\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"name\");\r\n        case \"Cmc\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"mana_cost\");\r\n        case \"Type\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"type_line\");\r\n        case \"Rarity\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"rarity\", v => rarityOrder.indexOf(v));\r\n    }\r\n};\r\n\r\ntype Props = CollectionPreviewProps & {\r\n    style: PreviewStyle;\r\n};\r\n\r\nconst CollectionPreview: React.FC<Props> = props => {\r\n    const renderCollection = () => {\r\n        const passedProps = {\r\n            ...omit(props, \"style\", \"cards\"),\r\n            cards: StableSort(props.cards, GetSortFunction(props.sortBy, props.sortOrder)),\r\n        };\r\n        switch (props.style) {\r\n            case \"List\":\r\n                return <ListCollecion {...passedProps} />;\r\n            case \"Images\":\r\n                return <ImagesCollecion {...passedProps} />;\r\n            case \"Compressed\":\r\n                return <CompressedCollecion {...passedProps} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {props.sectionName !== SectionName.Default && <Typography variant=\"h6\">{props.sectionName}</Typography>}\r\n            {renderCollection()}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CollectionPreview;\r\n","import { Button, ButtonGroup, Tooltip, Typography } from \"@material-ui/core\";\r\nimport ViewHeadlineIcon from \"@material-ui/icons/ViewHeadline\";\r\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\r\nimport ViewModuleIcon from \"@material-ui/icons/ViewModule\";\r\nimport React from \"react\";\r\nimport styled from \"../../Styled/Theme\";\r\nimport { PreviewStyle } from \"../CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n\r\n    & .MuiTypography-root {\r\n        margin-right: ${p => p.theme.spacing(1)}px;\r\n    }\r\n\r\n    & .MuiButton-root {\r\n        padding-left: 0;\r\n        padding-right: 0;\r\n    }\r\n`;\r\n\r\nconst IconForStyle = (style: PreviewStyle) => {\r\n    switch (style) {\r\n        case \"Standard\":\r\n            return <ViewListIcon />;\r\n        case \"List\":\r\n            return <ViewHeadlineIcon />;\r\n        case \"Images\":\r\n            return <ViewModuleIcon />;\r\n    }\r\n    throw Error(`Style ${style} does not have an icon.`);\r\n};\r\n\r\ntype Props = {\r\n    style: PreviewStyle;\r\n    onToggle: (style: PreviewStyle) => void;\r\n};\r\n\r\nconst PreviewStyleToggle: React.FC<Props> = ({ style, onToggle }) => {\r\n    return (\r\n        <Body>\r\n            <Typography variant=\"caption\">Display:</Typography>\r\n            <ButtonGroup variant=\"outlined\" size=\"small\">\r\n                {([\"Standard\", \"List\", \"Images\"] as const).map(s => (\r\n                    <Button key={s} onClick={() => onToggle(s)} variant={style === s ? \"contained\" : undefined}>\r\n                        <Tooltip title={s}>{IconForStyle(s)}</Tooltip>\r\n                    </Button>\r\n                ))}\r\n            </ButtonGroup>\r\n        </Body>\r\n    );\r\n};\r\nexport default PreviewStyleToggle;\r\n","import ListAltIcon from \"@material-ui/icons/ListAlt\";\r\nimport React from \"react\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\nimport styled from \"../../Styled/Theme\";\r\n\r\nconst Body = styled.div`\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n    margin-left: ${p => p.theme.spacing(1)}px;\r\n`;\r\n\r\ntype Props = {\r\n    show: boolean;\r\n    setShow: (show: boolean) => void;\r\n};\r\n\r\nconst ShowGroupsToggle: React.FC<Props> = ({ show, setShow }) => {\r\n    return (\r\n        <Body>\r\n            <TooltipButton size=\"small\" title={show ? \"Hide groups\" : \"Show groups\"} onClick={() => setShow(!show)}>\r\n                <ListAltIcon />\r\n            </TooltipButton>\r\n        </Body>\r\n    );\r\n};\r\nexport default ShowGroupsToggle;\r\n","import { Button, ClickAwayListener, Grow, MenuItem, MenuList, Paper, Popper } from \"@material-ui/core\";\r\nimport SortIcon from \"@material-ui/icons/Sort\";\r\nimport React from \"react\";\r\nimport styled from \"../../Styled/Theme\";\r\nimport { SortByOptions, SortOrderOptions } from \"../CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n`;\r\n\r\ntype Props = {\r\n    sortBy: SortByOptions;\r\n    setSortBy: (sortBy: SortByOptions) => void;\r\n    sortOrder: SortOrderOptions;\r\n    setSortOrder: (sortOrder: SortOrderOptions) => void;\r\n};\r\n\r\nconst SortToggle: React.FC<Props> = ({ sortBy, setSortBy, sortOrder, setSortOrder }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n\r\n    const handleToggle = () => setOpen(prevOpen => !prevOpen);\r\n    const handleClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Body>\r\n            <Button ref={anchorRef} size=\"small\" onClick={handleToggle} startIcon={<SortIcon />}>\r\n                Sort by\r\n            </Button>\r\n            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition>\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                        }}\r\n                    >\r\n                        <Paper elevation={5}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList>\r\n                                    {([\r\n                                        [\"Name\", \"Asc\"],\r\n                                        [\"Name\", \"Desc\"],\r\n                                        [\"Cmc\", \"Asc\"],\r\n                                        [\"Cmc\", \"Desc\"],\r\n                                        [\"Type\", \"Asc\"],\r\n                                        [\"Type\", \"Desc\"],\r\n                                        [\"Rarity\", \"Asc\"],\r\n                                        [\"Rarity\", \"Desc\"],\r\n                                    ] as const).map(([by, order]) => (\r\n                                        <MenuItem\r\n                                            key={`${by} (${order})`}\r\n                                            selected={by === sortBy && order === sortOrder}\r\n                                            onClick={event => {\r\n                                                setSortBy(by);\r\n                                                setSortOrder(order);\r\n                                            }}\r\n                                        >\r\n                                            {`${by} (${order})`}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </Body>\r\n    );\r\n};\r\nexport default SortToggle;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClipboard, faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faGoogle } from \"@fortawesome/free-brands-svg-icons\";\r\nimport styled from \"./Theme\";\r\n\r\nconst IconWrap = styled.div`\r\n    width: 24px;\r\n    height: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const CompressIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faCompressAlt} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const ExpandIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faExpandAlt} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const GoogleIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faGoogle} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const ClipboardIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faClipboard} />\r\n    </IconWrap>\r\n);\r\n","import { Dialog, DialogContent, DialogContentText, DialogTitle, Grid, TextField } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport copy from \"clipboard-copy\";\r\nimport React from \"react\";\r\nimport * as Scry from \"scryfall-sdk\";\r\nimport { DeckCard, DeckName, State } from \"../../State\";\r\nimport CollectionParser from \"../../Utility/CollectionParser\";\r\nimport GoogleApi from \"../../Utility/GoogleApi\";\r\nimport CollectionPreview, { PreviewStyle, SortByOptions, SortOrderOptions } from \"../Previews/CollectionPreview\";\r\nimport PreviewStyleToggle from \"../Previews/Common/PreviewStyleToggle\";\r\nimport ShowGroupsToggle from \"../Previews/Common/ShowGroupsToggle\";\r\nimport SortToggle from \"../Previews/Common/SortToggle\";\r\nimport { AppletActions, AppletPaper, FlexCol, Title } from \"../Styled/Grid\";\r\nimport { ClipboardIcon, CompressIcon, ExpandIcon } from \"../Styled/Icons\";\r\nimport styled from \"../Styled/Theme\";\r\nimport TooltipButton from \"../Styled/TooltipButton\";\r\n\r\nconst SectionRow = styled.div`\r\n    margin-bottom: ${p => p.theme.spacing(2)}px;\r\n    width: 100%;\r\n    overflow-x: auto;\r\n    overflow-y: hidden;\r\n`;\r\n\r\nconst ExportRow = styled(FlexCol)`\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n\r\n    & .MuiDialogContentText-root {\r\n        flex-grow: 1;\r\n        margin-bottom: 0;\r\n    }\r\n`;\r\n\r\ntype Props = {\r\n    deckName: string;\r\n};\r\n\r\nconst DeckPreview = ({ deckName }: Props) => {\r\n    const [state, dispatch] = React.useContext(State);\r\n    const deck = state.decks[deckName];\r\n\r\n    const [expanded, setExpanded] = React.useState(true);\r\n    const [exportOpened, setExportOpened] = React.useState(false);\r\n    const [style, setStyle] = React.useState<PreviewStyle>(\"List\");\r\n    const [sortBy, setSortBy] = React.useState<SortByOptions>(\"Cmc\");\r\n    const [sortOrder, setSortOrder] = React.useState<SortOrderOptions>(\"Asc\");\r\n    const [showGroups, setShowGroups] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        const missingCards = Object.values(deck.cards)\r\n            .reduce((prev, val) => [...prev, ...Object.values(val)], [] as DeckCard[])\r\n            .filter(card => !state.cardList[card.name]);\r\n        Scry.Cards.collection(...missingCards.map(card => Scry.CardIdentifier.byName(card.name))).on(\"data\", (card: any) =>\r\n            dispatch({ type: \"AddCard\", card })\r\n        );\r\n    }, [deckName]);\r\n\r\n    const closePreview = () => dispatch({ type: \"SelectDeck\", name: null });\r\n    const toggleExpanded = () => setExpanded(e => !e);\r\n    const onDeleteDeck = () => GoogleApi.deleteDeck(dispatch, { name: deckName, id: state.files[deckName] });\r\n    const onSaveChanges = () =>\r\n        GoogleApi.updateFile({ id: state.files[deckName], fileContent: CollectionParser.deserialize(deck.cards) }).then(() =>\r\n            dispatch({ type: \"UpdateDeck\", name: deckName, isDirty: false })\r\n        );\r\n    const onExportOpen = () => setExportOpened(true);\r\n    const onExportClose = () => setExportOpened(false);\r\n\r\n    return (\r\n        <Grid item xs={12} md={expanded ? 6 : 4}>\r\n            <AppletPaper>\r\n                <Grid container direction=\"row\" justify=\"space-between\">\r\n                    <Grid item>\r\n                        <Title>Deck preview</Title>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TooltipButton title={expanded ? \"Compress\" : \"Expand\"} size=\"small\" onClick={toggleExpanded}>\r\n                            {expanded ? <CompressIcon /> : <ExpandIcon />}\r\n                        </TooltipButton>\r\n                        <TooltipButton title=\"Close preview\" size=\"small\" onClick={closePreview}>\r\n                            <CloseIcon />\r\n                        </TooltipButton>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container justify=\"space-between\">\r\n                    <SortToggle sortBy={sortBy} setSortBy={setSortBy} sortOrder={sortOrder} setSortOrder={setSortOrder} />\r\n                    <ShowGroupsToggle show={showGroups} setShow={setShowGroups} />\r\n                    <FlexCol />\r\n                    {expanded && <PreviewStyleToggle style={style} onToggle={setStyle} />}\r\n                </Grid>\r\n                <FlexCol>\r\n                    {Object.entries(deck.cards).map(([sectionName, cards]) => (\r\n                        <SectionRow key={sectionName}>\r\n                            <CollectionPreview\r\n                                cards={Object.values(cards).map(c => ({ ...c, ...(state.cardList[c.name] ?? {}) })) as any}\r\n                                style={expanded ? style : \"Compressed\"}\r\n                                actions={deckName === DeckName.Wishlist ? \"SearchWishlist\" : \"Deck\"}\r\n                                sortBy={sortBy}\r\n                                sortOrder={sortOrder}\r\n                                showGroups={showGroups}\r\n                                deckName={deckName}\r\n                                sectionName={sectionName}\r\n                            />\r\n                        </SectionRow>\r\n                    ))}\r\n                </FlexCol>\r\n                <AppletActions>\r\n                    <TooltipButton title=\"Export deck\" onClick={onExportOpen}>\r\n                        <GetAppIcon />\r\n                    </TooltipButton>\r\n                    {deckName !== DeckName.Collection && deckName !== DeckName.Wishlist && (\r\n                        <TooltipButton title=\"Delete deck\" onClick={onDeleteDeck}>\r\n                            <DeleteIcon />\r\n                        </TooltipButton>\r\n                    )}\r\n                    {state.decks[deck.name].isDirty && (\r\n                        <TooltipButton title=\"Save changes\" onClick={onSaveChanges} background=\"primary\">\r\n                            <SaveIcon />\r\n                        </TooltipButton>\r\n                    )}\r\n                </AppletActions>\r\n                <Dialog open={exportOpened} onClose={onExportClose} aria-labelledby=\"export-deck-dialog\" fullWidth maxWidth=\"md\">\r\n                    <DialogTitle id=\"import-deck-dialog\">Export</DialogTitle>\r\n                    <DialogContent>\r\n                        <ExportRow>\r\n                            <DialogContentText>Copy exported text below.</DialogContentText>\r\n                            <TooltipButton title=\"Copy to clipboard\" onClick={() => copy(CollectionParser.deserialize(deck.cards))}>\r\n                                <ClipboardIcon />\r\n                            </TooltipButton>\r\n                        </ExportRow>\r\n                        <TextField\r\n                            label=\"Export\"\r\n                            multiline\r\n                            rows=\"15\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            value={CollectionParser.deserialize(deck.cards)}\r\n                            InputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                        />\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </AppletPaper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default DeckPreview;\r\n","import {\r\n    Button,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    Grid,\r\n    TextField,\r\n    Tooltip,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React from \"react\";\r\nimport Scry from \"../../Utility/Scry\";\r\nimport { AppletActions, AppletPaper, FlexCol, Title } from \"../Styled/Grid\";\r\nimport styled from \"../Styled/Theme\";\r\nimport SymbolTypography from \"../Styled/SymbolTypography\";\r\n\r\n// TODO: remove from here & make it reusable?\r\nconst PreviewRow = styled.div`\r\n    display: flex;\r\n    margin-top: ${p => p.theme.spacing(1)}px;\r\n    align-items: center;\r\n\r\n    & .MuiAutocomplete-root {\r\n        flex-grow: 1;\r\n        margin-right: ${p => p.theme.spacing(1)}px;\r\n    }\r\n`;\r\n\r\n// Reusable?\r\ninterface CardSearchFilter {\r\n    /** Array of selected colors inside advanced search */\r\n    colors: {\r\n        r: boolean; // Red\r\n        g: boolean; // Green\r\n        u: boolean; // Blue\r\n        b: boolean; // Black\r\n        w: boolean; // White\r\n    };\r\n    /** Checkbox whether the search should match exact colors */\r\n    colorExactMatch: boolean;\r\n\r\n    /** Converted Mana Cost */\r\n    cmc: number;\r\n    /** Type: equal [=], less than [<], more than [>] */\r\n    cmcType: string;\r\n\r\n    // type: string;\r\n    // subtype: string;\r\n\r\n    // legality: string;\r\n}\r\n\r\nconst initCardSearchFilter = (): CardSearchFilter => {\r\n    return {\r\n        colors: { r: false, g: false, u: false, b: false, w: false },\r\n        colorExactMatch: false,\r\n        cmc: 0,\r\n        cmcType: \"=\",\r\n    };\r\n};\r\n\r\nconst CardSearch: React.FC = () => {\r\n    // Card name & autocomplete structures\r\n    const [cardName, setCardName] = React.useState<string>(\"\");\r\n    const [autoompleteOptions, setAutocompleteOptions] = React.useState<string[]>([]);\r\n\r\n    const updateAutoComplete = (name: string) => {\r\n        setCardName(name);\r\n        Scry.Cards.Autocomplete(cardName).then(names => setAutocompleteOptions(names));\r\n    };\r\n\r\n    const performSearch = () => {\r\n        alert(JSON.stringify(filter));\r\n    };\r\n\r\n    // Advanced Filters Dialog structures\r\n    const [dialogOpen, setDialogOpen] = React.useState<boolean>(false);\r\n    const openDialog = () => setDialogOpen(true);\r\n    const closeDialog = () => setDialogOpen(false);\r\n\r\n    // Filter structures\r\n    const [filter, setFilter] = React.useState<CardSearchFilter>(initCardSearchFilter());\r\n\r\n    const resetFilter = () => setFilter(initCardSearchFilter());\r\n    const handleColors = (color: \"r\" | \"g\" | \"u\" | \"b\" | \"w\") => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newFilter = { ...filter };\r\n        newFilter.colors[color] = event.target.checked;\r\n        setFilter(newFilter);\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12} md>\r\n            <AppletPaper>\r\n                <Title>Card search</Title>\r\n\r\n                <FlexCol>\r\n                    <PreviewRow>\r\n                        <Autocomplete\r\n                            freeSolo\r\n                            autoHighlight\r\n                            disableClearable\r\n                            options={autoompleteOptions}\r\n                            inputValue={cardName}\r\n                            onInputChange={(e, value) => updateAutoComplete(value)}\r\n                            renderInput={params => <TextField {...params} label=\"Card name\" variant=\"outlined\" fullWidth />}\r\n                        />\r\n                    </PreviewRow>\r\n                </FlexCol>\r\n\r\n                <Dialog open={dialogOpen} onClose={closeDialog} aria-labelledby=\"advanced-card-search-dialog\" maxWidth=\"md\" fullWidth>\r\n                    <DialogTitle id=\"advanced-card-search-dialog\">Advanced card search</DialogTitle>\r\n                    <DialogContent>\r\n                        <Typography variant=\"subtitle2\">Filter by color</Typography>\r\n                        <FormGroup row>\r\n                            <FormControlLabel\r\n                                label={<SymbolTypography text=\"{R} Red\" />}\r\n                                control={<Checkbox checked={filter.colors.r} onChange={handleColors(\"r\")} />}\r\n                            />\r\n                            <FormControlLabel\r\n                                label={<SymbolTypography text=\"{G} Green\" />}\r\n                                control={<Checkbox checked={filter.colors.g} onChange={handleColors(\"g\")} />}\r\n                            />\r\n                            <FormControlLabel\r\n                                label={<SymbolTypography text=\"{U} Blue\" />}\r\n                                control={<Checkbox checked={filter.colors.u} onChange={handleColors(\"u\")} />}\r\n                            />\r\n                            <FormControlLabel\r\n                                label={<SymbolTypography text=\"{B} Black\" />}\r\n                                control={<Checkbox checked={filter.colors.b} onChange={handleColors(\"b\")} />}\r\n                            />\r\n                            <FormControlLabel\r\n                                label={<SymbolTypography text=\"{W} White\" />}\r\n                                control={<Checkbox checked={filter.colors.w} onChange={handleColors(\"w\")} />}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormControlLabel\r\n                            label=\"Exact color match?\"\r\n                            control={<Checkbox checked={filter.colorExactMatch} onChange={e => setFilter({ ...filter, colorExactMatch: e.target.checked })} />}\r\n                        />\r\n\r\n                        {/* <br />\r\n\r\n                        <ul>\r\n                            <li>[DONE] Filter by color identity (only selected colors or all cards with selected colors)</li>\r\n                            <li>Filter by converted mana cost (equal, less than, more than)</li>\r\n                            <li>Filter by type/subtype (restrict subtype options based on type)</li>\r\n                            <li>Filter by format legality (choose one)</li>\r\n                        </ul> */}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={resetFilter} color=\"primary\">\r\n                            Reset\r\n                        </Button>\r\n                        <Button onClick={closeDialog} color=\"primary\">\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <AppletActions>\r\n                    <Tooltip title=\"Advanced search filter\">\r\n                        <Button onClick={openDialog}>\r\n                            <FilterListIcon />\r\n                        </Button>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Search for results\">\r\n                        <Button onClick={performSearch}>\r\n                            <SearchIcon />\r\n                        </Button>\r\n                    </Tooltip>\r\n                </AppletActions>\r\n            </AppletPaper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CardSearch;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { AppletPaper, Title } from \"../Styled/Grid\";\r\n\r\nconst UserInfo: React.FC = () => {\r\n    return (\r\n        <Grid item xs={12} sm md>\r\n            <AppletPaper>\r\n                <Title>User info</Title>\r\n                UserInfo paceholder.\r\n            </AppletPaper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default UserInfo;\r\n","import { Container, Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport AddDeck from \"./Applets/AddDeck\";\r\nimport DeckPreview from \"./Applets/DeckPreview\";\r\nimport CardSearch from \"./Applets/CardSearch\";\r\nimport UserInfo from \"./Applets/UserInfo\";\r\nimport { State } from \"../State\";\r\n\r\nconst Home: React.FC = () => {\r\n    const [state] = React.useContext(State);\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n            <Grid container spacing={3}>\r\n                <Grid item direction=\"row\" container spacing={3}>\r\n                    <UserInfo />\r\n                    <AddDeck />\r\n                </Grid>\r\n                <Grid item direction=\"row\" container spacing={3}>\r\n                    <CardSearch />\r\n                    {state.selectedDeck !== null && <DeckPreview deckName={state.selectedDeck} />}\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst NotFound: React.FC = () => {\r\n    return <div>Not found</div>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport { GoogleIcon } from \"./Styled/Icons\";\r\n\r\ntype Props = {\r\n    variant?: \"text\" | \"outlined\" | \"contained\";\r\n    onClick: () => void;\r\n};\r\n\r\nconst SignInButton: React.FC<Props> = ({ variant, onClick }: Props) => {\r\n    return (\r\n        <Button variant={variant} onClick={onClick} startIcon={<GoogleIcon />}>\r\n            <Typography noWrap>Sign in</Typography>\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default SignInButton;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Logo from \"../Assets/logo.png\";\r\nimport GoogleApi from \"../Utility/GoogleApi\";\r\nimport SignInButton from \"./SignInButton\";\r\n\r\nconst SignIn: React.FC = () => {\r\n    return (\r\n        <>\r\n            <Grid container justify=\"center\" alignItems=\"center\" style={{ padding: 25 }}>\r\n                <img src={Logo} alt=\"\" width=\"150px\" height=\"150px\" draggable={false} />\r\n            </Grid>\r\n            <Grid container justify=\"center\" alignItems=\"center\">\r\n                <SignInButton variant=\"contained\" onClick={GoogleApi.signIn} />\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignIn;\r\n","import { AppBar, Avatar, Divider, Drawer, IconButton, Toolbar, Tooltip, Typography } from \"@material-ui/core\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Axios, { AxiosResponse } from \"axios\";\r\nimport React from \"react\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport { initialState, State } from \"../State\";\r\nimport { reducer } from \"../State/Reducers\";\r\nimport GoogleApi, { GoogleProfile } from \"../Utility/GoogleApi\";\r\nimport Scry from \"../Utility/Scry\";\r\nimport { ScryCardSymbol, ScrySet } from \"../Utility/Scry/Types\";\r\nimport useEventListener from \"../Utility/useEventListener\";\r\nimport DrawerDeckList from \"./DrawerDeckList\";\r\nimport Home from \"./Home\";\r\nimport NotFound from \"./NotFound\";\r\nimport SignIn from \"./SignIn\";\r\nimport SignInButton from \"./SignInButton\";\r\nimport { FlexCol } from \"./Styled/Grid\";\r\nimport styled, { ComponentProps, css, MainTheme } from \"./Styled/Theme\";\r\nimport TooltipButton from \"./Styled/TooltipButton\";\r\n\r\nconst bodyOpen = css<ComponentProps<any>>`\r\n    margin-left: ${p => p.theme.constants.drawerWidth};\r\n    width: calc(100% - ${p => p.theme.constants.drawerWidth});\r\n    transition: ${p =>\r\n        p.theme.transitions.create([\"width\", \"margin\"], {\r\n            easing: p.theme.transitions.easing.sharp,\r\n            duration: p.theme.transitions.duration.enteringScreen,\r\n        })};\r\n`;\r\n\r\nconst bodyClose = css<ComponentProps<any>>`\r\n    transition: ${p =>\r\n        p.theme.transitions.create([\"width\", \"margin\"], {\r\n            easing: p.theme.transitions.easing.sharp,\r\n            duration: p.theme.transitions.duration.leavingScreen,\r\n        })};\r\n`;\r\n\r\nconst CustomAppBar = styled(AppBar)<{ open: boolean }>`\r\n    z-index: ${p => p.theme.zIndex.drawer + 1};\r\n    ${bodyClose}\r\n    ${p => p.open && bodyOpen}\r\n    ${p =>\r\n        p.open &&\r\n        css`\r\n            ${p.theme.breakpoints.down(\"xs\")} {\r\n                & {\r\n                    width: 100%;\r\n                    margin-left: 0;\r\n                }\r\n            }\r\n        `}\r\n`;\r\n\r\nconst MenuButton = styled(IconButton)<{ open: boolean }>`\r\n    margin-right: 36px;\r\n    ${p =>\r\n        p.open &&\r\n        css`\r\n            display: none;\r\n        `}\r\n\r\n    ${p => p.theme.breakpoints.down(\"xs\")} {\r\n        & {\r\n            margin-right: ${p => p.theme.spacing(1)}px;\r\n            display: inline-block;\r\n        }\r\n    }\r\n`;\r\n\r\nconst drawerOpen = css<ComponentProps<any>>`\r\n    width: ${p => p.theme.constants.drawerWidth};\r\n    transition: ${p =>\r\n        p.theme.transitions.create(\"width\", {\r\n            easing: p.theme.transitions.easing.sharp,\r\n            duration: p.theme.transitions.duration.enteringScreen,\r\n        })};\r\n`;\r\n\r\nconst drawerClose = css<ComponentProps<any>>`\r\n    width: ${p => p.theme.constants.drawerWidthClosed};\r\n    transition: ${p =>\r\n        p.theme.transitions.create(\"width\", {\r\n            easing: p.theme.transitions.easing.sharp,\r\n            duration: p.theme.transitions.duration.leavingScreen,\r\n        })};\r\n    overflow-x: hidden;\r\n\r\n    ${p => p.theme.breakpoints.down(\"xs\")} {\r\n        & {\r\n            width: 0;\r\n        }\r\n    }\r\n`;\r\n\r\nconst CustomDrawer = styled(Drawer).attrs(() => ({\r\n    variant: \"permanent\",\r\n}))<{ open?: boolean }>`\r\n    width: ${p => p.theme.constants.drawerWidth};\r\n    flex-shrink: 0;\r\n    white-space: nowrap;\r\n    ${p => (p.open ? drawerOpen : drawerClose)}\r\n\r\n    .MuiDrawer-paper {\r\n        ${p => (p.open ? drawerOpen : drawerClose)}\r\n    }\r\n`;\r\n\r\nconst DrawerToolbar = styled(Toolbar)`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    padding: ${p => p.theme.spacing(0, 1)}px;\r\n`;\r\n\r\nconst MainContent = styled.div<{ open: boolean }>`\r\n    flex-grow: 1;\r\n    padding: ${p => p.theme.spacing(3)}px;\r\n    margin-left: ${p => p.theme.constants.drawerWidthClosed};\r\n    ${bodyClose}\r\n    ${p => p.open && bodyOpen}\r\n\r\n    ${p =>\r\n        p.open &&\r\n        css`\r\n            ${p.theme.breakpoints.down(\"sm\")} {\r\n                & {\r\n                    margin-left: ${p => p.theme.constants.drawerWidthClosed};\r\n                    width: calc(100% - ${p => p.theme.constants.drawerWidthClosed});\r\n                }\r\n            }\r\n        `}\r\n    ${p => p.theme.breakpoints.down(\"xs\")} {\r\n        & {\r\n            width: 100%;\r\n            margin-left: 0;\r\n        }\r\n    }\r\n`;\r\n\r\nconst ProfileAvatar = styled.div`\r\n    margin-right: ${p => p.theme.spacing(1)}px;\r\n`;\r\n\r\nconst App: React.FC = () => {\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n    const [profile, setProfile] = React.useState<GoogleProfile>();\r\n    const [isSignedIn, setIsSignedIn] = React.useState(false);\r\n\r\n    const handleSignoutClick = () => {\r\n        GoogleApi.signOut();\r\n        setProfile(undefined);\r\n    };\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleDrawerToggle = () => setOpen(p => !p);\r\n    const handleDrawerClose = () => setOpen(false);\r\n\r\n    useEventListener(\"keydown\", e => {\r\n        if (e.key === \"Shift\" && !state.modifierKeys.shift) dispatch({ type: \"SetModifierKey\", key: \"shift\", value: true });\r\n    });\r\n    useEventListener(\"keyup\", e => {\r\n        if (e.key === \"Shift\" && state.modifierKeys.shift) dispatch({ type: \"SetModifierKey\", key: \"shift\", value: false });\r\n    });\r\n\r\n    /**\r\n     * Called at app init, sets Google API signin callback\r\n     * info stored in React profile state\r\n     */\r\n    React.useEffect(() => {\r\n        GoogleApi.initClient(async (isSignedIn: boolean) => {\r\n            setIsSignedIn(isSignedIn);\r\n            if (!isSignedIn) {\r\n                return;\r\n            }\r\n            setProfile(GoogleApi.getProfile());\r\n            GoogleApi.prepareAppData()(dispatch);\r\n        });\r\n        Scry.Symbology.All()\r\n            .then(symbols => {\r\n                const endpoint = Axios.create({\r\n                    baseURL: \"\",\r\n                    responseType: \"text\",\r\n                    headers: {\r\n                        \"Content-Type\": \"image/svg+xml\",\r\n                    },\r\n                });\r\n                return Promise.all(\r\n                    symbols.map(symbol =>\r\n                        endpoint.get<string, AxiosResponse<ScryCardSymbol>>(symbol.svg_uri, { transformResponse: r => ({ ...symbol, svg: r }) })\r\n                    )\r\n                );\r\n            })\r\n            .then(responses => {\r\n                dispatch({\r\n                    type: \"AddSymbols\",\r\n                    symbols: responses.map(r => r.data),\r\n                });\r\n            })\r\n            .then(Scry.Sets.All)\r\n            .then(sets => {\r\n                const endpoint = Axios.create({\r\n                    baseURL: \"\",\r\n                    responseType: \"text\",\r\n                    headers: {\r\n                        \"Content-Type\": \"image/svg+xml\",\r\n                    },\r\n                });\r\n                return Promise.all(\r\n                    sets.map(set => endpoint.get<string, AxiosResponse<ScrySet>>(set.icon_svg_uri, { transformResponse: r => ({ ...set, icon_svg: r }) }))\r\n                );\r\n            })\r\n            .then(responses => {\r\n                dispatch({\r\n                    type: \"AddSets\",\r\n                    sets: responses.map(r => r.data),\r\n                });\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <State.Provider value={[state, dispatch]}>\r\n            <CustomAppBar position=\"sticky\" open={open}>\r\n                <Toolbar>\r\n                    <MenuButton color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerToggle} edge=\"start\" open={open}>\r\n                        <MenuIcon />\r\n                    </MenuButton>\r\n                    <Typography variant=\"h6\" style={{ overflow: \"hidden\" }}>\r\n                        MTGCollection\r\n                    </Typography>\r\n                    <FlexCol />\r\n                    {isSignedIn ? (\r\n                        <>\r\n                            {!isNullOrUndefined(profile) && (\r\n                                <ProfileAvatar>\r\n                                    <Tooltip title={`Signed in as ${profile.getGivenName()} (${profile.getEmail()})`}>\r\n                                        <Avatar alt={profile.getGivenName()} src={profile.getImageUrl()} />\r\n                                    </Tooltip>\r\n                                </ProfileAvatar>\r\n                            )}\r\n                            <TooltipButton title=\"SignOut\" onClick={handleSignoutClick}>\r\n                                <ExitToAppIcon />\r\n                            </TooltipButton>\r\n                        </>\r\n                    ) : (\r\n                        <SignInButton onClick={GoogleApi.signIn} />\r\n                    )}\r\n                </Toolbar>\r\n            </CustomAppBar>\r\n            <CustomDrawer open={open}>\r\n                <DrawerToolbar>\r\n                    <IconButton onClick={handleDrawerClose}>{MainTheme.direction === \"rtl\" ? <ChevronRightIcon /> : <ChevronLeftIcon />}</IconButton>\r\n                </DrawerToolbar>\r\n                <Divider />\r\n                {isSignedIn && <DrawerDeckList open={open} />}\r\n            </CustomDrawer>\r\n            <MainContent open={open}>\r\n                <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                    <Redirect to={isSignedIn ? \"/\" : \"/signin/\"} />\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Home} />\r\n                        <Route exact path=\"/signin/\" component={SignIn} />\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </MainContent>\r\n        </State.Provider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import { CssBaseline } from \"@material-ui/core\";\r\nimport { ThemeProvider as MUIThemeProvider, StylesProvider } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./Components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { MainTheme } from \"./Components/Styled/Theme\";\r\n\r\nReactDOM.render(\r\n    <StylesProvider injectFirst>\r\n        <ThemeProvider theme={MainTheme}>\r\n            <MUIThemeProvider theme={MainTheme}>\r\n                <CssBaseline />\r\n                <App />\r\n            </MUIThemeProvider>\r\n        </ThemeProvider>\r\n    </StylesProvider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}