{"version":3,"sources":["Assets/logo.png","State/index.ts","State/Reducers.ts","Utility/CollectionParser.ts","Utility/GoogleApi.ts","Utility/Scry/index.ts","Components/DrawerDeckList.tsx","Components/Styled/Theme.ts","Components/Styled/Grid.tsx","Components/Applets/AddDeck.tsx","Components/Display/ImagesCard.tsx","Components/Display/ImagesCollection.tsx","Utility/Assert.ts","Components/Styled/TooltipButton.tsx","Components/SymbolIcon.tsx","Components/SymbolTypography.tsx","Components/Display/ListCard.tsx","Components/Display/ListCollection.tsx","Components/Display/CompressedCard.tsx","Components/Display/CompressedCollection.tsx","Components/Display/CollectionPreview.tsx","Components/Display/PreviewStyleToggle.tsx","Components/Styled/Icons.tsx","Components/Display/SortToggle.tsx","Components/Display/ShowGroupsToggle.tsx","Components/Applets/DeckPreview.tsx","Components/Applets/CardSearch.tsx","Components/Applets/UserInfo.tsx","Components/Home.tsx","Components/NotFound.tsx","Components/SignInButton.tsx","Components/SignIn.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DeckName","SectionName","reducers","EmptyCards","sections","reduce","obj","s","Default","initialState","files","Collection","Wishlist","decks","name","cards","cardList","symbolList","selectedDeck","State","React","createContext","undefined","reducer","state","action","type","link","omit","card","symbols","symbol","deckName","sectionName","temp","i","CollectionParser","serialize","collection","split","map","section","index","lines","line","match","filter","isNull","amount","parseInt","comment","prev","val","p","v","deserialize","deck","Object","entries","str","values","GoogleApiInit","apiKey","process","clientId","discoveryDocs","scope","createNewFile","a","async","props","fileContent","folder","file","Blob","metadata","mimeType","appProperties","parents","accessToken","gapi","auth","getToken","access_token","form","FormData","append","JSON","stringify","fetch","method","headers","Headers","Authorization","body","res","json","id","getFileContents","client","drive","get","fileId","alt","deleteFile","delete","createNewDeck","dispatch","restProps","Sideboard","Maybeboard","GoogleApi","initClient","onUpdateStatus","load","init","then","auth2","getAuthInstance","isSignedIn","listen","console","error","getProfile","currentUser","getBasicProfile","signIn","signOut","prepareAppData","list","spaces","fields","response","collectionFile","result","find","f","info","wishlistFile","otherFiles","length","previewUrl","updateFile","deleteDeck","Api","endpoint","Axios","create","baseURL","responseType","Symbology","All","r","data","ParseMana","cost","params","Cards","Autocomplete","q","include_extras","Named","fuzzy","Scry","getImage","images","layout","card_faces","image_uris","getPlaceholder","cardName","replace","DrawerDeckList","open","useContext","selectDeck","List","Tooltip","title","placement","ListItem","button","onClick","ListItemAvatar","Avatar","ListItemText","primary","Divider","key","src","MainTheme","createMuiTheme","palette","main","colors","deepOrange","secondary","blueGrey","constants","drawerWidth","drawerWidthClosed","appletHeight","css","ThemeProv","styledCss","styled","baseStyled","FlexCol","div","AppletPaper","Paper","theme","spacing","AppletActions","Title","Typography","attrs","component","variant","color","gutterBottom","PreviewRow","AddDeck","useState","importText","setImportText","setDeckName","setOpen","invalidName","setInvalidName","previewCard","setPreviewCard","previewAutocomplete","setPreviewAutocomplete","setPreviewUrl","handleClose","handleImport","validateName","useEffect","Grid","item","xs","sm","md","TextField","label","helperText","value","onChange","e","target","fullWidth","autoHighlight","disableClearable","options","inputValue","onInputChange","names","onBlur","catch","reason","renderInput","ButtonGroup","size","Button","disabled","Dialog","onClose","aria-labelledby","maxWidth","DialogTitle","DialogContent","DialogContentText","autoFocus","multiline","rows","DialogActions","Body","Image","img","ImagesCard","ImagesCollecion","sortBy","sortOrder","showGroups","container","c","lg","xl","assert","condition","message","AssertionError","TooltipButton","children","IconButton","aria-label","Symbol","SymbolIcon","symbolObj","setSymbolObj","loose_variant","Icon","svg_uri","english","SymbolTypography","text","typographyProps","parsed","setParsed","m","ListCard","actions","updateCardQuantity","isNullOrUndefined","log","TableRow","TableCell","align","set","mana_cost","noWrap","type_line","ListCollecion","Table","TableHead","TableBody","CustomChip","Chip","CompressedCard","deleteIcon","onDelete","avatar","CompressedCollecion","direction","zeroMinWidth","desc","b","orderBy","getSorting","order","StableSort","array","cmp","stabilizedThis","el","sort","GetSortFunction","CollectionPreview","passedProps","style","renderCollection","PreviewStyleToggle","onToggle","Error","IconForStyle","IconWrap","CompressIcon","icon","faCompressAlt","ExpandIcon","faExpandAlt","GoogleIcon","faGoogle","ClipboardIcon","faClipboard","SortToggle","setSortBy","setSortOrder","anchorRef","useRef","event","current","contains","ref","aria-controls","aria-expanded","aria-haspopup","prevOpen","startIcon","Popper","anchorEl","role","transition","TransitionProps","Grow","transformOrigin","elevation","ClickAwayListener","onClickAway","MenuList","by","MenuItem","selected","ShowGroupsToggle","show","setShow","SectionRow","ExportRow","DeckPreview","expanded","setExpanded","exportOpened","setExportOpened","setStyle","setShowGroups","missingCards","byName","on","justify","copy","InputProps","readOnly","CardSearch","setCardName","autoompleteOptions","setAutocompleteOptions","dialogOpen","setDialogOpen","closeDialog","g","u","w","colorExactMatch","cmc","cmcType","setFilter","handleColors","newFilter","checked","freeSolo","FormGroup","row","FormControlLabel","control","Checkbox","alert","UserInfo","Home","Container","NotFound","SignInButton","SignIn","alignItems","padding","Logo","width","height","draggable","bodyOpen","transitions","easing","sharp","duration","enteringScreen","bodyClose","leavingScreen","CustomAppBar","AppBar","zIndex","drawer","MenuButton","drawerOpen","drawerClose","CustomDrawer","Drawer","DrawerToolbar","Toolbar","MainContent","ProfileAvatar","App","useReducer","profile","setProfile","setIsSignedIn","Provider","position","edge","getGivenName","getEmail","getImageUrl","basename","to","exact","path","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StylesProvider","injectFirst","CssBaseline","document","getElementById","URL","href","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3b9d1fa6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.81aa9e7e.png\";","import React from \"react\";\r\nimport Scry from \"scryfall-sdk\";\r\nimport DeepReadonly from \"../Utility/DeepReadonly\";\r\nimport { ScryCardSymbol } from \"../Utility/Scry/Types\";\r\nimport { Action } from \"./Actions\";\r\n\r\nexport enum DeckName {\r\n    Collection = \"_collection\",\r\n    Wishlist = \"_wishlist\",\r\n}\r\n\r\nexport enum SectionName {\r\n    Default = \"_default\",\r\n    Sideboard = \"Sideboard\",\r\n    Maybeboard = \"Maybeboard\",\r\n}\r\n\r\nexport const EmptyCards = (...sections: string[]): DeckCards => sections.reduce((obj, s) => ({ ...obj, [s]: {} }), { [SectionName.Default]: {} });\r\n\r\nexport type DeckCardList = DeepReadonly<{\r\n    [cardName: string]: DeckCard;\r\n}>;\r\n\r\nexport type DeckCards = DeepReadonly<{\r\n    [SectionName.Default]: DeckCardList;\r\n    [section: string]: DeckCardList;\r\n}>;\r\n\r\nexport type DeckCard = DeepReadonly<{\r\n    amount: number;\r\n    name: string;\r\n    comment?: string;\r\n}>;\r\n\r\nexport type DeckProps = Omit<Deck, \"cards\">;\r\n\r\nexport type Deck = DeepReadonly<{\r\n    name: string;\r\n    previewUrl?: string;\r\n    cards: DeckCards;\r\n}>;\r\n\r\nexport type FileIds = DeepReadonly<{\r\n    [DeckName.Collection]: string;\r\n    [DeckName.Wishlist]: string;\r\n    [deckName: string]: string;\r\n}>;\r\n\r\nexport type Decks = DeepReadonly<{\r\n    [DeckName.Collection]: Deck;\r\n    [DeckName.Wishlist]: Deck;\r\n    [deckName: string]: Deck;\r\n}>;\r\n\r\nexport type CardList = DeepReadonly<{\r\n    [cardName: string]: Scry.Card;\r\n}>;\r\n\r\nexport type SymbolList = DeepReadonly<{\r\n    [symbol: string]: ScryCardSymbol;\r\n}>;\r\n\r\nexport type AppState = DeepReadonly<{\r\n    files: FileIds;\r\n    decks: Decks;\r\n    cardList: CardList;\r\n    symbolList: SymbolList;\r\n    selectedDeck: string | null;\r\n}>;\r\n\r\nexport const initialState: AppState = {\r\n    files: {\r\n        [DeckName.Collection]: \"\",\r\n        [DeckName.Wishlist]: \"\",\r\n    },\r\n    decks: {\r\n        [DeckName.Collection]: { name: DeckName.Collection, cards: EmptyCards() },\r\n        [DeckName.Wishlist]: { name: DeckName.Wishlist, cards: EmptyCards() },\r\n    },\r\n    cardList: {},\r\n    symbolList: {},\r\n    selectedDeck: null,\r\n};\r\n\r\nexport const State = React.createContext<[AppState, React.Dispatch<Action>]>([initialState, undefined as any]);\r\n","import { omit } from \"lodash\";\r\nimport { AppState, CardList, Decks, EmptyCards, FileIds, SymbolList } from \".\";\r\nimport { Action } from \"./Actions\";\r\n\r\nconst filesReducer = (state: FileIds, action: Action): FileIds => {\r\n    switch (action.type) {\r\n        case \"CreateDeck\":\r\n            return {\r\n                ...state,\r\n                [action.name]: action.link,\r\n            };\r\n        case \"DeleteDeck\":\r\n            return { ...omit(state, [action.name]) } as FileIds;\r\n    }\r\n    return state;\r\n};\r\n\r\nconst cardListReducer = (state: CardList, action: Action): CardList => {\r\n    switch (action.type) {\r\n        case \"AddCard\":\r\n            return {\r\n                ...state,\r\n                [action.card.name]: action.card,\r\n            };\r\n    }\r\n    return state;\r\n};\r\n\r\nconst symbolListReducer = (state: SymbolList, action: Action): SymbolList => {\r\n    switch (action.type) {\r\n        case \"AddSymbols\":\r\n            return action.symbols.reduce((obj, s) => ({ ...obj, [s.symbol]: s }), {});\r\n    }\r\n    return state;\r\n};\r\n\r\nconst decksReducer = (state: Decks, action: Action): Decks => {\r\n    switch (action.type) {\r\n        case \"CreateDeck\":\r\n            return {\r\n                ...state,\r\n                [action.name]: {\r\n                    cards: EmptyCards(),\r\n                    ...omit(action, [\"type\", \"link\"]),\r\n                },\r\n            };\r\n        case \"UpdateDeck\":\r\n            return {\r\n                ...state,\r\n                [action.name]: {\r\n                    ...state[action.name],\r\n                    ...omit(action, [\"type\"]),\r\n                },\r\n            };\r\n        case \"UpdateDeckCard\":\r\n            return {\r\n                ...state,\r\n                [action.deckName]: {\r\n                    ...state[action.deckName],\r\n                    cards: {\r\n                        ...state[action.deckName].cards,\r\n                        [action.sectionName]: {\r\n                            ...state[action.deckName].cards[action.sectionName],\r\n                            [action.card.name]: {\r\n                                ...state[action.deckName].cards[action.sectionName][action.card.name],\r\n                                ...action.card,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            };\r\n        case \"DeleteDeck\":\r\n            return { ...omit(state, [action.name]) } as Decks;\r\n    }\r\n    return state;\r\n};\r\n\r\nconst selectedDeckReducer = (state: string | null, action: Action): string | null => {\r\n    switch (action.type) {\r\n        case \"SelectDeck\":\r\n            return action.name;\r\n        case \"DeleteDeck\":\r\n            return action.name === state ? null : state;\r\n    }\r\n    return state;\r\n};\r\n\r\nconst combineReducers = <State, Action>(reducers: { [P in keyof State]: (state: State[P], action: Action) => State[P] }) => {\r\n    return (state: State, action: Action) => {\r\n        const temp: State = {} as any;\r\n        for (const i in reducers) {\r\n            temp[i] = reducers[i](state[i], action);\r\n        }\r\n        return temp;\r\n    };\r\n};\r\n\r\nexport const reducer = combineReducers<AppState, Action>({\r\n    files: filesReducer,\r\n    cardList: cardListReducer,\r\n    symbolList: symbolListReducer,\r\n    decks: decksReducer,\r\n    selectedDeck: selectedDeckReducer,\r\n});\r\n","import { isNull } from \"lodash\";\r\nimport { DeckCard, DeckCards, EmptyCards, SectionName } from \"../State\";\r\n\r\nconst serialize = (collection?: string, ...sections: string[]): DeckCards => {\r\n    if (!collection || collection === \"\") {\r\n        return EmptyCards(...sections);\r\n    }\r\n    return collection\r\n        .split(\"##\")\r\n        .map((section, index) => {\r\n            let name: string, lines: string[];\r\n            if (index === 0) {\r\n                name = SectionName.Default;\r\n                lines = section.split(/\\r?\\n/);\r\n            } else {\r\n                [name, ...lines] = section.split(/\\r?\\n/);\r\n            }\r\n            return [\r\n                name,\r\n                lines\r\n                    .map(line => line.match(/^(\\d*) +(.*?)(?: # (.*))?$/))\r\n                    .filter(match => !isNull(match))\r\n                    .map(match => ({\r\n                        amount: parseInt(match![1]),\r\n                        name: match![2],\r\n                        comment: match![3],\r\n                    })),\r\n            ] as [string, DeckCard[]];\r\n        })\r\n        .reduce(\r\n            (prev, val) => ({ ...prev, [val[0]]: val[1].reduce((p, v) => ({ ...p, [v.name]: v }), {}) }),\r\n            EmptyCards(...sections)\r\n        );\r\n};\r\n\r\nconst deserialize = (deck: DeckCards) =>\r\n    Object.entries(deck).reduce(\r\n        (str, section) =>\r\n            `${str}${section[0] !== SectionName.Default ? `#${section[0]}\\n` : \"\"}${Object.values(section[1]).reduce(\r\n                (s, card) => `${s}${card.amount} ${card.name}${card.comment ? ` # ${card.comment}` : \"\"}\\n`,\r\n                \"\"\r\n            )}\\n`,\r\n        \"\"\r\n    );\r\n\r\nconst CollectionParser = {\r\n    serialize,\r\n    deserialize,\r\n};\r\n\r\nexport default CollectionParser;\r\n","/* global gapi */\r\nimport React from \"react\";\r\nimport { DeckName, DeckProps, SectionName } from \"../State\";\r\nimport { Action } from \"../State/Actions\";\r\nimport CollectionParser from \"./CollectionParser\";\r\n\r\nconst GoogleApiInit = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    clientId: process.env.REACT_APP_CLIENT_ID,\r\n    discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"],\r\n    scope: \"profile https://www.googleapis.com/auth/drive.appdata https://www.googleapis.com/auth/drive.file\",\r\n};\r\n\r\nconst initClient = (onUpdateStatus: (isSignedIn: boolean) => void) => {\r\n    gapi.load(\"client:auth2\", () => {\r\n        gapi.client.init(GoogleApiInit).then(() => {\r\n            gapi.auth2.getAuthInstance().isSignedIn.listen(onUpdateStatus);\r\n            onUpdateStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\r\n        }, console.error);\r\n    });\r\n};\r\n\r\nconst prepareAppData = () => async (dispatch: React.Dispatch<Action>) => {\r\n    var response = await gapi.client.drive.files.list({\r\n        spaces: \"appDataFolder\",\r\n        fields: \"nextPageToken, files(id, name, appProperties)\",\r\n    });\r\n\r\n    const collectionFile = response.result?.files?.find(f => f.appProperties?.name === DeckName.Collection);\r\n    if (!collectionFile) {\r\n        console.info(\"Creating collection...\");\r\n        createNewDeck(dispatch, { name: DeckName.Collection });\r\n    } else {\r\n        console.info(\"Loading collection...\");\r\n        dispatch({ type: \"CreateDeck\", name: DeckName.Collection, link: collectionFile.id! });\r\n        dispatch({ type: \"UpdateDeck\", name: DeckName.Collection, cards: CollectionParser.serialize(await getFileContents({ id: collectionFile.id! })) });\r\n    }\r\n\r\n    const wishlistFile = response.result?.files?.find(f => f.appProperties?.name === DeckName.Wishlist);\r\n    if (!wishlistFile) {\r\n        console.info(\"Creating wishlist...\");\r\n        createNewDeck(dispatch, { name: DeckName.Wishlist });\r\n    } else {\r\n        console.info(\"Loading wishlist...\");\r\n        dispatch({ type: \"CreateDeck\", name: DeckName.Wishlist, link: wishlistFile.id! });\r\n        dispatch({ type: \"UpdateDeck\", name: DeckName.Wishlist, cards: CollectionParser.serialize(await getFileContents({ id: wishlistFile.id! })) });\r\n    }\r\n\r\n    const otherFiles = response.result?.files?.filter(f => f.appProperties?.name !== DeckName.Collection && f.appProperties?.name !== DeckName.Wishlist)!;\r\n    for (let i = 0; i < otherFiles.length; i++) {\r\n        const file = otherFiles[i];\r\n        const name = file.appProperties?.name ?? file.name?.match(/(.*?)\\.txt/)?.[0] ?? \"unnamed\";\r\n        dispatch({ type: \"CreateDeck\", name, link: file.id! });\r\n        dispatch({\r\n            type: \"UpdateDeck\",\r\n            name,\r\n            previewUrl: file.appProperties?.previewUrl,\r\n            cards: CollectionParser.serialize(await getFileContents({ id: file.id! }), SectionName.Sideboard, SectionName.Maybeboard),\r\n        });\r\n    }\r\n};\r\n\r\nconst createNewFile = async ({\r\n    name,\r\n    props,\r\n    fileContent,\r\n    folder,\r\n}: {\r\n    name: string;\r\n    props?: object;\r\n    fileContent?: string;\r\n    folder?: string[];\r\n}): Promise<string> => {\r\n    const file = new Blob([fileContent ?? \"\"], { type: \"text/plain\" });\r\n    const metadata = {\r\n        name,\r\n        mimeType: \"text/plain\",\r\n        appProperties: props ?? {},\r\n        parents: [\"appDataFolder\", ...(folder ?? [])],\r\n    };\r\n\r\n    const accessToken = gapi.auth.getToken().access_token;\r\n    const form = new FormData();\r\n    form.append(\"metadata\", new Blob([JSON.stringify(metadata)], { type: \"application/json\" }));\r\n    form.append(\"file\", file);\r\n\r\n    const res = await fetch(\"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id\", {\r\n        method: \"POST\",\r\n        headers: new Headers({ Authorization: \"Bearer \" + accessToken }),\r\n        body: form,\r\n    });\r\n    const val = await res.json();\r\n    return val.id;\r\n};\r\n\r\nconst updateFile = async ({ id, fileContent }: { id: string; fileContent: string }) => {\r\n    const file = new Blob([fileContent], { type: \"text/plain\" });\r\n\r\n    const accessToken = gapi.auth.getToken().access_token;\r\n    const form = new FormData();\r\n    form.append(\"file\", file);\r\n\r\n    const res = await fetch(`https://www.googleapis.com/upload/drive/v3/files/${id}?uploadType=media&fields=id`, {\r\n        method: \"PATCH\",\r\n        headers: new Headers({ Authorization: \"Bearer \" + accessToken }),\r\n        body: form,\r\n    });\r\n    const val = await res.json();\r\n    return val.id;\r\n};\r\n\r\nconst getFileContents = async ({ id }: { id: string }) => {\r\n    const res = await gapi.client.drive.files.get({\r\n        fileId: id,\r\n        alt: \"media\",\r\n    });\r\n    return res.body;\r\n};\r\n\r\nconst deleteFile = async ({ id }: { id: string }) => gapi.client.drive.files.delete({ fileId: id });\r\n\r\nconst createNewDeck = async (dispatch: React.Dispatch<Action>, { name, fileContent, ...restProps }: DeckProps & { fileContent?: string }) => {\r\n    dispatch({\r\n        type: \"CreateDeck\",\r\n        name,\r\n        link: await createNewFile({\r\n            name: `${name}.txt`,\r\n            props: {\r\n                name,\r\n                ...restProps,\r\n            },\r\n            fileContent,\r\n        }),\r\n        cards: CollectionParser.serialize(fileContent, SectionName.Sideboard, SectionName.Maybeboard),\r\n        ...restProps,\r\n    });\r\n};\r\n\r\nconst deleteDeck = async (dispatch: React.Dispatch<Action>, { name, id }: { name: string; id: string }) => {\r\n    await deleteFile({ id });\r\n    dispatch({ type: \"DeleteDeck\", name });\r\n};\r\n\r\nconst getProfile = () => {\r\n    return gapi.auth2\r\n        .getAuthInstance()\r\n        .currentUser.get()\r\n        .getBasicProfile();\r\n};\r\n\r\nconst signIn = () => gapi.auth2.getAuthInstance().signIn();\r\nconst signOut = () => gapi.auth2.getAuthInstance().signOut();\r\n\r\nexport type GoogleProfile = gapi.auth2.BasicProfile;\r\n\r\nconst GoogleApi = {\r\n    initClient,\r\n    getProfile,\r\n    signIn,\r\n    signOut,\r\n    prepareAppData,\r\n    createNewFile,\r\n    updateFile,\r\n    deleteFile,\r\n    createNewDeck,\r\n    deleteDeck,\r\n    getFileContents,\r\n};\r\nexport default GoogleApi;\r\n","import ScrySdk from \"scryfall-sdk\";\r\nimport DeepReadonly from \"../DeepReadonly\";\r\nimport Axios from \"axios\";\r\nimport { ScryCardSymbol, ScryManaCost } from \"./Types\";\r\n\r\ntype List<T = any> = {\r\n    data: T[];\r\n};\r\n\r\nconst Api = (() => {\r\n    let endpoint = Axios.create({\r\n        baseURL: \"https://api.scryfall.com\",\r\n        responseType: \"json\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    });\r\n\r\n    return {\r\n        endpoint,\r\n        Symbology: {\r\n            All: () => endpoint.get<List<ScryCardSymbol>>(\"/symbology\").then(r => r.data.data),\r\n            ParseMana: (cost: string) => endpoint.get<ScryManaCost>(\"/symbology/parse-mana\", { params: { cost } }).then(r => r.data),\r\n        },\r\n        Cards: {\r\n            Autocomplete: (q: string) =>\r\n                endpoint\r\n                    .get<List<string>>(\"/cards/autocomplete\", { params: { q, include_extras: true } })\r\n                    .then(r => r.data.data),\r\n            Named: (fuzzy: string) => endpoint.get<ScrySdk.Card>(\"/cards/named\", { params: { fuzzy } }).then(r => r.data),\r\n            //Filtered: (q: string) =>\r\n        },\r\n    };\r\n})();\r\n\r\nconst getImage = (card: DeepReadonly<ScrySdk.Card>, type: keyof ScrySdk.ImageUris): string | null => {\r\n    var images: ScrySdk.ImageUris | null | undefined;\r\n    switch (card.layout) {\r\n        case \"transform\":\r\n        case \"double_faced_token\":\r\n            images = card.card_faces![0].image_uris;\r\n            break;\r\n        default:\r\n            images = card.image_uris;\r\n    }\r\n    return images?.[type] ?? null;\r\n};\r\n\r\nconst getPlaceholder = (cardName: string): string => `https://via.placeholder.com/146x204?text=${cardName.replace(/\\s/, \"+\")}`;\r\n\r\nconst Scry = {\r\n    ...Api,\r\n    getImage,\r\n    getPlaceholder,\r\n};\r\nexport default Scry;\r\n","import { Avatar, Divider, List, ListItem, ListItemAvatar, ListItemText, Tooltip } from \"@material-ui/core\";\r\nimport CollectionsIcon from \"@material-ui/icons/Collections\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport React from \"react\";\r\nimport { DeckName, State } from \"../State\";\r\n\r\ntype Props = {\r\n    open: boolean;\r\n};\r\n\r\nconst DrawerDeckList: React.FC<Props> = ({ open }) => {\r\n    const [state, dispatch] = React.useContext(State);\r\n    const selectDeck = (name: string) => () => {\r\n        dispatch({ type: \"SelectDeck\", name });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                <Tooltip title={open ? \"\" : \"Collection\"} placement=\"right\">\r\n                    <ListItem button onClick={selectDeck(DeckName.Collection)}>\r\n                        <ListItemAvatar>\r\n                            <Avatar alt=\"Collection\">\r\n                                <CollectionsIcon />\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary=\"Collection\" />\r\n                    </ListItem>\r\n                </Tooltip>\r\n                <Tooltip title={open ? \"\" : \"Wishlist\"} placement=\"right\">\r\n                    <ListItem button onClick={selectDeck(DeckName.Wishlist)}>\r\n                        <ListItemAvatar>\r\n                            <Avatar alt=\"Wishlist\">\r\n                                <FavoriteIcon />\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary=\"Wishlist\" />\r\n                    </ListItem>\r\n                </Tooltip>\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                {Object.values(state.decks)\r\n                    .filter(deck => deck.name !== DeckName.Collection && deck.name !== DeckName.Wishlist)\r\n                    .map(deck => (\r\n                        <Tooltip key={deck.name} title={open ? \"\" : deck.name} placement=\"right\">\r\n                            <ListItem button onClick={selectDeck(deck.name)}>\r\n                                <ListItemAvatar>\r\n                                    <Avatar alt={deck.name} src={deck.previewUrl}>\r\n                                        <CollectionsIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary={deck.name} />\r\n                            </ListItem>\r\n                        </Tooltip>\r\n                    ))}\r\n            </List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DrawerDeckList;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport baseStyled, { css as styledCss, ThemedStyledInterface, ThemedStyledProps, ThemeProvider as ThemeProv } from \"styled-components\";\r\nimport { colors } from \"@material-ui/core\";\r\n\r\nconst additionalArgs = {\r\n    constants: {\r\n        drawerWidth: \"240px\",\r\n        drawerWidthClosed: \"72px\",\r\n        appletHeight: \"280px\",\r\n    },\r\n};\r\n\r\nexport const MainTheme = createMuiTheme(\r\n    {\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: colors.deepOrange[700] },\r\n            secondary: { main: colors.blueGrey[500] },\r\n        },\r\n    },\r\n    additionalArgs\r\n);\r\n\r\nexport const ThemeProvider = ThemeProv;\r\nexport const css = styledCss;\r\n\r\nexport type Theme = typeof MainTheme & typeof additionalArgs;\r\nexport type ComponentProps<T = {}> = ThemedStyledProps<T, Theme>;\r\nconst styled = baseStyled as ThemedStyledInterface<Theme>;\r\nexport default styled;\r\n","import { Paper, Typography } from \"@material-ui/core\";\r\nimport styled from \"./Theme\";\r\n\r\nexport const FlexCol = styled.div`\r\n    flex: 1 1 auto;\r\n`;\r\n\r\nexport const AppletPaper = styled(Paper)`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n    min-height: ${p => p.theme.constants.appletHeight};\r\n    padding: ${p => p.theme.spacing(2)}px;\r\n`;\r\n\r\nexport const AppletActions = styled.div`\r\n    align-self: flex-end;\r\n`;\r\n\r\nexport const Title = styled(Typography).attrs(p => ({\r\n    component: \"h2\",\r\n    variant: \"h6\",\r\n    color: \"primary\",\r\n    gutterBottom: true,\r\n}))``;\r\n","import { Avatar, Button, ButtonGroup, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, TextField } from \"@material-ui/core\";\r\nimport CollectionsIcon from \"@material-ui/icons/Collections\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React from \"react\";\r\nimport { State } from \"../../State\";\r\nimport GoogleApi from \"../../Utility/GoogleApi\";\r\nimport Scry from \"../../Utility/Scry\";\r\nimport { AppletActions, AppletPaper, FlexCol, Title } from \"../Styled/Grid\";\r\nimport styled from \"../Styled/Theme\";\r\n\r\nconst PreviewRow = styled.div`\r\n    display: flex;\r\n    margin-top: ${p => p.theme.spacing(1)}px;\r\n    align-items: center;\r\n\r\n    & .MuiAutocomplete-root {\r\n        flex-grow: 1;\r\n        margin-right: ${p => p.theme.spacing(1)}px;\r\n    }\r\n`;\r\n\r\nconst AddDeck: React.FC = () => {\r\n    const [state, dispatch] = React.useContext(State);\r\n\r\n    const [importText, setImportText] = React.useState<string>(\"\");\r\n    const [deckName, setDeckName] = React.useState<string>(\"\");\r\n    const [open, setOpen] = React.useState(false);\r\n    const [invalidName, setInvalidName] = React.useState<string | null>(null);\r\n\r\n    const [previewCard, setPreviewCard] = React.useState<string>(\"\");\r\n    const [previewAutocomplete, setPreviewAutocomplete] = React.useState<string[]>([]);\r\n    const [previewUrl, setPreviewUrl] = React.useState<string>(\"\");\r\n\r\n    const handleClickOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleImport = () => {\r\n        setOpen(false);\r\n        GoogleApi.createNewDeck(dispatch, { name: deckName, fileContent: importText, previewUrl });\r\n        setImportText(\"\");\r\n        validateName(\"\");\r\n        setPreviewCard(\"\");\r\n        setPreviewAutocomplete([]);\r\n        setPreviewUrl(\"\");\r\n    };\r\n\r\n    const validateName = (name: string) => {\r\n        setDeckName(name);\r\n        if (name === \"\") {\r\n            setInvalidName(\"Deck name can't be empty\");\r\n            return;\r\n        }\r\n        if (state.decks[name]) {\r\n            setInvalidName(\"Deck with this name already exists\");\r\n            return;\r\n        }\r\n        setInvalidName(null);\r\n        setPreviewCard(\"\");\r\n        setPreviewAutocomplete([]);\r\n    };\r\n\r\n    const updatePreviewCard = (name: string) => {\r\n        setPreviewCard(name);\r\n        Scry.Cards.Autocomplete(previewCard).then(names => setPreviewAutocomplete(names));\r\n    };\r\n\r\n    const updatePreview = () => {\r\n        if (previewCard === \"\") {\r\n            setPreviewUrl(\"\");\r\n            return;\r\n        }\r\n        Scry.Cards.Named(previewCard)\r\n            .then(card => {\r\n                setPreviewUrl(Scry.getImage(card, \"art_crop\") ?? \"\");\r\n            })\r\n            .catch(reason => {\r\n                setPreviewCard(\"\");\r\n            });\r\n    };\r\n\r\n    React.useEffect(() => validateName(\"\"), []);\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={4}>\r\n            <AppletPaper>\r\n                <Title>Add deck</Title>\r\n                <FlexCol>\r\n                    <TextField\r\n                        label=\"Deck name\"\r\n                        variant=\"outlined\"\r\n                        error={!!invalidName}\r\n                        helperText={invalidName}\r\n                        value={deckName}\r\n                        onChange={e => validateName(e.target.value)}\r\n                        fullWidth\r\n                    />\r\n                    <PreviewRow>\r\n                        <Autocomplete\r\n                            autoHighlight\r\n                            disableClearable\r\n                            options={previewAutocomplete}\r\n                            inputValue={previewCard}\r\n                            onInputChange={(e, value) => updatePreviewCard(value)}\r\n                            onBlur={updatePreview}\r\n                            renderInput={params => <TextField {...params} label=\"Preview card\" variant=\"outlined\" fullWidth />}\r\n                        />\r\n                        <Avatar alt=\"Preview icon\" src={previewUrl}>\r\n                            <CollectionsIcon />\r\n                        </Avatar>\r\n                    </PreviewRow>\r\n                </FlexCol>\r\n                <AppletActions>\r\n                    <ButtonGroup size=\"small\">\r\n                        <Button disabled={!!invalidName} onClick={handleClickOpen}>\r\n                            Import\r\n                        </Button>\r\n                        <Button disabled={!!invalidName} color=\"primary\" onClick={handleImport}>\r\n                            Create empty\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </AppletActions>\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"import-deck-dialog\" fullWidth maxWidth=\"md\">\r\n                    <DialogTitle id=\"import-deck-dialog\">Import</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>Paste exported deck below.</DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            fullWidth\r\n                            label=\"Import\"\r\n                            multiline\r\n                            rows=\"15\"\r\n                            variant=\"outlined\"\r\n                            value={importText}\r\n                            onChange={e => setImportText(e.target.value)}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={handleImport} color=\"primary\">\r\n                            Import\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </AppletPaper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default AddDeck;\r\n","import React from \"react\";\r\nimport Scry from \"../../Utility/Scry\";\r\nimport styled from \"../Styled/Theme\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    padding-bottom: 139.344262295%;\r\n    width: 100%;\r\n    height: 0;\r\n    position: relative;\r\n`;\r\n\r\nconst Image = styled.img`\r\n    border-radius: 4.75% / 3.5%;\r\n    background-image: repeating-linear-gradient(-55deg, #ddd, #ddd 5px, #ccc 5px, #ccc 10px);\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst ImagesCard: React.FC<CollectionCardProps> = ({ card }) => {\r\n    return (\r\n        <Body>\r\n            <Image src={Scry.getImage(card, \"normal\") ?? \"\"} />\r\n        </Body>\r\n    );\r\n};\r\nexport default ImagesCard;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\nimport ImagesCard from \"./ImagesCard\";\r\n\r\nconst ImagesCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <Grid container spacing={1}>\r\n            {cards.map(c => (\r\n                <Grid key={c.name} item xs={6} lg={6} xl={4}>\r\n                    <ImagesCard card={c} {...props} />\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n};\r\nexport default ImagesCollecion;\r\n","import { AssertionError } from \"assert\";\r\n\r\nfunction assert(condition: any, message: string): asserts condition {\r\n    if (!condition) {\r\n        throw new AssertionError({ message });\r\n    }\r\n}\r\nexport default assert;","import { IconButton, Tooltip, Typography } from \"@material-ui/core\";\r\nimport { IconButtonProps } from \"@material-ui/core/IconButton/IconButton\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n    onClick: () => void;\r\n    title: string;\r\n    size?: IconButtonProps[\"size\"];\r\n};\r\n\r\nconst TooltipButton: React.FC<Props> = ({ onClick, title, size, children }) => {\r\n    return (\r\n        <Tooltip title={title}>\r\n            <IconButton size={size} onClick={onClick} aria-label={title}>\r\n                {children}\r\n                <Typography variant=\"srOnly\">{title}</Typography>\r\n            </IconButton>\r\n        </Tooltip>\r\n    );\r\n};\r\n\r\nexport default TooltipButton;\r\n","import React from \"react\";\r\nimport { Icon } from \"@material-ui/core\";\r\nimport { State } from \"../State\";\r\nimport { ScryCardSymbol } from \"../Utility/Scry/Types\";\r\nimport styled from \"./Styled/Theme\";\r\n\r\nconst Symbol = styled.img`\r\n    height: 15px;\r\n    margin: 1px 1px -1px 1px;\r\n`;\r\n\r\ntype Props = {\r\n    symbol: string;\r\n};\r\n\r\nconst SymbolIcon: React.FC<Props> = ({ symbol }) => {\r\n    const [state] = React.useContext(State);\r\n    const [symbolObj, setSymbolObj] = React.useState<ScryCardSymbol>();\r\n    React.useEffect(() => {\r\n        setSymbolObj(state.symbolList[symbol] ?? Object.values(state.symbolList).find(s => s.loose_variant === symbol));\r\n    }, [symbol, state.symbolList]);\r\n    return <Icon>{symbolObj ? <Symbol src={symbolObj.svg_uri} alt={symbolObj.english} /> : symbol ?? \"{?}\"}</Icon>;\r\n};\r\n\r\nexport default SymbolIcon;\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { TypographyProps } from \"@material-ui/core/Typography\";\r\nimport SymbolIcon from \"./SymbolIcon\";\r\n\r\ntype Props = TypographyProps & {\r\n    text: string;\r\n};\r\n\r\nconst SymbolTypography: React.FC<Props> = ({ text, ...typographyProps }) => {\r\n    const [parsed, setParsed] = React.useState<JSX.Element[]>([]);\r\n    React.useEffect(() => {\r\n        setParsed((text.match(/({.*?})|([^{]+)/g) ?? []).map((m, i) => (m[0] === \"{\" ? <SymbolIcon key={i} symbol={m} /> : <span key={i}>{m}</span>)));\r\n    }, [text]);\r\n    return <Typography {...typographyProps}>{parsed}</Typography>;\r\n};\r\n\r\nexport default SymbolTypography;\r\n","import { TableCell, TableRow, Typography } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport React from \"react\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport { SectionName, State } from \"../../State\";\r\nimport assert from \"../../Utility/Assert\";\r\nimport TooltipButton from \"../Styled/TooltipButton\";\r\nimport SymbolTypography from \"../SymbolTypography\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\n\r\nconst ListCard: React.FC<CollectionCardProps> = ({ card, actions, deckName, sectionName }) => {\r\n    const [state, dispatch] = React.useContext(State);\r\n\r\n    const updateCardQuantity = (val: number) => {\r\n        assert(!isNullOrUndefined(deckName), \"DeckName should not be empty if the preview actions are Deck\");\r\n        console.log({ sectionName });\r\n        dispatch({\r\n            type: \"UpdateDeckCard\",\r\n            deckName,\r\n            sectionName: sectionName ?? SectionName.Default,\r\n            card: {\r\n                ...card,\r\n                amount: val,\r\n            },\r\n        });\r\n    };\r\n\r\n    return (\r\n        <TableRow>\r\n            <TableCell component=\"th\" scope=\"row\" align=\"right\">\r\n                {card.amount ?? \"-\"}\r\n            </TableCell>\r\n            <TableCell>{card.name}</TableCell>\r\n            <TableCell>{card.set}</TableCell>\r\n            <TableCell>\r\n                <SymbolTypography text={card.mana_cost ?? \"\"} noWrap />\r\n            </TableCell>\r\n            <TableCell>{card.type_line}</TableCell>\r\n            <TableCell>\r\n                <Typography noWrap>\r\n                    <TooltipButton size=\"small\" title=\"Add\" onClick={() => updateCardQuantity(card.amount + 1)}>\r\n                        <AddIcon />\r\n                    </TooltipButton>\r\n                    <TooltipButton size=\"small\" title=\"Remove\" onClick={() => updateCardQuantity(card.amount - 1)}>\r\n                        <RemoveIcon />\r\n                    </TooltipButton>\r\n                </Typography>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n};\r\nexport default ListCard;\r\n","import { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ListCard from \"./ListCard\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\n\r\nconst ListCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <Table size=\"small\" aria-label=\"a dense table\">\r\n            <TableHead>\r\n                <TableRow>\r\n                    <TableCell>#</TableCell>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell>Set</TableCell>\r\n                    <TableCell>Cost</TableCell>\r\n                    <TableCell>Type</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {cards.length >= 1 ? (\r\n                    cards.map(c => <ListCard key={c.name} card={c} {...props} />)\r\n                ) : (\r\n                    <TableRow>\r\n                        <TableCell>Empty</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </TableBody>\r\n        </Table>\r\n    );\r\n};\r\nexport default ListCollecion;\r\n","import { Avatar, Chip } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport styled from \"../Styled/Theme\";\r\nimport SymbolTypography from \"../SymbolTypography\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\n\r\nconst CustomChip = styled(Chip)`\r\n    width: 100%;\r\n\r\n    & .MuiChip-label {\r\n        flex: 1 1 auto;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    & .MuiChip-deleteIcon {\r\n        width: unset;\r\n        height: unset;\r\n        cursor: default;\r\n        flex-shrink: 0;\r\n        margin-left: ${p => p.theme.spacing(1)}px;\r\n        margin-top: -4px;\r\n    }\r\n`;\r\n\r\nconst CompressedCard: React.FC<CollectionCardProps> = ({ card }) => {\r\n    return (\r\n        <CustomChip\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            label={card.name}\r\n            deleteIcon={<SymbolTypography text={card.mana_cost ?? \"\"} noWrap />}\r\n            onDelete={() => {}}\r\n            avatar={<Avatar>{card.amount}</Avatar>}\r\n        />\r\n    );\r\n};\r\nexport default CompressedCard;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\nimport CompressedCard from \"./CompressedCard\";\r\n\r\nconst CompressedCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <Grid container direction=\"column\">\r\n            {cards.map(c => (\r\n                <Grid item key={c.name} xs zeroMinWidth>\r\n                    <CompressedCard card={c} {...props} />\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n};\r\nexport default CompressedCollecion;\r\n","import { Grid, Typography } from \"@material-ui/core\";\r\nimport omit from \"lodash.omit\";\r\nimport React from \"react\";\r\nimport ScrySdk from \"scryfall-sdk\";\r\nimport { DeckCard, SectionName } from \"../../State\";\r\nimport ImagesCollecion from \"./ImagesCollection\";\r\nimport ListCollecion from \"./ListCollection\";\r\nimport CompressedCollecion from \"./CompressedCollection\";\r\n\r\nexport type PreviewStyle = \"Standard\" | \"List\" | \"Images\" | \"Compressed\";\r\nexport type PreviewActions = \"SearchDeck\" | \"SearchWishlist\" | \"Deck\";\r\nexport type SortByOptions = \"Name\" | \"Cmc\" | \"Type\" | \"Rarity\";\r\nexport type SortOrderOptions = \"Asc\" | \"Desc\";\r\n\r\nexport type CollectionPreviewProps = {\r\n    cards: (DeckCard & ScrySdk.Card)[];\r\n    actions: PreviewActions;\r\n    sortBy: SortByOptions;\r\n    sortOrder: SortOrderOptions;\r\n    showGroups: boolean;\r\n    deckName?: string;\r\n    sectionName?: string;\r\n};\r\n\r\nexport type CollectionCardProps = {\r\n    card: DeckCard & ScrySdk.Card;\r\n    actions: PreviewActions;\r\n    deckName?: string;\r\n    sectionName?: string;\r\n};\r\n\r\nfunction desc<T>(a: T, b: T, orderBy: keyof T) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getSorting<T>(order: SortOrderOptions, orderBy: keyof T): (a: T, b: T) => number {\r\n    return order === \"Desc\" ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\r\n}\r\n\r\nfunction StableSort<T>(array: T[], cmp: (a: T, b: T) => number) {\r\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = cmp(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n}\r\n\r\nconst GetSortFunction = (sortBy: SortByOptions, sortOrder: SortOrderOptions) => {\r\n    switch (sortBy) {\r\n        case \"Name\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"name\");\r\n        case \"Cmc\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"mana_cost\");\r\n        case \"Type\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"type_line\");\r\n        case \"Rarity\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"rarity\");\r\n    }\r\n};\r\n\r\ntype Props = CollectionPreviewProps & {\r\n    style: PreviewStyle;\r\n};\r\n\r\nconst CollectionPreview: React.FC<Props> = props => {\r\n    const renderCollection = () => {\r\n        const passedProps = {\r\n            ...omit(props, \"style\", \"cards\"),\r\n            cards: StableSort(props.cards, GetSortFunction(props.sortBy, props.sortOrder)),\r\n        };\r\n        switch (props.style) {\r\n            case \"List\":\r\n                return <ListCollecion {...passedProps} />;\r\n            case \"Images\":\r\n                return <ImagesCollecion {...passedProps} />;\r\n            case \"Compressed\":\r\n                return <CompressedCollecion {...passedProps} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {props.sectionName !== SectionName.Default && <Typography variant=\"h6\">{props.sectionName}</Typography>}\r\n            <Grid item>{renderCollection()}</Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CollectionPreview;\r\n","import { Button, ButtonGroup, Tooltip, Typography } from \"@material-ui/core\";\r\nimport ViewHeadlineIcon from \"@material-ui/icons/ViewHeadline\";\r\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\r\nimport ViewModuleIcon from \"@material-ui/icons/ViewModule\";\r\nimport React from \"react\";\r\nimport styled from \"../Styled/Theme\";\r\nimport { PreviewStyle } from \"./CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n\r\n    & .MuiTypography-root {\r\n        margin-right: ${p => p.theme.spacing(1)}px;\r\n    }\r\n\r\n    & .MuiButton-root {\r\n        padding-left: 0;\r\n        padding-right: 0;\r\n    }\r\n`;\r\n\r\nconst IconForStyle = (style: PreviewStyle) => {\r\n    switch (style) {\r\n        case \"Standard\":\r\n            return <ViewListIcon />;\r\n        case \"List\":\r\n            return <ViewHeadlineIcon />;\r\n        case \"Images\":\r\n            return <ViewModuleIcon />;\r\n    }\r\n    throw Error(`Style ${style} does not have an icon.`);\r\n};\r\n\r\ntype Props = {\r\n    style: PreviewStyle;\r\n    onToggle: (style: PreviewStyle) => void;\r\n};\r\n\r\nconst PreviewStyleToggle: React.FC<Props> = ({ style, onToggle }) => {\r\n    return (\r\n        <Body>\r\n            <Typography variant=\"caption\">Display:</Typography>\r\n            <ButtonGroup variant=\"outlined\" size=\"small\">\r\n                {([\"Standard\", \"List\", \"Images\"] as const).map(s => (\r\n                    <Button key={s} onClick={() => onToggle(s)} variant={style === s ? \"contained\" : undefined}>\r\n                        <Tooltip title={s}>{IconForStyle(s)}</Tooltip>\r\n                    </Button>\r\n                ))}\r\n            </ButtonGroup>\r\n        </Body>\r\n    );\r\n};\r\nexport default PreviewStyleToggle;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClipboard, faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faGoogle } from \"@fortawesome/free-brands-svg-icons\";\r\nimport styled from \"./Theme\";\r\n\r\nconst IconWrap = styled.div`\r\n    width: 24px;\r\n    height: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const CompressIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faCompressAlt} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const ExpandIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faExpandAlt} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const GoogleIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faGoogle} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const ClipboardIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faClipboard} />\r\n    </IconWrap>\r\n);\r\n","import { Button, ClickAwayListener, Grow, MenuItem, MenuList, Paper, Popper } from \"@material-ui/core\";\r\nimport SortIcon from \"@material-ui/icons/Sort\";\r\nimport React from \"react\";\r\nimport styled from \"../Styled/Theme\";\r\nimport { SortByOptions, SortOrderOptions } from \"./CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n`;\r\n\r\ntype Props = {\r\n    sortBy: SortByOptions;\r\n    setSortBy: (sortBy: SortByOptions) => void;\r\n    sortOrder: SortOrderOptions;\r\n    setSortOrder: (sortOrder: SortOrderOptions) => void;\r\n};\r\n\r\nconst SortToggle: React.FC<Props> = ({ sortBy, setSortBy, sortOrder, setSortOrder }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n\r\n    const handleToggle = () => setOpen(prevOpen => !prevOpen);\r\n    const handleClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Body>\r\n            <Button\r\n                ref={anchorRef}\r\n                size=\"small\"\r\n                aria-controls={open ? \"sort-button-menu\" : undefined}\r\n                aria-expanded={open ? \"true\" : undefined}\r\n                aria-label=\"select sort option\"\r\n                aria-haspopup=\"menu\"\r\n                onClick={handleToggle}\r\n                startIcon={<SortIcon />}\r\n            >\r\n                Sort by\r\n            </Button>\r\n            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition>\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                        }}\r\n                    >\r\n                        <Paper elevation={5}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList>\r\n                                    {([\r\n                                        [\"Name\", \"Asc\"],\r\n                                        [\"Name\", \"Desc\"],\r\n                                        [\"Cmc\", \"Asc\"],\r\n                                        [\"Cmc\", \"Desc\"],\r\n                                        [\"Type\", \"Asc\"],\r\n                                        [\"Type\", \"Desc\"],\r\n                                        [\"Rarity\", \"Asc\"],\r\n                                        [\"Rarity\", \"Desc\"],\r\n                                    ] as const).map(([by, order]) => (\r\n                                        <MenuItem\r\n                                            key={`${by} (${order})`}\r\n                                            selected={by === sortBy && order === sortOrder}\r\n                                            onClick={event => {\r\n                                                setSortBy(by);\r\n                                                setSortOrder(order);\r\n                                            }}\r\n                                        >\r\n                                            {`${by} (${order})`}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </Body>\r\n    );\r\n};\r\nexport default SortToggle;\r\n","import ListAltIcon from \"@material-ui/icons/ListAlt\";\r\nimport React from \"react\";\r\nimport TooltipButton from \"../Styled/TooltipButton\";\r\nimport styled from \"../Styled/Theme\";\r\n\r\nconst Body = styled.div`\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n    margin-left: ${p => p.theme.spacing(1)}px;\r\n`;\r\n\r\ntype Props = {\r\n    show: boolean;\r\n    setShow: (show: boolean) => void;\r\n};\r\n\r\nconst ShowGroupsToggle: React.FC<Props> = ({ show, setShow }) => {\r\n    return (\r\n        <Body>\r\n            <TooltipButton size=\"small\" title={show ? \"Hide groups\" : \"Show groups\"} onClick={() => setShow(!show)}>\r\n                <ListAltIcon />\r\n            </TooltipButton>\r\n        </Body>\r\n    );\r\n};\r\nexport default ShowGroupsToggle;\r\n","import { Dialog, DialogContent, DialogContentText, DialogTitle, Grid, TextField } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport copy from \"clipboard-copy\";\r\nimport React from \"react\";\r\nimport * as Scry from \"scryfall-sdk\";\r\nimport { DeckCard, DeckName, State } from \"../../State\";\r\nimport CollectionParser from \"../../Utility/CollectionParser\";\r\nimport GoogleApi from \"../../Utility/GoogleApi\";\r\nimport CollectionPreview, { PreviewStyle, SortByOptions, SortOrderOptions } from \"../Display/CollectionPreview\";\r\nimport PreviewStyleToggle from \"../Display/PreviewStyleToggle\";\r\nimport { AppletActions, AppletPaper, FlexCol, Title } from \"../Styled/Grid\";\r\nimport { ClipboardIcon, CompressIcon, ExpandIcon } from \"../Styled/Icons\";\r\nimport styled from \"../Styled/Theme\";\r\nimport TooltipButton from \"../Styled/TooltipButton\";\r\nimport SortToggle from \"../Display/SortToggle\";\r\nimport ShowGroupsToggle from \"../Display/ShowGroupsToggle\";\r\n\r\nconst SectionRow = styled.div`\r\n    margin-bottom: ${p => p.theme.spacing(2)}px;\r\n`;\r\n\r\nconst ExportRow = styled(FlexCol)`\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n\r\n    & .MuiDialogContentText-root {\r\n        flex-grow: 1;\r\n        margin-bottom: 0;\r\n    }\r\n`;\r\n\r\ntype Props = {\r\n    deckName: string;\r\n};\r\n\r\nconst DeckPreview = ({ deckName }: Props) => {\r\n    const [state, dispatch] = React.useContext(State);\r\n    const deck = state.decks[deckName];\r\n\r\n    const [expanded, setExpanded] = React.useState(true);\r\n    const [exportOpened, setExportOpened] = React.useState(false);\r\n    const [style, setStyle] = React.useState<PreviewStyle>(\"List\");\r\n    const [sortBy, setSortBy] = React.useState<SortByOptions>(\"Cmc\");\r\n    const [sortOrder, setSortOrder] = React.useState<SortOrderOptions>(\"Asc\");\r\n    const [showGroups, setShowGroups] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        const missingCards = Object.values(deck.cards)\r\n            .reduce((prev, val) => [...prev, ...Object.values(val)], [] as DeckCard[])\r\n            .filter(card => !state.cardList[card.name]);\r\n        Scry.Cards.collection(...missingCards.map(card => Scry.CardIdentifier.byName(card.name))).on(\"data\", (card: any) =>\r\n            dispatch({ type: \"AddCard\", card })\r\n        );\r\n    }, [deckName]);\r\n\r\n    const closePreview = () => dispatch({ type: \"SelectDeck\", name: null });\r\n    const toggleExpanded = () => setExpanded(e => !e);\r\n    const onDeleteDeck = () => GoogleApi.deleteDeck(dispatch, { name: deckName, id: state.files[deckName] });\r\n    const onExportOpen = () => setExportOpened(true);\r\n    const onExportClose = () => setExportOpened(false);\r\n\r\n    return (\r\n        <Grid item xs={12} md={expanded ? 6 : 4}>\r\n            <AppletPaper>\r\n                <Grid container direction=\"row\" justify=\"space-between\">\r\n                    <Grid item>\r\n                        <Title>Deck preview</Title>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TooltipButton title={expanded ? \"Compress\" : \"Expand\"} size=\"small\" onClick={toggleExpanded}>\r\n                            {expanded ? <CompressIcon /> : <ExpandIcon />}\r\n                        </TooltipButton>\r\n                        <TooltipButton title=\"Close preview\" size=\"small\" onClick={closePreview}>\r\n                            <CloseIcon />\r\n                        </TooltipButton>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container justify=\"space-between\">\r\n                    <SortToggle sortBy={sortBy} setSortBy={setSortBy} sortOrder={sortOrder} setSortOrder={setSortOrder} />\r\n                    <ShowGroupsToggle show={showGroups} setShow={setShowGroups} />\r\n                    <FlexCol />\r\n                    {expanded && <PreviewStyleToggle style={style} onToggle={setStyle} />}\r\n                </Grid>\r\n                <FlexCol>\r\n                    {Object.entries(deck.cards).map(([sectionName, cards]) => (\r\n                        <SectionRow key={sectionName}>\r\n                            <CollectionPreview\r\n                                cards={Object.values(cards).map(c => ({ ...c, ...(state.cardList[c.name] ?? {}) })) as any}\r\n                                style={expanded ? style : \"Compressed\"}\r\n                                actions={deckName === DeckName.Wishlist ? \"SearchWishlist\" : \"Deck\"}\r\n                                sortBy={sortBy}\r\n                                sortOrder={sortOrder}\r\n                                showGroups={showGroups}\r\n                                deckName={deckName}\r\n                                sectionName={sectionName}\r\n                            />\r\n                        </SectionRow>\r\n                    ))}\r\n                </FlexCol>\r\n                <AppletActions>\r\n                    <TooltipButton title=\"Export deck\" onClick={onExportOpen}>\r\n                        <GetAppIcon />\r\n                    </TooltipButton>\r\n                    {deckName !== DeckName.Collection && deckName !== DeckName.Wishlist && (\r\n                        <TooltipButton title=\"Delete deck\" onClick={onDeleteDeck}>\r\n                            <DeleteIcon />\r\n                        </TooltipButton>\r\n                    )}\r\n                </AppletActions>\r\n                <Dialog open={exportOpened} onClose={onExportClose} aria-labelledby=\"export-deck-dialog\" fullWidth maxWidth=\"md\">\r\n                    <DialogTitle id=\"import-deck-dialog\">Export</DialogTitle>\r\n                    <DialogContent>\r\n                        <ExportRow>\r\n                            <DialogContentText>Copy exported text below.</DialogContentText>\r\n                            <TooltipButton title=\"Copy to clipboard\" onClick={() => copy(CollectionParser.deserialize(deck.cards))}>\r\n                                <ClipboardIcon />\r\n                            </TooltipButton>\r\n                        </ExportRow>\r\n                        <TextField\r\n                            label=\"Export\"\r\n                            multiline\r\n                            rows=\"15\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            value={CollectionParser.deserialize(deck.cards)}\r\n                            InputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                        />\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </AppletPaper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default DeckPreview;\r\n","import {\r\n    Button,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    Grid,\r\n    TextField,\r\n    Tooltip,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React from \"react\";\r\nimport { State } from \"../../State\";\r\nimport Scry from \"../../Utility/Scry\";\r\nimport { AppletActions, AppletPaper, FlexCol, Title } from \"../Styled/Grid\";\r\nimport styled from \"../Styled/Theme\";\r\nimport SymbolTypography from \"../SymbolTypography\";\r\n\r\n// TODO: remove from here & make it reusable?\r\nconst PreviewRow = styled.div`\r\n    display: flex;\r\n    margin-top: ${p => p.theme.spacing(1)}px;\r\n    align-items: center;\r\n\r\n    & .MuiAutocomplete-root {\r\n        flex-grow: 1;\r\n        margin-right: ${p => p.theme.spacing(1)}px;\r\n    }\r\n`;\r\n\r\n// Reusable?\r\ninterface CardSearchFilter {\r\n    /** Array of selected colors inside advanced search */\r\n    colors: {\r\n        r: boolean; // Red\r\n        g: boolean; // Green\r\n        u: boolean; // Blue\r\n        b: boolean; // Black\r\n        w: boolean; // White\r\n    };\r\n    /** Checkbox whether the search should match exact colors */\r\n    colorExactMatch: boolean;\r\n\r\n    /** Converted Mana Cost */\r\n    cmc: number;\r\n    /** Type: equal [=], less than [<], more than [>] */\r\n    cmcType: string;\r\n\r\n    // type: string;\r\n    // subtype: string;\r\n\r\n    // legality: string;\r\n}\r\n\r\nconst initCardSearchFilter = (): CardSearchFilter => {\r\n    return {\r\n        colors: { r: false, g: false, u: false, b: false, w: false },\r\n        colorExactMatch: false,\r\n        cmc: 0,\r\n        cmcType: \"=\",\r\n    };\r\n};\r\n\r\nconst CardSearch: React.FC = () => {\r\n    const [state, dispatch] = React.useContext(State);\r\n\r\n    // Card name & autocomplete structures\r\n    const [cardName, setCardName] = React.useState<string>(\"\");\r\n    const [autoompleteOptions, setAutocompleteOptions] = React.useState<string[]>([]);\r\n\r\n    const updateAutoComplete = (name: string) => {\r\n        setCardName(name);\r\n        Scry.Cards.Autocomplete(cardName).then(names => setAutocompleteOptions(names));\r\n    };\r\n\r\n    const performSearch = () => {\r\n        alert(JSON.stringify(filter));\r\n    };\r\n\r\n    // Advanced Filters Dialog structures\r\n    const [dialogOpen, setDialogOpen] = React.useState<boolean>(false);\r\n    const openDialog = () => setDialogOpen(true);\r\n    const closeDialog = () => setDialogOpen(false);\r\n\r\n    // Filter structures\r\n    const [filter, setFilter] = React.useState<CardSearchFilter>(initCardSearchFilter());\r\n\r\n    const resetFilter = () => setFilter(initCardSearchFilter());\r\n    const handleColors = (color: \"r\" | \"g\" | \"u\" | \"b\" | \"w\") => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newFilter = { ...filter };\r\n        newFilter.colors[color] = event.target.checked;\r\n        setFilter(newFilter);\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12} md>\r\n            <AppletPaper>\r\n                <Title>Card search</Title>\r\n\r\n                <FlexCol>\r\n                    <PreviewRow>\r\n                        <Autocomplete\r\n                            freeSolo\r\n                            autoHighlight\r\n                            disableClearable\r\n                            options={autoompleteOptions}\r\n                            inputValue={cardName}\r\n                            onInputChange={(e, value) => updateAutoComplete(value)}\r\n                            renderInput={params => <TextField {...params} label=\"Card name\" variant=\"outlined\" fullWidth />}\r\n                        />\r\n                    </PreviewRow>\r\n                </FlexCol>\r\n\r\n                <Dialog open={dialogOpen} onClose={closeDialog} aria-labelledby=\"advanced-card-search-dialog\" maxWidth=\"md\" fullWidth>\r\n                    <DialogTitle id=\"advanced-card-search-dialog\">Advanced card search</DialogTitle>\r\n                    <DialogContent>\r\n                        <Typography variant=\"subtitle2\">Filter by color</Typography>\r\n                        <FormGroup row>\r\n                            <FormControlLabel\r\n                                label={<SymbolTypography text=\"{R} Red\" />}\r\n                                control={<Checkbox checked={filter.colors.r} onChange={handleColors(\"r\")} />}\r\n                            />\r\n                            <FormControlLabel\r\n                                label={<SymbolTypography text=\"{G} Green\" />}\r\n                                control={<Checkbox checked={filter.colors.g} onChange={handleColors(\"g\")} />}\r\n                            />\r\n                            <FormControlLabel\r\n                                label={<SymbolTypography text=\"{U} Blue\" />}\r\n                                control={<Checkbox checked={filter.colors.u} onChange={handleColors(\"u\")} />}\r\n                            />\r\n                            <FormControlLabel\r\n                                label={<SymbolTypography text=\"{B} Black\" />}\r\n                                control={<Checkbox checked={filter.colors.b} onChange={handleColors(\"b\")} />}\r\n                            />\r\n                            <FormControlLabel\r\n                                label={<SymbolTypography text=\"{W} White\" />}\r\n                                control={<Checkbox checked={filter.colors.w} onChange={handleColors(\"w\")} />}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormControlLabel\r\n                            label=\"Exact color match?\"\r\n                            control={<Checkbox checked={filter.colorExactMatch} onChange={e => setFilter({ ...filter, colorExactMatch: e.target.checked })} />}\r\n                        />\r\n                        \r\n\r\n                        {/* <br />\r\n\r\n                        <ul>\r\n                            <li>[DONE] Filter by color identity (only selected colors or all cards with selected colors)</li>\r\n                            <li>Filter by converted mana cost (equal, less than, more than)</li>\r\n                            <li>Filter by type/subtype (restrict subtype options based on type)</li>\r\n                            <li>Filter by format legality (choose one)</li>\r\n                        </ul> */}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={resetFilter} color=\"primary\">\r\n                            Reset\r\n                        </Button>\r\n                        <Button onClick={closeDialog} color=\"primary\">\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <AppletActions>\r\n                    <Tooltip title=\"Advanced search filter\">\r\n                        <Button onClick={openDialog}>\r\n                            <FilterListIcon />\r\n                        </Button>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Search for results\">\r\n                        <Button onClick={performSearch}>\r\n                            <SearchIcon />\r\n                        </Button>\r\n                    </Tooltip>\r\n                </AppletActions>\r\n            </AppletPaper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CardSearch;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { AppletPaper, Title } from \"../Styled/Grid\";\r\n\r\nconst UserInfo: React.FC = () => {\r\n    return (\r\n        <Grid item xs={12} sm md>\r\n            <AppletPaper>\r\n                <Title>User info</Title>\r\n                UserInfo paceholder\r\n            </AppletPaper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default UserInfo;\r\n","import { Container, Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport AddDeck from \"./Applets/AddDeck\";\r\nimport DeckPreview from \"./Applets/DeckPreview\";\r\nimport CardSearch from \"./Applets/CardSearch\";\r\nimport UserInfo from \"./Applets/UserInfo\";\r\nimport { State } from \"../State\";\r\n\r\nconst Home: React.FC = () => {\r\n    const [state] = React.useContext(State);\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n            <Grid container spacing={3}>\r\n                <Grid item direction=\"row\" container spacing={3}>\r\n                    <UserInfo />\r\n                    <AddDeck />\r\n                </Grid>\r\n                <Grid item direction=\"row\" container spacing={3}>\r\n                    <CardSearch />\r\n                    {state.selectedDeck !== null && <DeckPreview deckName={state.selectedDeck} />}\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst NotFound: React.FC = () => {\r\n    return <div>Not found</div>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport { GoogleIcon } from \"./Styled/Icons\";\r\n\r\ntype Props = {\r\n    variant?: \"text\" | \"outlined\" | \"contained\";\r\n    onClick: () => void;\r\n};\r\n\r\nconst SignInButton: React.FC<Props> = ({ variant, onClick }: Props) => {\r\n    return (\r\n        <Button variant={variant} onClick={onClick} startIcon={<GoogleIcon />}>\r\n            <Typography noWrap>Sign in with Google</Typography>\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default SignInButton;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Logo from \"../Assets/logo.png\";\r\nimport GoogleApi from \"../Utility/GoogleApi\";\r\nimport SignInButton from \"./SignInButton\";\r\n\r\nconst SignIn: React.FC = () => {\r\n    return (\r\n        <>\r\n            <Grid container justify=\"center\" alignItems=\"center\" style={{ padding: 25 }}>\r\n                <img src={Logo} alt=\"\" width=\"150px\" height=\"150px\" draggable={false} />\r\n            </Grid>\r\n            <Grid container justify=\"center\" alignItems=\"center\">\r\n                <SignInButton variant=\"contained\" onClick={GoogleApi.signIn} />\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignIn;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { AppBar, Avatar, Divider, Drawer, IconButton, Toolbar, Tooltip, Typography } from \"@material-ui/core\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport { initialState, State } from \"../State\";\r\nimport { reducer } from \"../State/Reducers\";\r\nimport GoogleApi, { GoogleProfile } from \"../Utility/GoogleApi\";\r\nimport Scry from \"../Utility/Scry\";\r\nimport DrawerDeckList from \"./DrawerDeckList\";\r\nimport Home from \"./Home\";\r\nimport NotFound from \"./NotFound\";\r\nimport SignIn from \"./SignIn\";\r\nimport SignInButton from \"./SignInButton\";\r\nimport { FlexCol } from \"./Styled/Grid\";\r\nimport styled, { ComponentProps, css, MainTheme } from \"./Styled/Theme\";\r\nimport TooltipButton from \"./Styled/TooltipButton\";\r\n\r\n\r\nconst bodyOpen = css<ComponentProps<any>>`\r\n    margin-left: ${p => p.theme.constants.drawerWidth};\r\n    width: calc(100% - ${p => p.theme.constants.drawerWidth});\r\n    transition: ${p =>\r\n        p.theme.transitions.create([\"width\", \"margin\"], {\r\n            easing: p.theme.transitions.easing.sharp,\r\n            duration: p.theme.transitions.duration.enteringScreen,\r\n        })};\r\n`;\r\n\r\nconst bodyClose = css<ComponentProps<any>>`\r\n    transition: ${p =>\r\n        p.theme.transitions.create([\"width\", \"margin\"], {\r\n            easing: p.theme.transitions.easing.sharp,\r\n            duration: p.theme.transitions.duration.leavingScreen,\r\n        })};\r\n`;\r\n\r\nconst CustomAppBar = styled(AppBar)<{ open: boolean }>`\r\n    z-index: ${p => p.theme.zIndex.drawer + 1};\r\n    ${bodyClose}\r\n    ${p => p.open && bodyOpen}\r\n`;\r\n\r\nconst MenuButton = styled(IconButton)<{ open: boolean }>`\r\n    margin-right: 36px;\r\n    ${p =>\r\n        p.open &&\r\n        css`\r\n            display: none;\r\n        `}\r\n`;\r\n\r\nconst drawerOpen = css<ComponentProps<any>>`\r\n    width: ${p => p.theme.constants.drawerWidth};\r\n    transition: ${p =>\r\n        p.theme.transitions.create(\"width\", {\r\n            easing: p.theme.transitions.easing.sharp,\r\n            duration: p.theme.transitions.duration.enteringScreen,\r\n        })};\r\n`;\r\n\r\nconst drawerClose = css<ComponentProps<any>>`\r\n    transition: ${p =>\r\n        p.theme.transitions.create(\"width\", {\r\n            easing: p.theme.transitions.easing.sharp,\r\n            duration: p.theme.transitions.duration.leavingScreen,\r\n        })};\r\n    overflow-x: hidden;\r\n    width: ${p => p.theme.constants.drawerWidthClosed};\r\n`;\r\n\r\nconst CustomDrawer = styled(Drawer).attrs(() => ({\r\n    variant: \"permanent\",\r\n}))<{ open?: boolean }>`\r\n    width: ${p => p.theme.constants.drawerWidth};\r\n    flex-shrink: 0;\r\n    white-space: nowrap;\r\n    ${p => (p.open ? drawerOpen : drawerClose)}\r\n\r\n    .MuiDrawer-paper {\r\n        ${p => (p.open ? drawerOpen : drawerClose)}\r\n    }\r\n`;\r\n\r\nconst DrawerToolbar = styled(Toolbar)`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    padding: ${p => p.theme.spacing(0, 1)}px;\r\n`;\r\n\r\nconst MainContent = styled.div<{ open: boolean }>`\r\n    flex-grow: 1;\r\n    padding: ${p => p.theme.spacing(3)}px;\r\n    margin-left: ${p => p.theme.constants.drawerWidthClosed};\r\n    ${bodyClose}\r\n    ${p => p.open && bodyOpen}\r\n`;\r\n\r\nconst ProfileAvatar = styled.div`\r\n    margin-right: ${p => p.theme.spacing(1)}px;\r\n`;\r\n\r\nconst App: React.FC = () => {\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n    const [profile, setProfile] = React.useState<GoogleProfile>();\r\n    const [isSignedIn, setIsSignedIn] = React.useState(false);\r\n\r\n    const handleSignoutClick = () => {\r\n        GoogleApi.signOut();\r\n        setProfile(undefined);\r\n    };\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleDrawerOpen = () => setOpen(true);\r\n    const handleDrawerClose = () => setOpen(false);\r\n\r\n    /**\r\n     * Called at app init, sets Google API signin callback\r\n     * info stored in React profile state\r\n     */\r\n    React.useEffect(() => {\r\n        GoogleApi.initClient(async (isSignedIn: boolean) => {\r\n            setIsSignedIn(isSignedIn);\r\n            if (!isSignedIn) {\r\n                return;\r\n            }\r\n            setProfile(GoogleApi.getProfile());\r\n            GoogleApi.prepareAppData()(dispatch);\r\n        });\r\n        Scry.Symbology.All().then(symbols => dispatch({ type: \"AddSymbols\", symbols }));\r\n    }, []);\r\n\r\n    return (\r\n        <State.Provider value={[state, dispatch]}>\r\n            <CustomAppBar position=\"sticky\" open={open}>\r\n                <Toolbar>\r\n                    <MenuButton color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerOpen} edge=\"start\" open={open}>\r\n                        <MenuIcon />\r\n                    </MenuButton>\r\n                    <Typography variant=\"h6\">MTGCollection</Typography>\r\n                    <FlexCol />\r\n                    {isSignedIn ? (\r\n                        <>\r\n                            {!isNullOrUndefined(profile) && (\r\n                                <ProfileAvatar>\r\n                                    <Tooltip title={`Signed in as ${profile.getGivenName()} (${profile.getEmail()})`}>\r\n                                        <Avatar alt={profile.getGivenName()} src={profile.getImageUrl()} />\r\n                                    </Tooltip>\r\n                                </ProfileAvatar>\r\n                            )}\r\n                            <TooltipButton title=\"SignOut\" onClick={handleSignoutClick}>\r\n                                <ExitToAppIcon />\r\n                            </TooltipButton>\r\n                        </>\r\n                    ) : (\r\n                        <SignInButton onClick={GoogleApi.signIn} />\r\n                    )}\r\n                </Toolbar>\r\n            </CustomAppBar>\r\n            <CustomDrawer open={open}>\r\n                <DrawerToolbar>\r\n                    <IconButton onClick={handleDrawerClose}>{MainTheme.direction === \"rtl\" ? <ChevronRightIcon /> : <ChevronLeftIcon />}</IconButton>\r\n                </DrawerToolbar>\r\n                <Divider />\r\n                <DrawerDeckList open={open} />\r\n            </CustomDrawer>\r\n            <MainContent open={open}>\r\n                <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                    <Redirect to={isSignedIn ? \"/\" : \"/signin/\"} />\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Home} />\r\n                        <Route exact path=\"/signin/\" component={SignIn} />\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </MainContent>\r\n        </State.Provider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import { CssBaseline } from \"@material-ui/core\";\r\nimport { ThemeProvider as MUIThemeProvider, StylesProvider } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./Components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { MainTheme } from \"./Components/Styled/Theme\";\r\n\r\nReactDOM.render(\r\n    <StylesProvider injectFirst>\r\n        <ThemeProvider theme={MainTheme}>\r\n            <MUIThemeProvider theme={MainTheme}>\r\n                <CssBaseline />\r\n                <App />\r\n            </MUIThemeProvider>\r\n        </ThemeProvider>\r\n    </StylesProvider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}