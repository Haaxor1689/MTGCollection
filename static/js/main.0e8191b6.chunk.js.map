{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["GoogleApiInit","apiKey","clientId","discoveryDocs","scope","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","signedIn","setSignedIn","_React$useState3","_React$useState4","content","setContent","initClient","gapi","client","init","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","get","error","appendPre","JSON","stringify","console","log","drive","files","list","pageSize","fields","response","result","length","i","file","name","id","message","useEffect","load","react_default","a","createElement","onClick","signOut","signIn","Content","styled","pre","_templateObject","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0e8191b6.chunk.js","sourcesContent":["/* global gapi */\nimport React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst GoogleApiInit = {\n    apiKey: \"AIzaSyBcke75SLGGCMiId3EcThDcLnbmnKasWyE\",\n    clientId: \"213841300532-aqinavnoi53if8cbk6re0aa6gkf965q3.apps.googleusercontent.com\",\n    discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"],\n    scope: \"https://www.googleapis.com/auth/drive.appdata\",\n}\n\nconst App: React.FunctionComponent = () => {\n    const [signedIn, setSignedIn] = React.useState(false);\n    const [content, setContent] = React.useState(\"\");\n\n    /**\n     *  On load, called to load the auth2 library and API client library.\n     */\n    React.useEffect(() => {\n        gapi.load(\"client:auth2\", initClient);\n    }, []);\n\n    /**\n     *  Initializes the API client library and sets up sign-in state\n     *  listeners.\n     */\n    function initClient() {\n        gapi.client\n            .init(GoogleApiInit)\n            .then(\n                function() {\n                    // Listen for sign-in state changes.\n                    gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n                    // Handle the initial sign-in state.\n                    updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n                },\n                function(error: any) {\n                    appendPre(JSON.stringify(error, null, 2));\n                }\n            );\n    }\n\n    /**\n     *  Called when the signed in status changes, to update the UI\n     *  appropriately. After a sign-in, the API is called.\n     */\n    function updateSigninStatus(isSignedIn: boolean) {\n        setSignedIn(isSignedIn);\n        isSignedIn && listFiles();\n    }\n\n    /**\n     *  Sign in the user upon button click.\n     */\n    function handleAuthClick() {\n        gapi.auth2.getAuthInstance().signIn();\n    }\n\n    /**\n     *  Sign out the user upon button click.\n     */\n    function handleSignoutClick() {\n        gapi.auth2.getAuthInstance().signOut();\n    }\n\n    /**\n     * Append a pre element to the body containing the given message\n     * as its text node. Used to display the results of the API call.\n     *\n     * @param {string} message Text to be placed in pre element.\n     */\n    function appendPre(message: string) {\n        setContent(content + message + \"\\n\");\n    }\n\n    /**\n     * Print files.\n     */\n    function listFiles() {\n        console.log(\"List files\");\n        gapi.client.drive.files\n            .list({\n                pageSize: 10,\n                fields: \"nextPageToken, files(id, name)\",\n            })\n            .then(function(response: any) {\n                appendPre(\"Files:\");\n                var files = response.result.files;\n                if (files && files.length > 0) {\n                    for (var i = 0; i < files.length; i++) {\n                        var file = files[i];\n                        appendPre(file.name + \" (\" + file.id + \")\");\n                    }\n                } else {\n                    appendPre(\"No files found.\");\n                }\n            });\n    }\n\n    return (\n        <div>\n            {!signedIn ? <button onClick={handleAuthClick}>Authorize</button> : <button onClick={handleSignoutClick}>Sign Out</button>}\n\n            <Content>{content}</Content>\n        </div>\n    );\n};\n\nexport default App;\n\nconst Content = styled.pre`\n    white-space: pre-wrap;\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}