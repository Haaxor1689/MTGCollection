{"version":3,"sources":["Utility/useThunk.ts","../node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js","../node_modules/@material-ui/core/esm/ButtonGroup/ButtonGroup.js","Components/Styled/CardNameAutocomplete.tsx","Components/Applets/AddDeck.tsx"],"names":["useThunk","context","func","React","useContext","state","DialogContentText","forwardRef","props","ref","createElement","Typography","_extends","component","variant","color","withStyles","root","marginBottom","name","Button","styles","ButtonGroup","children","classes","className","_props$color","_props$component","Component","_props$disabled","disabled","_props$disableFocusRi","disableFocusRipple","_props$disableRipple","disableRipple","_props$fullWidth","fullWidth","_props$orientation","orientation","_props$size","size","_props$variant","other","_objectWithoutProperties","buttonClassName","clsx","grouped","concat","capitalize","role","contained","vertical","Children","map","child","isValidElement","cloneElement","theme","display","borderRadius","shape","boxShadow","shadows","width","flexDirection","minWidth","groupedHorizontal","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","groupedVertical","groupedText","groupedTextHorizontal","borderRight","palette","type","groupedTextVertical","borderBottom","groupedTextPrimary","borderColor","fade","primary","main","groupedTextSecondary","secondary","groupedOutlined","groupedOutlinedHorizontal","marginLeft","borderRightColor","groupedOutlinedVertical","marginTop","borderBottomColor","groupedOutlinedPrimary","groupedOutlinedSecondary","groupedContained","groupedContainedHorizontal","grey","action","groupedContainedVertical","groupedContainedPrimary","dark","groupedContainedSecondary","CardNameAutocomplete","label","onNameSelect","useState","value","setValue","open","setOpen","options","setOptions","isLoading","setIsLoading","undefined","typingTimer","setTypingTimer","onChange","newValue","useEffect","Autocomplete","style","onOpen","onClose","_","val","onInputChange","e","reason","clearTimeout","setTimeout","length","Scry","Cards","then","names","toLowerCase","includes","loading","renderInput","params","TextField","InputProps","endAdornment","Fragment","CircularProgress","PreviewRow","styled","div","p","spacing","AddDeck","history","useHistory","AppState","createNewDeck","GoogleApi","importText","setImportText","deckName","setDeckName","invalidName","setInvalidName","previewUrl","setPreviewUrl","handleClose","handleImport","fileContent","push","RouteNames","Deck","encodeURIComponent","validateName","indexOf","decks","error","helperText","target","Named","card","getImage","Avatar","alt","src","onClick","Dialog","aria-labelledby","maxWidth","DialogTitle","id","DialogContent","autoFocus","multiline","rows","DialogActions"],"mappings":"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","file":"static/js/10.b17f5ae0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const useThunk = <StateT, DispatchT, Func>(\r\n    context: React.Context<[StateT, React.Dispatch<DispatchT>]>,\r\n    func: (dispatch: React.Dispatch<DispatchT>, state: StateT) => Func\r\n) => {\r\n    const [state, dispatch] = React.useContext(context);\r\n    return func(dispatch, state);\r\n};\r\nexport default useThunk;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    marginBottom: 12\n  }\n};\nvar DialogContentText = React.forwardRef(function DialogContentText(props, ref) {\n  return React.createElement(Typography, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContentText'\n})(DialogContentText);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport { fade } from '../styles/colorManipulator';\nimport withStyles from '../styles/withStyles';\nimport Button from '../Button'; // Force a side effect so we don't have any override priority issue.\n// eslint-disable-next-line no-unused-expressions\n\nButton.styles;\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"contained\"`. */\n    contained: {\n      boxShadow: theme.shadows[2]\n    },\n\n    /* Pseudo-class applied to child elements if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: {\n      flexDirection: 'column'\n    },\n\n    /* Styles applied to the children. */\n    grouped: {\n      minWidth: 40\n    },\n\n    /* Styles applied to the children if `orientation=\"horizontal\"`. */\n    groupedHorizontal: {\n      '&:not(:first-child)': {\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0\n      },\n      '&:not(:last-child)': {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0\n      }\n    },\n\n    /* Styles applied to the children if `orientation=\"vertical\"`. */\n    groupedVertical: {\n      '&:not(:first-child)': {\n        borderTopRightRadius: 0,\n        borderTopLeftRadius: 0\n      },\n      '&:not(:last-child)': {\n        borderBottomRightRadius: 0,\n        borderBottomLeftRadius: 0\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"text\"`. */\n    groupedText: {},\n\n    /* Styles applied to the children if `variant=\"text\"` and `orientation=\"horizontal\"`. */\n    groupedTextHorizontal: {\n      '&:not(:last-child)': {\n        borderRight: \"1px solid \".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)')\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"text\"` and `orientation=\"vertical\"`. */\n    groupedTextVertical: {\n      '&:not(:last-child)': {\n        borderBottom: \"1px solid \".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)')\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"text\"` and `color=\"primary\"`. */\n    groupedTextPrimary: {\n      '&:not(:last-child)': {\n        borderColor: fade(theme.palette.primary.main, 0.5)\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"text\"` and `color=\"secondary\"`. */\n    groupedTextSecondary: {\n      '&:not(:last-child)': {\n        borderColor: fade(theme.palette.secondary.main, 0.5)\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"outlined\"`. */\n    groupedOutlined: {},\n\n    /* Styles applied to the children if `variant=\"outlined\"` and `orientation=\"horizontal\"`. */\n    groupedOutlinedHorizontal: {\n      '&:not(:first-child)': {\n        marginLeft: -1\n      },\n      '&:not(:last-child)': {\n        borderRightColor: 'transparent'\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"outlined\"` and `orientation=\"vertical\"`. */\n    groupedOutlinedVertical: {\n      '&:not(:first-child)': {\n        marginTop: -1\n      },\n      '&:not(:last-child)': {\n        borderBottomColor: 'transparent'\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"outlined\"` and `color=\"primary\"`. */\n    groupedOutlinedPrimary: {\n      '&:hover': {\n        borderColor: theme.palette.primary.main\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"outlined\"` and `color=\"secondary\"`. */\n    groupedOutlinedSecondary: {\n      '&:hover': {\n        borderColor: theme.palette.secondary.main\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"contained\"`. */\n    groupedContained: {\n      boxShadow: 'none'\n    },\n\n    /* Styles applied to the children if `variant=\"contained\"` and `orientation=\"horizontal\"`. */\n    groupedContainedHorizontal: {\n      '&:not(:last-child)': {\n        borderRight: \"1px solid \".concat(theme.palette.grey[400]),\n        '&$disabled': {\n          borderRight: \"1px solid \".concat(theme.palette.action.disabled)\n        }\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"contained\"` and `orientation=\"vertical\"`. */\n    groupedContainedVertical: {\n      '&:not(:last-child)': {\n        borderBottom: \"1px solid \".concat(theme.palette.grey[400]),\n        '&$disabled': {\n          borderBottom: \"1px solid \".concat(theme.palette.action.disabled)\n        }\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"contained\"` and `color=\"primary\"`. */\n    groupedContainedPrimary: {\n      '&:not(:last-child)': {\n        borderColor: theme.palette.primary.dark\n      }\n    },\n\n    /* Styles applied to the children if `variant=\"contained\"` and `color=\"secondary\"`. */\n    groupedContainedSecondary: {\n      '&:not(:last-child)': {\n        borderColor: theme.palette.secondary.dark\n      }\n    }\n  };\n};\nvar ButtonGroup = React.forwardRef(function ButtonGroup(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      _props$disableRipple = props.disableRipple,\n      disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'outlined' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"disableFocusRipple\", \"disableRipple\", \"fullWidth\", \"orientation\", \"size\", \"variant\"]);\n\n  var buttonClassName = clsx(classes.grouped, classes[\"grouped\".concat(capitalize(orientation))], classes[\"grouped\".concat(capitalize(variant))], classes[\"grouped\".concat(capitalize(variant)).concat(capitalize(orientation))], classes[\"grouped\".concat(capitalize(variant)).concat(color !== 'default' ? capitalize(color) : '')], disabled && classes.disabled);\n  return React.createElement(Component, _extends({\n    role: \"group\",\n    className: clsx(classes.root, className, fullWidth && classes.fullWidth, variant === 'contained' && classes.contained, orientation === 'vertical' && classes.vertical),\n    ref: ref\n  }, other), React.Children.map(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: the ButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return React.cloneElement(child, {\n      className: clsx(buttonClassName, child.props.className),\n      disabled: child.props.disabled || disabled,\n      color: child.props.color || color,\n      disableFocusRipple: disableFocusRipple,\n      disableRipple: disableRipple,\n      fullWidth: fullWidth,\n      size: child.props.size || size,\n      variant: child.props.variant || variant\n    });\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ButtonGroup.propTypes = {\n  /**\n   * The content of the button group.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the buttons will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the button keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the button ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the buttons will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The group orientation.\n   */\n  orientation: PropTypes.oneOf(['vertical', 'horizontal']),\n\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['text', 'outlined', 'contained'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiButtonGroup'\n})(ButtonGroup);","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Scry from \"../../Utility/Scry\";\r\n\r\ntype Props = {\r\n    label: string;\r\n    onNameSelect?: (name: string) => void;\r\n};\r\n\r\nconst CardNameAutocomplete: React.FC<Props> = ({ label, onNameSelect }) => {\r\n    const [value, setValue] = React.useState<string>(\"\");\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState<string[]>([]);\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n    const [typingTimer, setTypingTimer] = React.useState<number | undefined>(undefined);\r\n\r\n    const onInputChange = (newValue: string, reason: \"input\" | \"reset\" | \"clear\") => {\r\n        if (value === newValue || reason === \"reset\") {\r\n            return;\r\n        }\r\n        setValue(newValue);\r\n\r\n        clearTimeout(typingTimer);\r\n        setTypingTimer(\r\n            setTimeout(() => {\r\n                if (newValue.length < 2) {\r\n                    return;\r\n                }\r\n                setIsLoading(true);\r\n                Scry.Cards.Autocomplete(newValue).then(names => {\r\n                    setOptions(names);\r\n                    setIsLoading(false);\r\n                    if (names.length === 1 && names[0].toLowerCase().includes(newValue.toLowerCase())) {\r\n                        setValue(names[0]);\r\n                        onChange(names[0]);\r\n                        setOpen(false);\r\n                    }\r\n                });\r\n            }, 500)\r\n        );\r\n    };\r\n\r\n    const onChange = (newValue: string) => {\r\n        setValue(newValue);\r\n        setOptions([]);\r\n        onNameSelect && onNameSelect(newValue);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            style={{ width: 300 }}\r\n            open={open}\r\n            value={value}\r\n            onOpen={() => setOpen(true)}\r\n            onClose={() => setOpen(false)}\r\n            onChange={(_: any, val: any) => onChange(val)}\r\n            onInputChange={(e, val, reason) => onInputChange(val, reason)}\r\n            options={options}\r\n            loading={isLoading}\r\n            renderInput={params => (\r\n                <TextField\r\n                    {...params}\r\n                    label={label}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {isLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    );\r\n};\r\nexport default CardNameAutocomplete;\r\n","import { Avatar, Button, ButtonGroup, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField } from \"@material-ui/core\";\nimport CollectionsIcon from \"@material-ui/icons/Collections\";\nimport React from \"react\";\nimport { useHistory } from \"react-router\";\nimport { RouteNames } from \"../../Routes/Routes\";\nimport { AppState } from \"../../State\";\nimport GoogleApi from \"../../Utility/GoogleApi\";\nimport Scry from \"../../Utility/Scry\";\nimport useThunk from \"../../Utility/useThunk\";\nimport CardNameAutocomplete from \"../Styled/CardNameAutocomplete\";\nimport { AppletActions, AppletContent, FlexCol, Title } from \"../Styled/Grid\";\nimport styled from \"../Styled/Theme\";\n\nconst PreviewRow = styled.div`\n    display: flex;\n    margin-top: ${p => p.theme.spacing(1)}px;\n    align-items: center;\n\n    & .MuiAutocomplete-root {\n        flex-grow: 1;\n        margin-right: ${p => p.theme.spacing(1)}px;\n    }\n`;\n\nconst AddDeck: React.FC = () => {\n    const history = useHistory();\n    const [state] = React.useContext(AppState);\n    const createNewDeck = useThunk(AppState, GoogleApi.createNewDeck);\n\n    const [importText, setImportText] = React.useState<string>(\"\");\n    const [deckName, setDeckName] = React.useState<string>(\"\");\n    const [open, setOpen] = React.useState(false);\n    const [invalidName, setInvalidName] = React.useState<string | null>(null);\n\n    const [previewUrl, setPreviewUrl] = React.useState<string>(\"\");\n\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    const handleImport = () => {\n        createNewDeck({ name: deckName, fileContent: importText, previewUrl });\n        history.push(RouteNames.Deck(encodeURIComponent(deckName)));\n    };\n\n    const validateName = (name: string) => {\n        setDeckName(name);\n        if (name === \"\") {\n            setInvalidName(\"Deck name can't be empty\");\n            return;\n        }\n        if (name.indexOf(\"%\") >= 0) {\n            setInvalidName(\"Deck name can't contain '%'\");\n            return;\n        }\n        if (state.decks[name]) {\n            setInvalidName(\"Deck with this name already exists\");\n            return;\n        }\n        setInvalidName(null);\n    };\n\n    const updatePreview = (name: string) => {\n        if (!name) {\n            setPreviewUrl(\"\");\n            return;\n        }\n        Scry.Cards.Named(name).then(card => {\n            setPreviewUrl(Scry.getImage(card, \"art_crop\") ?? \"\");\n        });\n    };\n\n    // eslint-disable-next-line\n    React.useEffect(() => validateName(\"\"), []);\n\n    return (\n        <AppletContent>\n            <Title>Add deck</Title>\n            <FlexCol>\n                <TextField\n                    label=\"Deck name\"\n                    variant=\"outlined\"\n                    error={!!invalidName}\n                    helperText={invalidName}\n                    value={deckName}\n                    onChange={e => validateName(e.target.value)}\n                    fullWidth\n                />\n                <PreviewRow>\n                    <CardNameAutocomplete label=\"Preview card\" onNameSelect={updatePreview} />\n                    <Avatar alt=\"Preview icon\" src={previewUrl}>\n                        <CollectionsIcon />\n                    </Avatar>\n                </PreviewRow>\n            </FlexCol>\n            <AppletActions>\n                <ButtonGroup size=\"small\">\n                    <Button disabled={!!invalidName} onClick={handleClickOpen}>\n                        Import\n                    </Button>\n                    <Button disabled={!!invalidName} color=\"primary\" onClick={handleImport}>\n                        Create empty\n                    </Button>\n                </ButtonGroup>\n            </AppletActions>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"import-deck-dialog\" fullWidth maxWidth=\"md\">\n                <DialogTitle id=\"import-deck-dialog\">Import</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>Paste exported deck below.</DialogContentText>\n                    <TextField\n                        autoFocus\n                        fullWidth\n                        label=\"Import\"\n                        multiline\n                        rows=\"15\"\n                        variant=\"outlined\"\n                        value={importText}\n                        onChange={e => setImportText(e.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleImport} color=\"primary\">\n                        Import\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </AppletContent>\n    );\n};\n\nexport default AddDeck;\n"],"sourceRoot":""}