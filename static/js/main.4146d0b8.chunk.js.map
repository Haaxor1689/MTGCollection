{"version":3,"sources":["Assets/logo.png","State/index.ts","State/Reducers.ts","Utility/CollectionParser.ts","Utility/GoogleApi.ts","Utility/Scry/index.ts","Utility/useEventListener.ts","Components/Styled/Theme.ts","Components/DrawerDeckList.tsx","Components/Styled/CardNameAutocomplete.tsx","Components/Styled/Grid.tsx","Components/Applets/AddDeck.tsx","Utility/Assert.ts","Utility/useCardAction.ts","Components/Styled/IncrementNumber.tsx","Components/Styled/SymbolIcon.tsx","Components/Styled/SymbolTypography.tsx","Components/Previews/CompressedCard.tsx","Components/Styled/IndentedTypography.tsx","Components/Previews/CompressedCollection.tsx","Components/Styled/TooltipButton.tsx","Components/Previews/ActionButtons/ChangeSectionButton.tsx","Components/Previews/ActionButtons/DeleteButton.tsx","Components/Previews/ActionButtons/WishlistButton.tsx","Components/Previews/ImagesCard.tsx","Components/Previews/ImagesCollection.tsx","Components/Styled/SetIcon.tsx","Components/Previews/ListCard.tsx","Components/Previews/ListCollection.tsx","Components/Previews/CollectionPreview.tsx","Components/Previews/Common/PreviewStyleToggle.tsx","Components/Previews/Common/ShowGroupsToggle.tsx","Components/Previews/Common/SortToggle.tsx","Components/Styled/Icons.tsx","Components/Applets/DeckPreview.tsx","Components/Applets/CardSearch.tsx","Components/Applets/UserInfo.tsx","Components/Home.tsx","Components/NotFound.tsx","Components/SignInButton.tsx","Components/SignIn.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DeckName","SectionName","reducers","EmptyCards","sections","reduce","obj","s","Default","initialState","files","Collection","Wishlist","decks","name","cards","cardList","symbolList","setList","selectedDeck","modifierKeys","shift","State","React","createContext","undefined","reducer","state","action","type","link","omit","card","symbols","symbol","sets","code","isDirty","amount","deckName","sectionName","key","value","temp","i","CollectionParser","serialize","collection","split","map","section","index","lines","line","match","filter","isNull","parseInt","comment","prev","val","p","v","deserialize","deck","Object","entries","str","values","GoogleApiInit","apiKey","process","clientId","discoveryDocs","scope","createNewFile","a","async","props","fileContent","folder","file","Blob","metadata","mimeType","appProperties","parents","accessToken","gapi","auth","getToken","access_token","form","FormData","append","JSON","stringify","fetch","method","headers","Headers","Authorization","body","res","json","id","getFileContents","client","drive","get","fileId","alt","deleteFile","delete","createNewDeck","dispatch","restProps","Sideboard","Maybeboard","GoogleApi","initClient","onUpdateStatus","load","init","then","auth2","getAuthInstance","isSignedIn","listen","console","error","getProfile","currentUser","getBasicProfile","signIn","signOut","prepareAppData","list","spaces","fields","response","collectionFile","result","find","f","info","wishlistFile","otherFiles","length","previewUrl","updateFile","deleteDeck","Api","endpoint","Axios","create","baseURL","responseType","Symbology","All","r","data","ParseMana","cost","params","Cards","Autocomplete","q","include_extras","Named","fuzzy","Sets","Scry","getImage","images","layout","card_faces","image_uris","getPlaceholder","cardName","replace","useEventListener","eventName","handler","element","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","MainTheme","createMuiTheme","palette","primary","main","colors","deepOrange","secondary","blueGrey","constants","drawerWidth","drawerWidthClosed","appletHeight","css","ThemeProv","styledCss","styled","baseStyled","StyledItemText","ListItemText","DrawerDeckList","open","useContext","selectDeck","renderItem","icon","Tooltip","title","placement","ListItem","button","onClick","ListItemAvatar","Badge","invisible","color","overlap","badgeContent","anchorOrigin","vertical","horizontal","Avatar","src","List","Divider","CardNameAutocomplete","label","onNameSelect","useState","setValue","setOpen","options","setOptions","isLoading","setIsLoading","typingTimer","setTypingTimer","onChange","newValue","style","width","onOpen","onClose","e","onInputChange","reason","clearTimeout","setTimeout","names","toLowerCase","includes","loading","renderInput","TextField","fullWidth","variant","InputProps","endAdornment","Fragment","CircularProgress","size","FlexCol","div","AppletPaper","Paper","theme","spacing","AppletActions","Title","Typography","attrs","component","gutterBottom","PreviewRow","AddDeck","importText","setImportText","setDeckName","invalidName","setInvalidName","setPreviewUrl","handleClose","handleImport","validateName","Grid","item","xs","sm","md","helperText","target","ButtonGroup","Button","disabled","Dialog","aria-labelledby","maxWidth","DialogTitle","DialogContent","DialogContentText","autoFocus","multiline","rows","DialogActions","assert","condition","message","AssertionError","useCardActions","targetDeck","isOnWishlist","keys","updateCardQuantity","isNullOrUndefined","openScryfallPage","scryfall_uri","toggleWishlist","wishlistTooltip","removeCard","changeSection","newSection","addToDeck","StyledAvatar","className","text","IncrementNumber","stopPropagation","Symbol","svg","SymbolIcon","symbolObj","setSymbolObj","loose_variant","dangerouslySetInnerHTML","__html","SymbolTypography","typographyProps","parsed","setParsed","m","CustomChip","Chip","CompressedCard","deleteIcon","mana_cost","noWrap","avatar","onDelete","IndentedTypography","CompressedCollecion","sortBy","sortOrder","showGroups","container","direction","c","zeroMinWidth","StyledIconButton","IconButton","background","dark","TooltipButton","children","aria-label","ChangeSectionButton","actions","anchorRef","contains","ref","prevOpen","Popper","anchorEl","role","transition","TransitionProps","Grow","transformOrigin","elevation","ClickAwayListener","onClickAway","MenuList","MenuItem","DeleteButton","WishlistButton","Body","Image","img","IncrementActions","BottomActions","ActionsMenu","ImagesCard","actionsOpen","setActionsOpen","Fab","ImagesCollecion","alignItems","lg","xl","Set","rarity","SetIcon","set","setObj","setSetObj","offset","stopColor","gradientTransform","icon_svg","Actions","ListCard","TableRow","NumberCell","align","TableCell","Link","href","type_line","CustomPaddingTable","Table","ListCollecion","TableHead","TableBody","colSpan","desc","b","orderBy","func","getSorting","order","StableSort","array","cmp","stabilizedThis","el","sort","rarityOrder","GetSortFunction","indexOf","CollectionPreview","passedProps","renderCollection","PreviewStyleToggle","onToggle","Error","IconForStyle","ShowGroupsToggle","show","setShow","SortToggle","setSortBy","setSortOrder","startIcon","by","selected","IconWrap","CompressIcon","faCompressAlt","ExpandIcon","faExpandAlt","GoogleIcon","faGoogle","ClipboardIcon","faClipboard","SectionRow","ExportRow","DeckPreview","expanded","setExpanded","exportOpened","setExportOpened","setStyle","setShowGroups","missingCards","byName","on","justify","copy","readOnly","CardSearch","setCardName","autoompleteOptions","setAutocompleteOptions","dialogOpen","setDialogOpen","closeDialog","g","u","w","colorExactMatch","cmc","cmcType","setFilter","handleColors","newFilter","checked","freeSolo","autoHighlight","disableClearable","inputValue","FormGroup","row","FormControlLabel","control","Checkbox","alert","UserInfo","Home","Container","NotFound","SignInButton","SignIn","padding","Logo","height","draggable","bodyOpen","transitions","easing","sharp","duration","enteringScreen","bodyClose","leavingScreen","CustomAppBar","AppBar","zIndex","drawer","MenuButton","drawerOpen","drawerClose","CustomDrawer","Drawer","DrawerToolbar","Toolbar","MainContent","ProfileAvatar","App","useReducer","profile","setProfile","setIsSignedIn","Promise","all","svg_uri","responses","parse","config","icon_svg_uri","Provider","position","edge","getGivenName","getEmail","getImageUrl","basename","to","exact","path","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StylesProvider","injectFirst","CssBaseline","document","getElementById","URL","origin","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4146d0b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.81aa9e7e.png\";","import React from \"react\";\nimport Scry from \"scryfall-sdk\";\nimport DeepReadonly from \"../Utility/DeepReadonly\";\nimport { ScryCardSymbol, ScrySet } from \"../Utility/Scry/Types\";\nimport { Action } from \"./Actions\";\n\nexport enum DeckName {\n    Collection = \"_collection\",\n    Wishlist = \"_wishlist\",\n}\n\nexport enum SectionName {\n    Default = \"_default\",\n    Sideboard = \"Sideboard\",\n    Maybeboard = \"Maybeboard\",\n}\n\nexport const EmptyCards = (...sections: string[]): DeckCards => sections.reduce((obj, s) => ({ ...obj, [s]: {} }), { [SectionName.Default]: {} });\n\nexport type DeckCardList = DeepReadonly<{\n    [cardName: string]: DeckCard;\n}>;\n\nexport type DeckCards = DeepReadonly<{\n    [SectionName.Default]: DeckCardList;\n    [section: string]: DeckCardList;\n}>;\n\nexport type DeckCard = DeepReadonly<{\n    amount: number;\n    name: string;\n    comment?: string;\n}>;\n\nexport type DeckProps = Omit<Deck, \"cards\">;\n\nexport type Deck = DeepReadonly<{\n    name: string;\n    previewUrl?: string;\n    cards: DeckCards;\n    isDirty?: boolean;\n}>;\n\nexport type FileIds = DeepReadonly<{\n    [DeckName.Collection]: string;\n    [DeckName.Wishlist]: string;\n    [deckName: string]: string;\n}>;\n\nexport type Decks = DeepReadonly<{\n    [DeckName.Collection]: Deck;\n    [DeckName.Wishlist]: Deck;\n    [deckName: string]: Deck;\n}>;\n\nexport type CardList = DeepReadonly<{\n    [cardName: string]: Scry.Card;\n}>;\n\nexport type SymbolList = DeepReadonly<{\n    [symbol: string]: ScryCardSymbol;\n}>;\n\nexport type SetList = DeepReadonly<{\n    [setName: string]: ScrySet;\n}>;\n\nexport type ModifierKeys = DeepReadonly<{\n    shift: boolean;\n}>\n\nexport type AppState = DeepReadonly<{\n    files: FileIds;\n    decks: Decks;\n    cardList: CardList;\n    symbolList: SymbolList;\n    setList: SetList;\n    selectedDeck: string | null;\n    modifierKeys: ModifierKeys;\n}>;\n\nexport const initialState: AppState = {\n    files: {\n        [DeckName.Collection]: \"\",\n        [DeckName.Wishlist]: \"\",\n    },\n    decks: {\n        [DeckName.Collection]: { name: DeckName.Collection, cards: EmptyCards() },\n        [DeckName.Wishlist]: { name: DeckName.Wishlist, cards: EmptyCards() },\n    },\n    cardList: {},\n    symbolList: {},\n    setList: {},\n    selectedDeck: null,\n    modifierKeys: {\n        shift: false,\n    }\n};\n\nexport const State = React.createContext<[AppState, React.Dispatch<Action>]>([initialState, undefined as any]);\n","import { omit } from \"lodash\";\nimport { AppState, CardList, Decks, EmptyCards, FileIds, ModifierKeys, SetList, SymbolList } from \".\";\nimport { Action } from \"./Actions\";\n\nconst filesReducer = (state: FileIds, action: Action): FileIds => {\n    switch (action.type) {\n        case \"CreateDeck\":\n            return {\n                ...state,\n                [action.name]: action.link,\n            };\n        case \"DeleteDeck\":\n            return { ...omit(state, [action.name]) } as FileIds;\n    }\n    return state;\n};\n\nconst cardListReducer = (state: CardList, action: Action): CardList => {\n    switch (action.type) {\n        case \"AddCard\":\n            return {\n                ...state,\n                [action.card.name]: action.card,\n            };\n    }\n    return state;\n};\n\nconst symbolListReducer = (state: SymbolList, action: Action): SymbolList => {\n    switch (action.type) {\n        case \"AddSymbols\":\n            return action.symbols.reduce((obj, s) => ({ ...obj, [s.symbol]: s }), {});\n    }\n    return state;\n};\n\nconst setListReducer = (state: SetList, action: Action): SetList => {\n    switch (action.type) {\n        case \"AddSets\":\n            return action.sets.reduce((obj, s) => ({ ...obj, [s.code]: s }), {});\n    }\n    return state;\n};\n\nconst decksReducer = (state: Decks, action: Action): Decks => {\n    switch (action.type) {\n        case \"CreateDeck\":\n            return {\n                ...state,\n                [action.name]: {\n                    cards: EmptyCards(),\n                    ...omit(action, [\"type\", \"link\"]),\n                },\n            };\n        case \"UpdateDeck\":\n            return {\n                ...state,\n                [action.name]: {\n                    ...state[action.name],\n                    isDirty: true,\n                    ...omit(action, [\"type\"]),\n                },\n            };\n        case \"UpdateDeckCard\":\n            if (action.card.amount === 0) {\n                return {\n                    ...state,\n                    [action.deckName]: {\n                        ...state[action.deckName],\n                        cards: {\n                            ...state[action.deckName].cards,\n                            [action.sectionName]: omit(state[action.deckName].cards[action.sectionName], action.card.name),\n                        },\n                        isDirty: true,\n                    },\n                };\n            }\n            return {\n                ...state,\n                [action.deckName]: {\n                    ...state[action.deckName],\n                    cards: {\n                        ...state[action.deckName].cards,\n                        [action.sectionName]: {\n                            ...state[action.deckName].cards[action.sectionName],\n                            [action.card.name]: {\n                                ...state[action.deckName].cards[action.sectionName][action.card.name],\n                                ...action.card,\n                            },\n                        },\n                    },\n                    isDirty: true,\n                },\n            };\n        case \"DeleteDeck\":\n            return { ...omit(state, [action.name]) } as Decks;\n    }\n    return state;\n};\n\nconst selectedDeckReducer = (state: string | null, action: Action): string | null => {\n    switch (action.type) {\n        case \"SelectDeck\":\n            return action.name;\n        case \"DeleteDeck\":\n            return action.name === state ? null : state;\n    }\n    return state;\n};\n\nconst modifierKeysReducer = (state: ModifierKeys, action: Action): ModifierKeys => {\n    switch (action.type) {\n        case \"SetModifierKey\":\n            return {\n                ...state,\n                [action.key]: action.value,\n            };\n    }\n    return state;\n};\n\nconst combineReducers = <State, Action>(reducers: { [P in keyof State]: (state: State[P], action: Action) => State[P] }) => {\n    return (state: State, action: Action) => {\n        const temp: State = {} as any;\n        for (const i in reducers) {\n            temp[i] = reducers[i](state[i], action);\n        }\n        return temp;\n    };\n};\n\nexport const reducer = combineReducers<AppState, Action>({\n    files: filesReducer,\n    cardList: cardListReducer,\n    symbolList: symbolListReducer,\n    setList: setListReducer,\n    decks: decksReducer,\n    selectedDeck: selectedDeckReducer,\n    modifierKeys: modifierKeysReducer,\n});\n","import { isNull } from \"lodash\";\nimport { DeckCard, DeckCards, EmptyCards, SectionName } from \"../State\";\n\nconst serialize = (collection?: string, ...sections: string[]): DeckCards => {\n    if (!collection || collection === \"\") {\n        return EmptyCards(...sections);\n    }\n    return collection\n        .split(\"##\")\n        .map((section, index) => {\n            let name: string, lines: string[];\n            if (index === 0) {\n                name = SectionName.Default;\n                lines = section.split(/\\r?\\n/);\n            } else {\n                [name, ...lines] = section.split(/\\r?\\n/);\n            }\n            return [\n                name,\n                lines\n                    .map(line => line.match(/^(\\d*) +(.*?)(?: # (.*))?$/))\n                    .filter(match => !isNull(match))\n                    .map(match => ({\n                        amount: parseInt(match![1]),\n                        name: match![2],\n                        comment: match![3],\n                    })),\n            ] as [string, DeckCard[]];\n        })\n        .reduce(\n            (prev, val) => ({ ...prev, [val[0]]: val[1].reduce((p, v) => ({ ...p, [v.name]: v }), {}) }),\n            EmptyCards(...sections)\n        );\n};\n\nconst deserialize = (deck: DeckCards) =>\n    Object.entries(deck).reduce(\n        (str, section) =>\n            `${str}${section[0] !== SectionName.Default ? `#${section[0]}\\n` : \"\"}${Object.values(section[1]).reduce(\n                (s, card) => `${s}${card.amount} ${card.name}${card.comment ? ` # ${card.comment}` : \"\"}\\n`,\n                \"\"\n            )}\\n`,\n        \"\"\n    );\n\nconst CollectionParser = {\n    serialize,\n    deserialize,\n};\n\nexport default CollectionParser;\n","/* global gapi */\nimport React from \"react\";\nimport { DeckName, DeckProps, SectionName } from \"../State\";\nimport { Action } from \"../State/Actions\";\nimport CollectionParser from \"./CollectionParser\";\n\nconst GoogleApiInit = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    clientId: process.env.REACT_APP_CLIENT_ID,\n    discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"],\n    scope: \"profile https://www.googleapis.com/auth/drive.appdata https://www.googleapis.com/auth/drive.file\",\n};\n\nconst initClient = (onUpdateStatus: (isSignedIn: boolean) => void) => {\n    gapi.load(\"client:auth2\", () => {\n        gapi.client.init(GoogleApiInit).then(() => {\n            gapi.auth2.getAuthInstance().isSignedIn.listen(onUpdateStatus);\n            onUpdateStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n        }, console.error);\n    });\n};\n\nconst prepareAppData = () => async (dispatch: React.Dispatch<Action>) => {\n    var response = await gapi.client.drive.files.list({\n        spaces: \"appDataFolder\",\n        fields: \"nextPageToken, files(id, name, appProperties)\",\n    });\n\n    const collectionFile = response.result?.files?.find(f => f.appProperties?.name === DeckName.Collection);\n    if (!collectionFile) {\n        console.info(\"Creating collection...\");\n        createNewDeck(dispatch, { name: DeckName.Collection });\n    } else {\n        console.info(\"Loading collection...\");\n        dispatch({ type: \"CreateDeck\", name: DeckName.Collection, link: collectionFile.id! });\n        dispatch({\n            type: \"UpdateDeck\",\n            name: DeckName.Collection,\n            cards: CollectionParser.serialize(await getFileContents({ id: collectionFile.id! })),\n            isDirty: false,\n        });\n    }\n\n    const wishlistFile = response.result?.files?.find(f => f.appProperties?.name === DeckName.Wishlist);\n    if (!wishlistFile) {\n        console.info(\"Creating wishlist...\");\n        createNewDeck(dispatch, { name: DeckName.Wishlist });\n    } else {\n        console.info(\"Loading wishlist...\");\n        dispatch({ type: \"CreateDeck\", name: DeckName.Wishlist, link: wishlistFile.id! });\n        dispatch({\n            type: \"UpdateDeck\",\n            name: DeckName.Wishlist,\n            cards: CollectionParser.serialize(await getFileContents({ id: wishlistFile.id! })),\n            isDirty: false,\n        });\n    }\n\n    const otherFiles = response.result?.files?.filter(f => f.appProperties?.name !== DeckName.Collection && f.appProperties?.name !== DeckName.Wishlist)!;\n    for (let i = 0; i < otherFiles.length; i++) {\n        const file = otherFiles[i];\n        const name = file.appProperties?.name ?? file.name?.match(/(.*?)\\.txt/)?.[0] ?? \"unnamed\";\n        dispatch({ type: \"CreateDeck\", name, link: file.id! });\n        dispatch({\n            type: \"UpdateDeck\",\n            name,\n            previewUrl: file.appProperties?.previewUrl,\n            cards: CollectionParser.serialize(await getFileContents({ id: file.id! }), SectionName.Sideboard, SectionName.Maybeboard),\n            isDirty: false,\n        });\n    }\n};\n\nconst createNewFile = async ({\n    name,\n    props,\n    fileContent,\n    folder,\n}: {\n    name: string;\n    props?: object;\n    fileContent?: string;\n    folder?: string[];\n}): Promise<string> => {\n    const file = new Blob([fileContent ?? \"\"], { type: \"text/plain\" });\n    const metadata = {\n        name,\n        mimeType: \"text/plain\",\n        appProperties: props ?? {},\n        parents: [\"appDataFolder\", ...(folder ?? [])],\n    };\n\n    const accessToken = gapi.auth.getToken().access_token;\n    const form = new FormData();\n    form.append(\"metadata\", new Blob([JSON.stringify(metadata)], { type: \"application/json\" }));\n    form.append(\"file\", file);\n\n    const res = await fetch(\"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id\", {\n        method: \"POST\",\n        headers: new Headers({ Authorization: \"Bearer \" + accessToken }),\n        body: form,\n    });\n    const val = await res.json();\n    return val.id;\n};\n\nconst updateFile = async ({ id, fileContent }: { id: string; fileContent: string }) => {\n    const file = new Blob([fileContent], { type: \"text/plain\" });\n\n    const accessToken = gapi.auth.getToken().access_token;\n    const form = new FormData();\n    form.append(\"file\", file);\n\n    const res = await fetch(`https://www.googleapis.com/upload/drive/v3/files/${id}?uploadType=media&fields=id`, {\n        method: \"PATCH\",\n        headers: new Headers({ Authorization: \"Bearer \" + accessToken }),\n        body: form,\n    });\n    const val = await res.json();\n    return val.id;\n};\n\nconst getFileContents = async ({ id }: { id: string }) => {\n    const res = await gapi.client.drive.files.get({\n        fileId: id,\n        alt: \"media\",\n    });\n    return res.body;\n};\n\nconst deleteFile = async ({ id }: { id: string }) => gapi.client.drive.files.delete({ fileId: id });\n\nconst createNewDeck = async (dispatch: React.Dispatch<Action>, { name, fileContent, ...restProps }: DeckProps & { fileContent?: string }) => {\n    dispatch({\n        type: \"CreateDeck\",\n        name,\n        link: await createNewFile({\n            name: `${name}.txt`,\n            props: {\n                name,\n                ...restProps,\n            },\n            fileContent,\n        }),\n        cards: CollectionParser.serialize(fileContent, SectionName.Sideboard, SectionName.Maybeboard),\n        isDirty: false,\n        ...restProps,\n    });\n};\n\nconst deleteDeck = async (dispatch: React.Dispatch<Action>, { name, id }: { name: string; id: string }) => {\n    await deleteFile({ id });\n    dispatch({ type: \"DeleteDeck\", name });\n};\n\nconst getProfile = () => {\n    return gapi.auth2\n        .getAuthInstance()\n        .currentUser.get()\n        .getBasicProfile();\n};\n\nconst signIn = () => gapi.auth2.getAuthInstance().signIn();\nconst signOut = () => gapi.auth2.getAuthInstance().signOut();\n\nexport type GoogleProfile = gapi.auth2.BasicProfile;\n\nconst GoogleApi = {\n    initClient,\n    getProfile,\n    signIn,\n    signOut,\n    prepareAppData,\n    createNewFile,\n    updateFile,\n    deleteFile,\n    createNewDeck,\n    deleteDeck,\n    getFileContents,\n};\nexport default GoogleApi;\n","import ScrySdk from \"scryfall-sdk\";\nimport DeepReadonly from \"../DeepReadonly\";\nimport Axios from \"axios\";\nimport { ScryCardSymbol, ScryManaCost, ScrySet } from \"./Types\";\n\ntype List<T = any> = {\n    data: T[];\n};\n\nconst Api = (() => {\n    let endpoint = Axios.create({\n        baseURL: \"https://api.scryfall.com\",\n        responseType: \"json\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    return {\n        endpoint,\n        Symbology: {\n            All: () => endpoint.get<List<ScryCardSymbol>>(\"/symbology\").then(r => r.data.data),\n            ParseMana: (cost: string) => endpoint.get<ScryManaCost>(\"/symbology/parse-mana\", { params: { cost } }).then(r => r.data),\n        },\n        Cards: {\n            Autocomplete: (q: string) =>\n                endpoint\n                    .get<List<string>>(\"/cards/autocomplete\", { params: { q, include_extras: true } })\n                    .then(r => r.data.data),\n            Named: (fuzzy: string) => endpoint.get<ScrySdk.Card>(\"/cards/named\", { params: { fuzzy } }).then(r => r.data),\n        },\n        Sets: {\n            All: () => endpoint.get<List<ScrySet>>(\"/sets\").then(r => r.data.data),\n        }\n    };\n})();\n\nconst getImage = (card: DeepReadonly<ScrySdk.Card>, type: keyof ScrySdk.ImageUris): string | null => {\n    var images: ScrySdk.ImageUris | null | undefined;\n    switch (card.layout) {\n        case \"transform\":\n        case \"double_faced_token\":\n            images = card.card_faces![0].image_uris;\n            break;\n        default:\n            images = card.image_uris;\n    }\n    return images?.[type] ?? null;\n};\n\nconst getPlaceholder = (cardName: string): string => `https://via.placeholder.com/146x204?text=${cardName.replace(/\\s/, \"+\")}`;\n\nconst Scry = {\n    ...Api,\n    getImage,\n    getPlaceholder,\n};\nexport default Scry;\n","import React from \"react\";\r\n\r\nconst useEventListener = <K extends keyof WindowEventMap>(eventName: K, handler: (this: Window, ev: WindowEventMap[K]) => any, element = window) => {\r\n    const savedHandler = React.useRef<any>();\r\n    \r\n    React.useEffect(() => {\r\n        savedHandler.current = handler;\r\n    }, [handler]);\r\n\r\n    React.useEffect(\r\n        () => {\r\n            if (!element || !element.addEventListener) return;\r\n            const eventListener = (event: WindowEventMap[K]) => savedHandler.current(event);\r\n            element.addEventListener(eventName, eventListener);\r\n            return () => {\r\n                element.removeEventListener(eventName, eventListener);\r\n            };\r\n        },\r\n        [eventName, element]\r\n    );\r\n};\r\nexport default useEventListener;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport baseStyled, { css as styledCss, ThemedStyledInterface, ThemedStyledProps, ThemeProvider as ThemeProv } from \"styled-components\";\r\nimport { colors } from \"@material-ui/core\";\r\n\r\nconst additionalArgs = {\r\n    constants: {\r\n        drawerWidth: \"260px\",\r\n        drawerWidthClosed: \"72px\",\r\n        appletHeight: \"280px\",\r\n    },\r\n};\r\n\r\nexport const MainTheme = createMuiTheme(\r\n    {\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: colors.deepOrange[700] },\r\n            secondary: { main: colors.blueGrey[500] },\r\n        },\r\n    },\r\n    additionalArgs\r\n);\r\n\r\nexport const ThemeProvider = ThemeProv;\r\nexport const css = styledCss;\r\n\r\nexport type Theme = typeof MainTheme & typeof additionalArgs;\r\nexport type ComponentProps<T = {}> = ThemedStyledProps<T, Theme>;\r\nconst styled = baseStyled as ThemedStyledInterface<Theme>;\r\nexport default styled;\r\n","import { Avatar, Badge, Divider, List, ListItem, ListItemAvatar, ListItemText, Tooltip } from \"@material-ui/core\";\r\nimport CollectionsIcon from \"@material-ui/icons/Collections\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport React from \"react\";\r\nimport { Deck, DeckName, State } from \"../State\";\r\nimport styled from \"./Styled/Theme\";\r\n\r\nconst StyledItemText = styled(ListItemText)`\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n`;\r\n\r\ntype Props = {\r\n    open: boolean;\r\n};\r\n\r\nconst DrawerDeckList: React.FC<Props> = ({ open }) => {\r\n    const [state, dispatch] = React.useContext(State);\r\n    const selectDeck = (name: string) => () => {\r\n        dispatch({ type: \"SelectDeck\", name });\r\n    };\r\n\r\n    const renderItem = (deck: Deck, name?: string, icon?: JSX.Element) => (\r\n        <Tooltip key={deck.name} title={open ? \"\" : (state.decks[deck.name].isDirty ? \"*\" : \"\") + (name ?? deck.name)} placement=\"right\">\r\n            <ListItem button onClick={selectDeck(deck.name)}>\r\n                <ListItemAvatar>\r\n                    <Badge\r\n                        invisible={!state.decks[deck.name].isDirty}\r\n                        color=\"primary\"\r\n                        overlap=\"circle\"\r\n                        badgeContent=\" \"\r\n                        anchorOrigin={{\r\n                            vertical: \"bottom\",\r\n                            horizontal: \"right\",\r\n                        }}\r\n                    >\r\n                        <Avatar alt={name ?? deck.name} src={deck.previewUrl}>\r\n                            {icon ?? <CollectionsIcon />}\r\n                        </Avatar>\r\n                    </Badge>\r\n                </ListItemAvatar>\r\n                <StyledItemText primary={name ?? deck.name} />\r\n            </ListItem>\r\n        </Tooltip>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {renderItem(state.decks[DeckName.Collection], \"Collection\")}\r\n                {renderItem(state.decks[DeckName.Wishlist], \"Wishlist\", <FavoriteIcon />)}\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                {Object.values(state.decks)\r\n                    .filter(deck => deck.name !== DeckName.Collection && deck.name !== DeckName.Wishlist)\r\n                    .map(deck => renderItem(deck))}\r\n            </List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DrawerDeckList;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Scry from \"../../Utility/Scry\";\r\n\r\ntype Props = {\r\n    label: string;\r\n    onNameSelect?: (name: string) => void;\r\n};\r\n\r\nconst CardNameAutocomplete: React.FC<Props> = ({ label, onNameSelect }) => {\r\n    const [value, setValue] = React.useState<string>(\"\");\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState<string[]>([]);\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n    const [typingTimer, setTypingTimer] = React.useState<number | undefined>(undefined);\r\n\r\n    const onInputChange = (newValue: string, reason: \"input\" | \"reset\") => {\r\n        if (value === newValue || reason === \"reset\") {\r\n            return;\r\n        }\r\n        setValue(newValue);\r\n\r\n        clearTimeout(typingTimer);\r\n        setTypingTimer(\r\n            setTimeout(() => {\r\n                if (newValue.length < 2) {\r\n                    return;\r\n                }\r\n                setIsLoading(true);\r\n                Scry.Cards.Autocomplete(newValue).then(names => {\r\n                    setOptions(names);\r\n                    setIsLoading(false);\r\n                    if (names.length === 1 && names[0].toLowerCase().includes(newValue.toLowerCase())) {\r\n                        setValue(names[0]);\r\n                        onChange(names[0]);\r\n                        setOpen(false);\r\n                    }\r\n                });\r\n            }, 500)\r\n        );\r\n    };\r\n\r\n    const onChange = (newValue: string) => {\r\n        setValue(newValue);\r\n        setOptions([]);\r\n        onNameSelect && onNameSelect(newValue);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            style={{ width: 300 }}\r\n            open={open}\r\n            value={value}\r\n            onOpen={() => setOpen(true)}\r\n            onClose={() => setOpen(false)}\r\n            onChange={(e, val) => onChange(val)}\r\n            onInputChange={(e, val, reason) => onInputChange(val, reason)}\r\n            options={options}\r\n            loading={isLoading}\r\n            renderInput={params => (\r\n                <TextField\r\n                    {...params}\r\n                    label={label}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {isLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    );\r\n};\r\nexport default CardNameAutocomplete;\r\n","import { Paper, Typography } from \"@material-ui/core\";\r\nimport styled from \"./Theme\";\r\n\r\nexport const FlexCol = styled.div`\r\n    flex: 1 1 auto;\r\n`;\r\n\r\nexport const AppletPaper = styled(Paper)`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n    min-height: ${p => p.theme.constants.appletHeight};\r\n    padding: ${p => p.theme.spacing(2)}px;\r\n`;\r\n\r\nexport const AppletActions = styled.div`\r\n    align-self: flex-end;\r\n`;\r\n\r\nexport const Title = styled(Typography).attrs(p => ({\r\n    component: \"h2\",\r\n    variant: \"h6\",\r\n    color: \"primary\",\r\n    gutterBottom: true,\r\n}))``;\r\n","import { Avatar, Button, ButtonGroup, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, TextField } from \"@material-ui/core\";\nimport CollectionsIcon from \"@material-ui/icons/Collections\";\nimport React from \"react\";\nimport { State } from \"../../State\";\nimport GoogleApi from \"../../Utility/GoogleApi\";\nimport Scry from \"../../Utility/Scry\";\nimport CardNameAutocomplete from \"../Styled/CardNameAutocomplete\";\nimport { AppletActions, AppletPaper, FlexCol, Title } from \"../Styled/Grid\";\nimport styled from \"../Styled/Theme\";\n\nconst PreviewRow = styled.div`\n    display: flex;\n    margin-top: ${p => p.theme.spacing(1)}px;\n    align-items: center;\n\n    & .MuiAutocomplete-root {\n        flex-grow: 1;\n        margin-right: ${p => p.theme.spacing(1)}px;\n    }\n`;\n\nconst AddDeck: React.FC = () => {\n    const [state, dispatch] = React.useContext(State);\n\n    const [importText, setImportText] = React.useState<string>(\"\");\n    const [deckName, setDeckName] = React.useState<string>(\"\");\n    const [open, setOpen] = React.useState(false);\n    const [invalidName, setInvalidName] = React.useState<string | null>(null);\n\n    const [previewUrl, setPreviewUrl] = React.useState<string>(\"\");\n\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    const handleImport = () => {\n        setOpen(false);\n        GoogleApi.createNewDeck(dispatch, { name: deckName, fileContent: importText, previewUrl });\n        setImportText(\"\");\n        validateName(\"\");\n        setPreviewUrl(\"\");\n    };\n\n    const validateName = (name: string) => {\n        setDeckName(name);\n        if (name === \"\") {\n            setInvalidName(\"Deck name can't be empty\");\n            return;\n        }\n        if (state.decks[name]) {\n            setInvalidName(\"Deck with this name already exists\");\n            return;\n        }\n        setInvalidName(null);\n    };\n\n    const updatePreview = (name: string) => {\n        if (!name) {\n            setPreviewUrl(\"\");\n            return;\n        }\n        Scry.Cards.Named(name).then(card => {\n            setPreviewUrl(Scry.getImage(card, \"art_crop\") ?? \"\");\n        });\n    };\n\n    React.useEffect(() => validateName(\"\"), []);\n\n    return (\n        <Grid item xs={12} sm={6} md={4}>\n            <AppletPaper>\n                <Title>Add deck</Title>\n                <FlexCol>\n                    <TextField\n                        label=\"Deck name\"\n                        variant=\"outlined\"\n                        error={!!invalidName}\n                        helperText={invalidName}\n                        value={deckName}\n                        onChange={e => validateName(e.target.value)}\n                        fullWidth\n                    />\n                    <PreviewRow>\n                        <CardNameAutocomplete label=\"Preview card\" onNameSelect={updatePreview} />\n                        <Avatar alt=\"Preview icon\" src={previewUrl}>\n                            <CollectionsIcon />\n                        </Avatar>\n                    </PreviewRow>\n                </FlexCol>\n                <AppletActions>\n                    <ButtonGroup size=\"small\">\n                        <Button disabled={!!invalidName} onClick={handleClickOpen}>\n                            Import\n                        </Button>\n                        <Button disabled={!!invalidName} color=\"primary\" onClick={handleImport}>\n                            Create empty\n                        </Button>\n                    </ButtonGroup>\n                </AppletActions>\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"import-deck-dialog\" fullWidth maxWidth=\"md\">\n                    <DialogTitle id=\"import-deck-dialog\">Import</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>Paste exported deck below.</DialogContentText>\n                        <TextField\n                            autoFocus\n                            fullWidth\n                            label=\"Import\"\n                            multiline\n                            rows=\"15\"\n                            variant=\"outlined\"\n                            value={importText}\n                            onChange={e => setImportText(e.target.value)}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={handleImport} color=\"primary\">\n                            Import\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </AppletPaper>\n        </Grid>\n    );\n};\n\nexport default AddDeck;\n","import { AssertionError } from \"assert\";\r\n\r\nfunction assert(condition: any, message: string): asserts condition {\r\n    if (!condition) {\r\n        throw new AssertionError({ message });\r\n    }\r\n}\r\nexport default assert;","import React from \"react\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport { CollectionCardProps } from \"../Components/Previews/CollectionPreview\";\r\nimport { DeckName, SectionName, State } from \"../State\";\r\nimport assert from \"./Assert\";\r\n\r\nconst useCardActions = ({ card, deckName, sectionName }: CollectionCardProps) => {\r\n    const [state, dispatch] = React.useContext(State);\r\n\r\n    const targetDeck = deckName ?? state.selectedDeck ?? null;\r\n    const isOnWishlist = () => state.decks[DeckName.Wishlist].cards[SectionName.Default][card.name] !== undefined;\r\n    const sections = (targetDeck ? Object.keys(state.decks[targetDeck].cards) : []).filter(s => s !== sectionName);\r\n    return {\r\n        updateCardQuantity: (val: number) => {\r\n            assert(!isNullOrUndefined(deckName), \"DeckName should not be empty if the preview actions are Deck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: sectionName ?? SectionName.Default,\r\n                card: {\r\n                    ...card,\r\n                    amount: val,\r\n                },\r\n            });\r\n        },\r\n        openScryfallPage: () => card.scryfall_uri && window.open(card.scryfall_uri, \"_blank\"),\r\n        isOnWishlist,\r\n        toggleWishlist: () =>\r\n            isOnWishlist()\r\n                ? dispatch({\r\n                    type: \"UpdateDeckCard\",\r\n                    deckName: DeckName.Wishlist,\r\n                    sectionName: SectionName.Default,\r\n                    card: {\r\n                        ...card,\r\n                        amount: 0,\r\n                    },\r\n                })\r\n                : dispatch({\r\n                    type: \"UpdateDeckCard\",\r\n                    deckName: DeckName.Wishlist,\r\n                    sectionName: SectionName.Default,\r\n                    card: {\r\n                        ...card,\r\n                        amount: 1,\r\n                    },\r\n                }),\r\n        wishlistTooltip: () => (isOnWishlist() ? \"Remove from wishlist\" : \"Add to wishlist\"),\r\n        removeCard: () => {\r\n            assert(!isNullOrUndefined(deckName), \"DeckName should not be empty if the preview actions are Deck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: sectionName ?? SectionName.Default,\r\n                card: {\r\n                    ...card,\r\n                    amount: 0,\r\n                },\r\n            });\r\n        },\r\n        sections,\r\n        changeSection: (newSection: string) => {\r\n            assert(!isNullOrUndefined(deckName), \"DeckName should not be empty if the preview actions are Deck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: sectionName ?? SectionName.Default,\r\n                card: {\r\n                    ...card,\r\n                    amount: 0,\r\n                },\r\n            });\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: newSection,\r\n                card: {\r\n                    ...card,\r\n                    amount: card.amount,\r\n                },\r\n            });\r\n        },\r\n        addToDeck: (section: string = SectionName.Default) => {\r\n            assert(!isNullOrUndefined(targetDeck), \"TargetDeck should not be empty if the preview actions are SearchDeck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName: targetDeck,\r\n                sectionName: section,\r\n                card: {\r\n                    ...card,\r\n                    amount: 1,\r\n                },\r\n            });\r\n        }\r\n    } as const;\r\n};\r\nexport default useCardActions;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport { AvatarProps } from \"@material-ui/core/Avatar\";\r\nimport React from \"react\";\r\nimport { State } from \"../../State\";\r\nimport styled, { ComponentProps, css } from \"./Theme\";\r\n\r\ntype StyledAvatarProps = { action: \"+\" | \"-\"; size: Props[\"size\"] } & AvatarProps;\r\n\r\nconst StyledAvatar = styled(Avatar).attrs((p: ComponentProps<StyledAvatarProps>) => ({\r\n    className: p.size === \"chip\" ? p.className + \" MuiChip-avatar MuiChip-avatarSmall\" : p.className,\r\n}))<StyledAvatarProps>`\r\n    cursor: pointer;\r\n    color: ${p => p.theme.palette.text.primary};\r\n\r\n    ${p =>\r\n        p.size === \"inline\" &&\r\n        css`\r\n            width: ${p.theme.spacing(3)}px;\r\n            height: ${p.theme.spacing(3)}px;\r\n            font-size: 0.875rem;\r\n        `}\r\n\r\n    &:hover:before {\r\n        content: \"${p => p.action}\";\r\n    }\r\n`;\r\n\r\ntype Props = {\r\n    val: number;\r\n    onChange: (val: number) => void;\r\n    size?: \"chip\" | \"inline\";\r\n};\r\n\r\nconst IncrementNumber: React.FC<Props> = ({ val, onChange, size }) => {\r\n    const state = React.useContext(State)[0];\r\n\r\n    const onClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.stopPropagation();\r\n        onChange(val + (state.modifierKeys.shift ? 1 : -1));\r\n    };\r\n    return (\r\n        <StyledAvatar title=\"\" onClick={onClick} action={state.modifierKeys.shift ? \"+\" : \"-\"} size={size}>\r\n            {val}\r\n        </StyledAvatar>\r\n    );\r\n};\r\nexport default IncrementNumber;\r\n","import React from \"react\";\r\nimport { State } from \"../../State\";\r\nimport { ScryCardSymbol } from \"../../Utility/Scry/Types\";\r\nimport styled from \"./Theme\";\r\n\r\nconst Symbol = styled.svg`\r\n    display: inline-block;\r\n    height: 16px;\r\n    width: 16px;\r\n    margin: 1px 1px -2px 1px;\r\n`;\r\n\r\ntype Props = {\r\n    symbol: string;\r\n};\r\n\r\nconst SymbolIcon: React.FC<Props> = ({ symbol }) => {\r\n    const [state] = React.useContext(State);\r\n    const [symbolObj, setSymbolObj] = React.useState<ScryCardSymbol>();\r\n    React.useEffect(() => {\r\n        setSymbolObj(state.symbolList[symbol] ?? Object.values(state.symbolList).find(s => s.loose_variant === symbol));\r\n    }, [symbol, state.symbolList]);\r\n    return symbolObj ? <Symbol dangerouslySetInnerHTML={{ __html: symbolObj.svg }} /> : <>{symbol}</>;\r\n};\r\n\r\nexport default SymbolIcon;\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { TypographyProps } from \"@material-ui/core/Typography\";\r\nimport SymbolIcon from \"./SymbolIcon\";\r\n\r\ntype Props = TypographyProps & {\r\n    text: string;\r\n};\r\n\r\nconst SymbolTypography: React.FC<Props> = ({ text, ...typographyProps }) => {\r\n    const [parsed, setParsed] = React.useState<JSX.Element[]>([]);\r\n    React.useEffect(() => {\r\n        setParsed((text.match(/({.*?})|([^{]+)/g) ?? []).map((m, i) => (m[0] === \"{\" ? <SymbolIcon key={i} symbol={m} /> : <span key={i}>{m}</span>)));\r\n    }, [text]);\r\n    return <Typography {...typographyProps}>{parsed}</Typography>;\r\n};\r\n\r\nexport default SymbolTypography;\r\n","import { Chip } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../Utility/useCardAction\";\r\nimport IncrementNumber from \"../Styled/IncrementNumber\";\r\nimport styled from \"../Styled/Theme\";\r\nimport SymbolTypography from \"../Styled/SymbolTypography\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\n\r\nconst CustomChip = styled(Chip)`\r\n    width: 100%;\r\n\r\n    & .MuiChip-label {\r\n        flex: 1 1 auto;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    & .MuiChip-deleteIcon {\r\n        width: unset;\r\n        height: unset;\r\n        flex-shrink: 0;\r\n        margin-left: ${p => p.theme.spacing(1)}px;\r\n        margin-top: 1px;\r\n    }\r\n`;\r\n\r\nconst CompressedCard: React.FC<CollectionCardProps> = props => {\r\n    const { updateCardQuantity, openScryfallPage } = useCardActions(props);\r\n    const { card } = props;\r\n    return (\r\n        <CustomChip\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            label={card.name}\r\n            deleteIcon={<SymbolTypography text={card.mana_cost ?? \"\"} noWrap />}\r\n            avatar={<IncrementNumber size=\"chip\" val={card.amount} onChange={updateCardQuantity} />}\r\n            onDelete={openScryfallPage}\r\n            onClick={openScryfallPage}\r\n            title=\"Open on scryfall\"\r\n        />\r\n    );\r\n};\r\nexport default CompressedCard;\r\n","import styled from \"./Theme\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst IndentedTypography = styled(Typography)`\r\n    text-indent: ${p => p.theme.spacing(1)}px;\r\n`;\r\nexport default IndentedTypography;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\nimport CompressedCard from \"./CompressedCard\";\r\nimport IndentedTypography from \"../Styled/IndentedTypography\";\r\n\r\nconst CompressedCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <Grid container direction=\"column\">\r\n            {cards.length >= 1 ? (\r\n                cards.map(c => (\r\n                    <Grid item key={c.name} xs zeroMinWidth>\r\n                        <CompressedCard card={c} {...props} />\r\n                    </Grid>\r\n                ))\r\n            ) : (\r\n                <Grid item xs={12}>\r\n                    <IndentedTypography color=\"textSecondary\" variant=\"subtitle2\">Empty</IndentedTypography>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\nexport default CompressedCollecion;\r\n","import { IconButton, Tooltip, Typography } from \"@material-ui/core\";\r\nimport { IconButtonProps } from \"@material-ui/core/IconButton/IconButton\";\r\nimport React from \"react\";\r\nimport styled, { css } from \"./Theme\";\r\n\r\nconst StyledIconButton = styled(IconButton)<{ background?: \"primary\" | \"secondary\" }>`\r\n    ${p =>\r\n        p.background &&\r\n        css`\r\n            background-color: ${p.theme.palette[p.background].main};\r\n        `};\r\n    &:hover {\r\n        ${p =>\r\n        p.background &&\r\n            css`\r\n                background-color: ${p.theme.palette[p.background].dark};\r\n            `};\r\n    }\r\n`;\r\n\r\ntype Props = {\r\n    onClick: () => void;\r\n    title: string;\r\n    size?: IconButtonProps[\"size\"];\r\n    disabled?: boolean;\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst TooltipButton: React.FC<Props> = ({ onClick, title, size, background, disabled, children }) => {\r\n    return (\r\n        <Tooltip title={title}>\r\n            <span>\r\n                <StyledIconButton size={size} background={background} disabled={disabled} onClick={onClick} aria-label={title}>\r\n                    {children}\r\n                    <Typography variant=\"srOnly\">{title}</Typography>\r\n                </StyledIconButton>\r\n            </span>\r\n        </Tooltip>\r\n    );\r\n};\r\nexport default TooltipButton;\r\n","import { IconButtonProps } from \"@material-ui/core/IconButton\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../../Utility/useCardAction\";\r\nimport SwapVertIcon from \"@material-ui/icons/SwapVert\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\nimport { ClickAwayListener, Grow, MenuItem, MenuList, Paper, Popper } from \"@material-ui/core\";\r\nimport { SectionName } from \"../../../State\";\r\n\r\ntype Props = {\r\n    actions: ReturnType<typeof useCardActions>;\r\n    size?: IconButtonProps[\"size\"];\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst ChangeSectionButton: React.FC<Props> = ({ actions, size, background }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLDivElement>(null);\r\n\r\n    const handleToggle = () => setOpen(prevOpen => !prevOpen);\r\n    const handleClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <span ref={anchorRef}>\r\n                <TooltipButton title=\"Change section\" onClick={handleToggle} disabled={actions.sections.length <= 0} background={background} size={size}>\r\n                    <SwapVertIcon />\r\n                </TooltipButton>\r\n            </span>\r\n            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition>\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                        }}\r\n                    >\r\n                        <Paper elevation={5}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList>\r\n                                    {(actions.sections).map(s => (\r\n                                        <MenuItem\r\n                                            key={s}\r\n                                            onClick={() => actions.changeSection(s)}\r\n                                        >\r\n                                            {s === SectionName.Default ? \"Default\" : s}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    );\r\n};\r\nexport default ChangeSectionButton;\r\n","import { IconButtonProps } from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../../Utility/useCardAction\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\n\r\ntype Props = {\r\n    actions: ReturnType<typeof useCardActions>;\r\n    size?: IconButtonProps[\"size\"];\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst DeleteButton: React.FC<Props> = ({ actions, size, background }) => {\r\n    return (\r\n        <TooltipButton title=\"Remove card\" onClick={actions.removeCard} background={background} size={size}>\r\n            <DeleteIcon />\r\n        </TooltipButton>\r\n    );\r\n};\r\nexport default DeleteButton;\r\n","import { IconButtonProps } from \"@material-ui/core/IconButton\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../../Utility/useCardAction\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\n\r\ntype Props = {\r\n    actions: ReturnType<typeof useCardActions>;\r\n    size?: IconButtonProps[\"size\"];\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst WishlistButton: React.FC<Props> = ({ actions, size, background }) => {\r\n    return (\r\n        <TooltipButton title={actions.wishlistTooltip()} onClick={actions.toggleWishlist} background={background} size={size}>\r\n            {actions.isOnWishlist() ? <FavoriteIcon /> : <FavoriteBorderIcon />}\r\n        </TooltipButton>\r\n    );\r\n};\r\nexport default WishlistButton;\r\n","import { Fab } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport React from \"react\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport Scry from \"../../Utility/Scry\";\r\nimport useCardActions from \"../../Utility/useCardAction\";\r\nimport IncrementNumber from \"../Styled/IncrementNumber\";\r\nimport styled from \"../Styled/Theme\";\r\nimport ChangeSectionButton from \"./ActionButtons/ChangeSectionButton\";\r\nimport DeleteButton from \"./ActionButtons/DeleteButton\";\r\nimport WishlistButton from \"./ActionButtons/WishlistButton\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    padding-bottom: 139.344262295%;\r\n    width: 100%;\r\n    height: 0;\r\n    position: relative;\r\n`;\r\n\r\nconst Image = styled.img`\r\n    border-radius: 4.75% / 3.5%;\r\n    background-image: repeating-linear-gradient(-55deg, #ddd, #ddd 5px, #ccc 5px, #ccc 10px);\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst IncrementActions = styled.div`\r\n    position: absolute;\r\n    top: 25%;\r\n    left: ${p => p.theme.spacing(2)}px;\r\n`;\r\n\r\nconst BottomActions = styled.div`\r\n    position: absolute;\r\n    bottom: ${p => p.theme.spacing(2)}px;\r\n    right: ${p => p.theme.spacing(2)}px;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    opacity: 0;\r\n    transition: opacity 0.2s ease-in-out;\r\n\r\n    ${Body}:hover & {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\nconst ActionsMenu = styled.div<{ open: boolean }>`\r\n    transform: scaleX(${p => (p.open ? 1 : 0)});\r\n    transition: all 0.2s ease-in-out;\r\n\r\n    & > * {\r\n        margin-right: ${p => p.theme.spacing(1)}px;\r\n    }\r\n`;\r\n\r\nconst ImagesCard: React.FC<CollectionCardProps> = props => {\r\n    const actions = useCardActions(props);\r\n    const { card } = props;\r\n\r\n    const [actionsOpen, setActionsOpen] = React.useState(false);\r\n    const toggleActionsOpen = () => setActionsOpen(prev => !prev);\r\n\r\n    return (\r\n        <Body>\r\n            <Image src={Scry.getImage(card, \"normal\") ?? \"\"} onClick={actions.openScryfallPage} title=\"Open on scryfall\" />\r\n            {!isNullOrUndefined(card.amount) && (\r\n                <IncrementActions>\r\n                    <IncrementNumber val={card.amount} onChange={actions.updateCardQuantity} />\r\n                </IncrementActions>\r\n            )}\r\n            <BottomActions>\r\n                <ActionsMenu open={actionsOpen}>\r\n                    <WishlistButton actions={actions} background=\"secondary\" />\r\n                    <ChangeSectionButton actions={actions} background=\"secondary\" />\r\n                    <DeleteButton actions={actions} background=\"secondary\" />\r\n                </ActionsMenu>\r\n                <Fab color=\"primary\" onClick={toggleActionsOpen}>\r\n                    <MenuIcon />\r\n                </Fab>\r\n            </BottomActions>\r\n        </Body>\r\n    );\r\n};\r\nexport default ImagesCard;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport IndentedTypography from \"../Styled/IndentedTypography\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\nimport ImagesCard from \"./ImagesCard\";\r\n\r\nconst ImagesCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <Grid container spacing={1} alignItems=\"center\">\r\n            {cards.length >= 1 ? (\r\n                cards.map(c => (\r\n                    <Grid key={c.name} item xs={6} lg={6} xl={4}>\r\n                        <ImagesCard card={c} {...props} />\r\n                    </Grid>\r\n                ))\r\n            ) : (\r\n                <Grid item xs={12}>\r\n                    <IndentedTypography color=\"textSecondary\">Empty</IndentedTypography>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\nexport default ImagesCollecion;\r\n","import React from \"react\";\r\nimport { State } from \"../../State\";\r\nimport { ScryCardRarity, ScrySet } from \"../../Utility/Scry/Types\";\r\nimport styled from \"./Theme\";\r\n\r\nconst Set = styled.svg<{ rarity: ScryCardRarity }>`\r\n    width: 25px;\r\n    height: 20px;\r\n    fill: url(#rarity-${p => p.rarity});\r\n`;\r\n\r\ntype Props = {\r\n    set: string;\r\n    rarity: ScryCardRarity;\r\n};\r\n\r\nconst SetIcon: React.FC<Props> = ({ set, rarity }) => {\r\n    const [state] = React.useContext(State);\r\n    const [setObj, setSetObj] = React.useState<ScrySet>();\r\n    React.useEffect(() => {\r\n        setSetObj(state.setList[set]);\r\n    }, [set, state.setList]);\r\n    return setObj ? (\r\n        <Set rarity={rarity}>\r\n            <defs>\r\n                <linearGradient id=\"rarity-common\">\r\n                    <stop offset=\"0%\" stopColor=\"#000\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"rarity-uncommon\" gradientTransform=\"rotate(90)\">\r\n                    <stop offset=\"0%\" stopColor=\"#4d565a\" />\r\n                    <stop offset=\"50%\" stopColor=\"#a0c3d3\" />\r\n                    <stop offset=\"100%\" stopColor=\"#4d565a\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"rarity-rare\" gradientTransform=\"rotate(90)\">\r\n                    <stop offset=\"0%\" stopColor=\"#85723e\" />\r\n                    <stop offset=\"50%\" stopColor=\"#d4b975\" />\r\n                    <stop offset=\"100%\" stopColor=\"#85723e\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"rarity-mythic\" gradientTransform=\"rotate(90)\">\r\n                    <stop offset=\"0%\" stopColor=\"#b02911\" />\r\n                    <stop offset=\"50%\" stopColor=\"#e87f03\" />\r\n                    <stop offset=\"100%\" stopColor=\"#b02911\" />\r\n                </linearGradient>\r\n            </defs>\r\n            <svg dangerouslySetInnerHTML={{ __html: setObj.icon_svg }} />\r\n        </Set>\r\n    ) : (\r\n        <>{set}</>\r\n    );\r\n};\r\n\r\nexport default SetIcon;\r\n","import { Link, TableCell, TableRow } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport useCardActions from \"../../Utility/useCardAction\";\r\nimport IncrementNumber from \"../Styled/IncrementNumber\";\r\nimport SetIcon from \"../Styled/SetIcon\";\r\nimport SymbolTypography from \"../Styled/SymbolTypography\";\r\nimport styled from \"../Styled/Theme\";\r\nimport ChangeSectionButton from \"./ActionButtons/ChangeSectionButton\";\r\nimport DeleteButton from \"./ActionButtons/DeleteButton\";\r\nimport WishlistButton from \"./ActionButtons/WishlistButton\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\nimport { NumberCell } from \"./ListCollection\";\r\n\r\nconst Actions = styled.div`\r\n    white-space: nowrap;\r\n    & > *:not(:last-child) {\r\n        margin-right: ${p => p.theme.spacing(0.5)}px;\r\n    }\r\n`;\r\n\r\nconst ListCard: React.FC<CollectionCardProps> = props => {\r\n    const actions = useCardActions(props);\r\n    const { card } = props;\r\n\r\n    return (\r\n        <TableRow>\r\n            <NumberCell component=\"th\" scope=\"row\" align=\"center\">\r\n                {!isNullOrUndefined(card.amount) ? <IncrementNumber size=\"inline\" val={card.amount} onChange={actions.updateCardQuantity} /> : \"-\"}\r\n            </NumberCell>\r\n            <TableCell>\r\n                <Link href=\"#\" onClick={actions.openScryfallPage} color=\"inherit\" title=\"Open on scryfall\">\r\n                    {card.name}\r\n                </Link>\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n                <SetIcon set={card.set} rarity={card.rarity} />\r\n            </TableCell>\r\n            <TableCell>\r\n                <SymbolTypography text={card.mana_cost ?? \"\"} noWrap />\r\n            </TableCell>\r\n            <TableCell>{card.type_line}</TableCell>\r\n            <TableCell>\r\n                <Actions>\r\n                    <WishlistButton actions={actions} size=\"small\" />\r\n                    <ChangeSectionButton actions={actions} size=\"small\" />\r\n                    <DeleteButton actions={actions} size=\"small\" />\r\n                </Actions>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n};\r\nexport default ListCard;\r\n","import { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport IndentedTypography from \"../Styled/IndentedTypography\";\r\nimport styled from \"../Styled/Theme\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\nimport ListCard from \"./ListCard\";\r\n\r\nconst CustomPaddingTable = styled(Table)`\r\n    & .MuiTableCell-sizeSmall {\r\n        padding: ${p => p.theme.spacing(0.25, 1)};\r\n    }\r\n`;\r\n\r\nexport const NumberCell = styled(TableCell)`\r\n    width: 40px;\r\n`;\r\n\r\nconst ListCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <CustomPaddingTable size=\"small\" aria-label=\"card table\">\r\n            <TableHead>\r\n                <TableRow>\r\n                    <NumberCell align=\"center\">#</NumberCell>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell align=\"center\">Set</TableCell>\r\n                    <TableCell>Cost</TableCell>\r\n                    <TableCell>Type</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {cards.length >= 1 ? (\r\n                    cards.map(c => <ListCard key={c.name} card={c} {...props} />)\r\n                ) : (\r\n                    <TableRow>\r\n                        <TableCell colSpan={6}>\r\n                            <IndentedTypography color=\"textSecondary\">Empty</IndentedTypography>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </TableBody>\r\n        </CustomPaddingTable>\r\n    );\r\n};\r\nexport default ListCollecion;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport omit from \"lodash.omit\";\r\nimport React from \"react\";\r\nimport ScrySdk from \"scryfall-sdk\";\r\nimport { DeckCard, SectionName } from \"../../State\";\r\nimport CompressedCollecion from \"./CompressedCollection\";\r\nimport ImagesCollecion from \"./ImagesCollection\";\r\nimport ListCollecion from \"./ListCollection\";\r\n\r\nexport type PreviewStyle = \"Standard\" | \"List\" | \"Images\" | \"Compressed\";\r\nexport type PreviewActions = \"SearchDeck\" | \"SearchWishlist\" | \"Deck\";\r\nexport type SortByOptions = \"Name\" | \"Cmc\" | \"Type\" | \"Rarity\";\r\nexport type SortOrderOptions = \"Asc\" | \"Desc\";\r\n\r\nexport type CollectionPreviewProps = {\r\n    cards: (DeckCard & ScrySdk.Card)[];\r\n    actions: PreviewActions;\r\n    sortBy: SortByOptions;\r\n    sortOrder: SortOrderOptions;\r\n    showGroups: boolean;\r\n    deckName?: string;\r\n    sectionName?: string;\r\n};\r\n\r\nexport type CollectionCardProps = {\r\n    card: DeckCard & ScrySdk.Card;\r\n    actions: PreviewActions;\r\n    deckName?: string;\r\n    sectionName?: string;\r\n};\r\n\r\nconst desc = <T extends object>(a: T, b: T, orderBy: keyof T, func: <U extends any>(v: U) => U | number) => {\r\n    if (func(b[orderBy]) < func(a[orderBy])) {\r\n        return -1;\r\n    }\r\n    if (func(b[orderBy]) > func(a[orderBy])) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n};\r\n\r\nconst getSorting = <T extends object>(order: SortOrderOptions, orderBy: keyof T, func: <U extends any>(v: U) => U | number = v => v): ((a: T, b: T) => number) => {\r\n    return order === \"Desc\" ? (a, b) => desc(a, b, orderBy, func) : (a, b) => -desc(a, b, orderBy, func);\r\n};\r\n\r\n\r\nconst StableSort = <T extends object>(array: T[], cmp: (a: T, b: T) => number) => {\r\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = cmp(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n};\r\n\r\nconst rarityOrder = [\"common\", \"uncommon\", \"rare\", \"mythic\"] as const;\r\nconst GetSortFunction = (sortBy: SortByOptions, sortOrder: SortOrderOptions) => {\r\n    switch (sortBy) {\r\n        case \"Name\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"name\");\r\n        case \"Cmc\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"mana_cost\");\r\n        case \"Type\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"type_line\");\r\n        case \"Rarity\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"rarity\", v => rarityOrder.indexOf(v));\r\n    }\r\n};\r\n\r\ntype Props = CollectionPreviewProps & {\r\n    style: PreviewStyle;\r\n};\r\n\r\nconst CollectionPreview: React.FC<Props> = props => {\r\n    const renderCollection = () => {\r\n        const passedProps = {\r\n            ...omit(props, \"style\", \"cards\"),\r\n            cards: StableSort(props.cards, GetSortFunction(props.sortBy, props.sortOrder)),\r\n        };\r\n        switch (props.style) {\r\n            case \"List\":\r\n                return <ListCollecion {...passedProps} />;\r\n            case \"Images\":\r\n                return <ImagesCollecion {...passedProps} />;\r\n            case \"Compressed\":\r\n                return <CompressedCollecion {...passedProps} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {props.sectionName !== SectionName.Default && <Typography variant=\"h6\">{props.sectionName}</Typography>}\r\n            {renderCollection()}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CollectionPreview;\r\n","import { Button, ButtonGroup, Tooltip, Typography } from \"@material-ui/core\";\r\nimport ViewHeadlineIcon from \"@material-ui/icons/ViewHeadline\";\r\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\r\nimport ViewModuleIcon from \"@material-ui/icons/ViewModule\";\r\nimport React from \"react\";\r\nimport styled from \"../../Styled/Theme\";\r\nimport { PreviewStyle } from \"../CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n\r\n    & .MuiTypography-root {\r\n        margin-right: ${p => p.theme.spacing(1)}px;\r\n    }\r\n\r\n    & .MuiButton-root {\r\n        padding-left: 0;\r\n        padding-right: 0;\r\n    }\r\n`;\r\n\r\nconst IconForStyle = (style: PreviewStyle) => {\r\n    switch (style) {\r\n        case \"Standard\":\r\n            return <ViewListIcon />;\r\n        case \"List\":\r\n            return <ViewHeadlineIcon />;\r\n        case \"Images\":\r\n            return <ViewModuleIcon />;\r\n    }\r\n    throw Error(`Style ${style} does not have an icon.`);\r\n};\r\n\r\ntype Props = {\r\n    style: PreviewStyle;\r\n    onToggle: (style: PreviewStyle) => void;\r\n};\r\n\r\nconst PreviewStyleToggle: React.FC<Props> = ({ style, onToggle }) => {\r\n    return (\r\n        <Body>\r\n            <Typography variant=\"caption\">Display:</Typography>\r\n            <ButtonGroup variant=\"outlined\" size=\"small\">\r\n                {([\"Standard\", \"List\", \"Images\"] as const).map(s => (\r\n                    <Button key={s} onClick={() => onToggle(s)} variant={style === s ? \"contained\" : undefined}>\r\n                        <Tooltip title={s}>{IconForStyle(s)}</Tooltip>\r\n                    </Button>\r\n                ))}\r\n            </ButtonGroup>\r\n        </Body>\r\n    );\r\n};\r\nexport default PreviewStyleToggle;\r\n","import ListAltIcon from \"@material-ui/icons/ListAlt\";\r\nimport React from \"react\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\nimport styled from \"../../Styled/Theme\";\r\n\r\nconst Body = styled.div`\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n    margin-left: ${p => p.theme.spacing(1)}px;\r\n`;\r\n\r\ntype Props = {\r\n    show: boolean;\r\n    setShow: (show: boolean) => void;\r\n};\r\n\r\nconst ShowGroupsToggle: React.FC<Props> = ({ show, setShow }) => {\r\n    return (\r\n        <Body>\r\n            <TooltipButton size=\"small\" title={show ? \"Hide groups\" : \"Show groups\"} onClick={() => setShow(!show)}>\r\n                <ListAltIcon />\r\n            </TooltipButton>\r\n        </Body>\r\n    );\r\n};\r\nexport default ShowGroupsToggle;\r\n","import { Button, ClickAwayListener, Grow, MenuItem, MenuList, Paper, Popper } from \"@material-ui/core\";\r\nimport SortIcon from \"@material-ui/icons/Sort\";\r\nimport React from \"react\";\r\nimport styled from \"../../Styled/Theme\";\r\nimport { SortByOptions, SortOrderOptions } from \"../CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n`;\r\n\r\ntype Props = {\r\n    sortBy: SortByOptions;\r\n    setSortBy: (sortBy: SortByOptions) => void;\r\n    sortOrder: SortOrderOptions;\r\n    setSortOrder: (sortOrder: SortOrderOptions) => void;\r\n};\r\n\r\nconst SortToggle: React.FC<Props> = ({ sortBy, setSortBy, sortOrder, setSortOrder }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n\r\n    const handleToggle = () => setOpen(prevOpen => !prevOpen);\r\n    const handleClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Body>\r\n            <Button ref={anchorRef} size=\"small\" onClick={handleToggle} startIcon={<SortIcon />}>\r\n                Sort by\r\n            </Button>\r\n            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition>\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                        }}\r\n                    >\r\n                        <Paper elevation={5}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList>\r\n                                    {([\r\n                                        [\"Name\", \"Asc\"],\r\n                                        [\"Name\", \"Desc\"],\r\n                                        [\"Cmc\", \"Asc\"],\r\n                                        [\"Cmc\", \"Desc\"],\r\n                                        [\"Type\", \"Asc\"],\r\n                                        [\"Type\", \"Desc\"],\r\n                                        [\"Rarity\", \"Asc\"],\r\n                                        [\"Rarity\", \"Desc\"],\r\n                                    ] as const).map(([by, order]) => (\r\n                                        <MenuItem\r\n                                            key={`${by} (${order})`}\r\n                                            selected={by === sortBy && order === sortOrder}\r\n                                            onClick={event => {\r\n                                                setSortBy(by);\r\n                                                setSortOrder(order);\r\n                                            }}\r\n                                        >\r\n                                            {`${by} (${order})`}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </Body>\r\n    );\r\n};\r\nexport default SortToggle;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClipboard, faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faGoogle } from \"@fortawesome/free-brands-svg-icons\";\r\nimport styled from \"./Theme\";\r\n\r\nconst IconWrap = styled.div`\r\n    width: 24px;\r\n    height: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const CompressIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faCompressAlt} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const ExpandIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faExpandAlt} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const GoogleIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faGoogle} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const ClipboardIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faClipboard} />\r\n    </IconWrap>\r\n);\r\n","import { Dialog, DialogContent, DialogContentText, DialogTitle, Grid, TextField } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport copy from \"clipboard-copy\";\nimport React from \"react\";\nimport * as Scry from \"scryfall-sdk\";\nimport { DeckCard, DeckName, State } from \"../../State\";\nimport CollectionParser from \"../../Utility/CollectionParser\";\nimport GoogleApi from \"../../Utility/GoogleApi\";\nimport CollectionPreview, { PreviewStyle, SortByOptions, SortOrderOptions } from \"../Previews/CollectionPreview\";\nimport PreviewStyleToggle from \"../Previews/Common/PreviewStyleToggle\";\nimport ShowGroupsToggle from \"../Previews/Common/ShowGroupsToggle\";\nimport SortToggle from \"../Previews/Common/SortToggle\";\nimport { AppletActions, AppletPaper, FlexCol, Title } from \"../Styled/Grid\";\nimport { ClipboardIcon, CompressIcon, ExpandIcon } from \"../Styled/Icons\";\nimport styled from \"../Styled/Theme\";\nimport TooltipButton from \"../Styled/TooltipButton\";\n\nconst SectionRow = styled.div`\n    margin-bottom: ${p => p.theme.spacing(2)}px;\n`;\n\nconst ExportRow = styled(FlexCol)`\n    display: flex;\n    align-items: center;\n    margin-bottom: ${p => p.theme.spacing(1)}px;\n\n    & .MuiDialogContentText-root {\n        flex-grow: 1;\n        margin-bottom: 0;\n    }\n`;\n\ntype Props = {\n    deckName: string;\n};\n\nconst DeckPreview = ({ deckName }: Props) => {\n    const [state, dispatch] = React.useContext(State);\n    const deck = state.decks[deckName];\n\n    const [expanded, setExpanded] = React.useState(true);\n    const [exportOpened, setExportOpened] = React.useState(false);\n    const [style, setStyle] = React.useState<PreviewStyle>(\"List\");\n    const [sortBy, setSortBy] = React.useState<SortByOptions>(\"Cmc\");\n    const [sortOrder, setSortOrder] = React.useState<SortOrderOptions>(\"Asc\");\n    const [showGroups, setShowGroups] = React.useState(false);\n\n    React.useEffect(() => {\n        const missingCards = Object.values(deck.cards)\n            .reduce((prev, val) => [...prev, ...Object.values(val)], [] as DeckCard[])\n            .filter(card => !state.cardList[card.name]);\n        Scry.Cards.collection(...missingCards.map(card => Scry.CardIdentifier.byName(card.name))).on(\"data\", (card: any) =>\n            dispatch({ type: \"AddCard\", card })\n        );\n    }, [deckName]);\n\n    const closePreview = () => dispatch({ type: \"SelectDeck\", name: null });\n    const toggleExpanded = () => setExpanded(e => !e);\n    const onDeleteDeck = () => GoogleApi.deleteDeck(dispatch, { name: deckName, id: state.files[deckName] });\n    const onSaveChanges = () =>\n        GoogleApi.updateFile({ id: state.files[deckName], fileContent: CollectionParser.deserialize(deck.cards) }).then(() =>\n            dispatch({ type: \"UpdateDeck\", name: deckName, isDirty: false })\n        );\n    const onExportOpen = () => setExportOpened(true);\n    const onExportClose = () => setExportOpened(false);\n\n    return (\n        <Grid item xs={12} md={expanded ? 6 : 4}>\n            <AppletPaper>\n                <Grid container direction=\"row\" justify=\"space-between\">\n                    <Grid item>\n                        <Title>Deck preview</Title>\n                    </Grid>\n                    <Grid item>\n                        <TooltipButton title={expanded ? \"Compress\" : \"Expand\"} size=\"small\" onClick={toggleExpanded}>\n                            {expanded ? <CompressIcon /> : <ExpandIcon />}\n                        </TooltipButton>\n                        <TooltipButton title=\"Close preview\" size=\"small\" onClick={closePreview}>\n                            <CloseIcon />\n                        </TooltipButton>\n                    </Grid>\n                </Grid>\n                <Grid container justify=\"space-between\">\n                    <SortToggle sortBy={sortBy} setSortBy={setSortBy} sortOrder={sortOrder} setSortOrder={setSortOrder} />\n                    <ShowGroupsToggle show={showGroups} setShow={setShowGroups} />\n                    <FlexCol />\n                    {expanded && <PreviewStyleToggle style={style} onToggle={setStyle} />}\n                </Grid>\n                <FlexCol>\n                    {Object.entries(deck.cards).map(([sectionName, cards]) => (\n                        <SectionRow key={sectionName}>\n                            <CollectionPreview\n                                cards={Object.values(cards).map(c => ({ ...c, ...(state.cardList[c.name] ?? {}) })) as any}\n                                style={expanded ? style : \"Compressed\"}\n                                actions={deckName === DeckName.Wishlist ? \"SearchWishlist\" : \"Deck\"}\n                                sortBy={sortBy}\n                                sortOrder={sortOrder}\n                                showGroups={showGroups}\n                                deckName={deckName}\n                                sectionName={sectionName}\n                            />\n                        </SectionRow>\n                    ))}\n                </FlexCol>\n                <AppletActions>\n                    <TooltipButton title=\"Export deck\" onClick={onExportOpen}>\n                        <GetAppIcon />\n                    </TooltipButton>\n                    {deckName !== DeckName.Collection && deckName !== DeckName.Wishlist && (\n                        <TooltipButton title=\"Delete deck\" onClick={onDeleteDeck}>\n                            <DeleteIcon />\n                        </TooltipButton>\n                    )}\n                    {state.decks[deck.name].isDirty && (\n                        <TooltipButton title=\"Save changes\" onClick={onSaveChanges} background=\"primary\">\n                            <SaveIcon />\n                        </TooltipButton>\n                    )}\n                </AppletActions>\n                <Dialog open={exportOpened} onClose={onExportClose} aria-labelledby=\"export-deck-dialog\" fullWidth maxWidth=\"md\">\n                    <DialogTitle id=\"import-deck-dialog\">Export</DialogTitle>\n                    <DialogContent>\n                        <ExportRow>\n                            <DialogContentText>Copy exported text below.</DialogContentText>\n                            <TooltipButton title=\"Copy to clipboard\" onClick={() => copy(CollectionParser.deserialize(deck.cards))}>\n                                <ClipboardIcon />\n                            </TooltipButton>\n                        </ExportRow>\n                        <TextField\n                            label=\"Export\"\n                            multiline\n                            rows=\"15\"\n                            fullWidth\n                            variant=\"outlined\"\n                            value={CollectionParser.deserialize(deck.cards)}\n                            InputProps={{\n                                readOnly: true,\n                            }}\n                        />\n                    </DialogContent>\n                </Dialog>\n            </AppletPaper>\n        </Grid>\n    );\n};\n\nexport default DeckPreview;\n","import {\n    Button,\n    Checkbox,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControlLabel,\n    FormGroup,\n    Grid,\n    TextField,\n    Tooltip,\n    Typography,\n} from \"@material-ui/core\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport React from \"react\";\nimport Scry from \"../../Utility/Scry\";\nimport { AppletActions, AppletPaper, FlexCol, Title } from \"../Styled/Grid\";\nimport styled from \"../Styled/Theme\";\nimport SymbolTypography from \"../Styled/SymbolTypography\";\n\n// TODO: remove from here & make it reusable?\nconst PreviewRow = styled.div`\n    display: flex;\n    margin-top: ${p => p.theme.spacing(1)}px;\n    align-items: center;\n\n    & .MuiAutocomplete-root {\n        flex-grow: 1;\n        margin-right: ${p => p.theme.spacing(1)}px;\n    }\n`;\n\n// Reusable?\ninterface CardSearchFilter {\n    /** Array of selected colors inside advanced search */\n    colors: {\n        r: boolean; // Red\n        g: boolean; // Green\n        u: boolean; // Blue\n        b: boolean; // Black\n        w: boolean; // White\n    };\n    /** Checkbox whether the search should match exact colors */\n    colorExactMatch: boolean;\n\n    /** Converted Mana Cost */\n    cmc: number;\n    /** Type: equal [=], less than [<], more than [>] */\n    cmcType: string;\n\n    // type: string;\n    // subtype: string;\n\n    // legality: string;\n}\n\nconst initCardSearchFilter = (): CardSearchFilter => {\n    return {\n        colors: { r: false, g: false, u: false, b: false, w: false },\n        colorExactMatch: false,\n        cmc: 0,\n        cmcType: \"=\",\n    };\n};\n\nconst CardSearch: React.FC = () => {\n    // Card name & autocomplete structures\n    const [cardName, setCardName] = React.useState<string>(\"\");\n    const [autoompleteOptions, setAutocompleteOptions] = React.useState<string[]>([]);\n\n    const updateAutoComplete = (name: string) => {\n        setCardName(name);\n        Scry.Cards.Autocomplete(cardName).then(names => setAutocompleteOptions(names));\n    };\n\n    const performSearch = () => {\n        alert(JSON.stringify(filter));\n    };\n\n    // Advanced Filters Dialog structures\n    const [dialogOpen, setDialogOpen] = React.useState<boolean>(false);\n    const openDialog = () => setDialogOpen(true);\n    const closeDialog = () => setDialogOpen(false);\n\n    // Filter structures\n    const [filter, setFilter] = React.useState<CardSearchFilter>(initCardSearchFilter());\n\n    const resetFilter = () => setFilter(initCardSearchFilter());\n    const handleColors = (color: \"r\" | \"g\" | \"u\" | \"b\" | \"w\") => (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newFilter = { ...filter };\n        newFilter.colors[color] = event.target.checked;\n        setFilter(newFilter);\n    };\n\n    return (\n        <Grid item xs={12} md>\n            <AppletPaper>\n                <Title>Card search</Title>\n\n                <FlexCol>\n                    <PreviewRow>\n                        <Autocomplete\n                            freeSolo\n                            autoHighlight\n                            disableClearable\n                            options={autoompleteOptions}\n                            inputValue={cardName}\n                            onInputChange={(e, value) => updateAutoComplete(value)}\n                            renderInput={params => <TextField {...params} label=\"Card name\" variant=\"outlined\" fullWidth />}\n                        />\n                    </PreviewRow>\n                </FlexCol>\n\n                <Dialog open={dialogOpen} onClose={closeDialog} aria-labelledby=\"advanced-card-search-dialog\" maxWidth=\"md\" fullWidth>\n                    <DialogTitle id=\"advanced-card-search-dialog\">Advanced card search</DialogTitle>\n                    <DialogContent>\n                        <Typography variant=\"subtitle2\">Filter by color</Typography>\n                        <FormGroup row>\n                            <FormControlLabel\n                                label={<SymbolTypography text=\"{R} Red\" />}\n                                control={<Checkbox checked={filter.colors.r} onChange={handleColors(\"r\")} />}\n                            />\n                            <FormControlLabel\n                                label={<SymbolTypography text=\"{G} Green\" />}\n                                control={<Checkbox checked={filter.colors.g} onChange={handleColors(\"g\")} />}\n                            />\n                            <FormControlLabel\n                                label={<SymbolTypography text=\"{U} Blue\" />}\n                                control={<Checkbox checked={filter.colors.u} onChange={handleColors(\"u\")} />}\n                            />\n                            <FormControlLabel\n                                label={<SymbolTypography text=\"{B} Black\" />}\n                                control={<Checkbox checked={filter.colors.b} onChange={handleColors(\"b\")} />}\n                            />\n                            <FormControlLabel\n                                label={<SymbolTypography text=\"{W} White\" />}\n                                control={<Checkbox checked={filter.colors.w} onChange={handleColors(\"w\")} />}\n                            />\n                        </FormGroup>\n\n                        <FormControlLabel\n                            label=\"Exact color match?\"\n                            control={<Checkbox checked={filter.colorExactMatch} onChange={e => setFilter({ ...filter, colorExactMatch: e.target.checked })} />}\n                        />\n\n                        {/* <br />\n\n                        <ul>\n                            <li>[DONE] Filter by color identity (only selected colors or all cards with selected colors)</li>\n                            <li>Filter by converted mana cost (equal, less than, more than)</li>\n                            <li>Filter by type/subtype (restrict subtype options based on type)</li>\n                            <li>Filter by format legality (choose one)</li>\n                        </ul> */}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={resetFilter} color=\"primary\">\n                            Reset\n                        </Button>\n                        <Button onClick={closeDialog} color=\"primary\">\n                            OK\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n\n                <AppletActions>\n                    <Tooltip title=\"Advanced search filter\">\n                        <Button onClick={openDialog}>\n                            <FilterListIcon />\n                        </Button>\n                    </Tooltip>\n                    <Tooltip title=\"Search for results\">\n                        <Button onClick={performSearch}>\n                            <SearchIcon />\n                        </Button>\n                    </Tooltip>\n                </AppletActions>\n            </AppletPaper>\n        </Grid>\n    );\n};\n\nexport default CardSearch;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { AppletPaper, Title } from \"../Styled/Grid\";\n\nconst UserInfo: React.FC = () => {\n    return (\n        <Grid item xs={12} sm md>\n            <AppletPaper>\n                <Title>User info</Title>\n                UserInfo paceholder.\n            </AppletPaper>\n        </Grid>\n    );\n};\n\nexport default UserInfo;\n","import { Container, Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport AddDeck from \"./Applets/AddDeck\";\r\nimport DeckPreview from \"./Applets/DeckPreview\";\r\nimport CardSearch from \"./Applets/CardSearch\";\r\nimport UserInfo from \"./Applets/UserInfo\";\r\nimport { State } from \"../State\";\r\n\r\nconst Home: React.FC = () => {\r\n    const [state] = React.useContext(State);\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n            <Grid container spacing={3}>\r\n                <Grid item direction=\"row\" container spacing={3}>\r\n                    <UserInfo />\r\n                    <AddDeck />\r\n                </Grid>\r\n                <Grid item direction=\"row\" container spacing={3}>\r\n                    <CardSearch />\r\n                    {state.selectedDeck !== null && <DeckPreview deckName={state.selectedDeck} />}\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst NotFound: React.FC = () => {\r\n    return <div>Not found</div>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport { GoogleIcon } from \"./Styled/Icons\";\r\n\r\ntype Props = {\r\n    variant?: \"text\" | \"outlined\" | \"contained\";\r\n    onClick: () => void;\r\n};\r\n\r\nconst SignInButton: React.FC<Props> = ({ variant, onClick }: Props) => {\r\n    return (\r\n        <Button variant={variant} onClick={onClick} startIcon={<GoogleIcon />}>\r\n            <Typography noWrap>Sign in with Google</Typography>\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default SignInButton;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Logo from \"../Assets/logo.png\";\r\nimport GoogleApi from \"../Utility/GoogleApi\";\r\nimport SignInButton from \"./SignInButton\";\r\n\r\nconst SignIn: React.FC = () => {\r\n    return (\r\n        <>\r\n            <Grid container justify=\"center\" alignItems=\"center\" style={{ padding: 25 }}>\r\n                <img src={Logo} alt=\"\" width=\"150px\" height=\"150px\" draggable={false} />\r\n            </Grid>\r\n            <Grid container justify=\"center\" alignItems=\"center\">\r\n                <SignInButton variant=\"contained\" onClick={GoogleApi.signIn} />\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignIn;\r\n","import { AppBar, Avatar, Divider, Drawer, IconButton, Toolbar, Tooltip, Typography } from \"@material-ui/core\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport { isNullOrUndefined } from \"util\";\nimport { initialState, State } from \"../State\";\nimport { reducer } from \"../State/Reducers\";\nimport GoogleApi, { GoogleProfile } from \"../Utility/GoogleApi\";\nimport Scry from \"../Utility/Scry\";\nimport useEventListener from \"../Utility/useEventListener\";\nimport DrawerDeckList from \"./DrawerDeckList\";\nimport Home from \"./Home\";\nimport NotFound from \"./NotFound\";\nimport SignIn from \"./SignIn\";\nimport SignInButton from \"./SignInButton\";\nimport { FlexCol } from \"./Styled/Grid\";\nimport styled, { ComponentProps, css, MainTheme } from \"./Styled/Theme\";\nimport TooltipButton from \"./Styled/TooltipButton\";\nimport Axios from \"axios\";\nimport { ScryCardSymbol, ScrySet } from \"../Utility/Scry/Types\";\n\nconst bodyOpen = css<ComponentProps<any>>`\n    margin-left: ${p => p.theme.constants.drawerWidth};\n    width: calc(100% - ${p => p.theme.constants.drawerWidth});\n    transition: ${p =>\n        p.theme.transitions.create([\"width\", \"margin\"], {\n            easing: p.theme.transitions.easing.sharp,\n            duration: p.theme.transitions.duration.enteringScreen,\n        })};\n`;\n\nconst bodyClose = css<ComponentProps<any>>`\n    transition: ${p =>\n        p.theme.transitions.create([\"width\", \"margin\"], {\n            easing: p.theme.transitions.easing.sharp,\n            duration: p.theme.transitions.duration.leavingScreen,\n        })};\n`;\n\nconst CustomAppBar = styled(AppBar)<{ open: boolean }>`\n    z-index: ${p => p.theme.zIndex.drawer + 1};\n    ${bodyClose}\n    ${p => p.open && bodyOpen}\n`;\n\nconst MenuButton = styled(IconButton)<{ open: boolean }>`\n    margin-right: 36px;\n    ${p =>\n        p.open &&\n        css`\n            display: none;\n        `}\n`;\n\nconst drawerOpen = css<ComponentProps<any>>`\n    width: ${p => p.theme.constants.drawerWidth};\n    transition: ${p =>\n        p.theme.transitions.create(\"width\", {\n            easing: p.theme.transitions.easing.sharp,\n            duration: p.theme.transitions.duration.enteringScreen,\n        })};\n`;\n\nconst drawerClose = css<ComponentProps<any>>`\n    transition: ${p =>\n        p.theme.transitions.create(\"width\", {\n            easing: p.theme.transitions.easing.sharp,\n            duration: p.theme.transitions.duration.leavingScreen,\n        })};\n    overflow-x: hidden;\n    width: ${p => p.theme.constants.drawerWidthClosed};\n`;\n\nconst CustomDrawer = styled(Drawer).attrs(() => ({\n    variant: \"permanent\",\n}))<{ open?: boolean }>`\n    width: ${p => p.theme.constants.drawerWidth};\n    flex-shrink: 0;\n    white-space: nowrap;\n    ${p => (p.open ? drawerOpen : drawerClose)}\n\n    .MuiDrawer-paper {\n        ${p => (p.open ? drawerOpen : drawerClose)}\n    }\n`;\n\nconst DrawerToolbar = styled(Toolbar)`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    padding: ${p => p.theme.spacing(0, 1)}px;\n`;\n\nconst MainContent = styled.div<{ open: boolean }>`\n    flex-grow: 1;\n    padding: ${p => p.theme.spacing(3)}px;\n    margin-left: ${p => p.theme.constants.drawerWidthClosed};\n    ${bodyClose}\n    ${p => p.open && bodyOpen}\n`;\n\nconst ProfileAvatar = styled.div`\n    margin-right: ${p => p.theme.spacing(1)}px;\n`;\n\nconst App: React.FC = () => {\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n\n    const [profile, setProfile] = React.useState<GoogleProfile>();\n    const [isSignedIn, setIsSignedIn] = React.useState(false);\n\n    const handleSignoutClick = () => {\n        GoogleApi.signOut();\n        setProfile(undefined);\n    };\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleDrawerOpen = () => setOpen(true);\n    const handleDrawerClose = () => setOpen(false);\n\n    useEventListener(\"keydown\", e => {\n        if (e.key === \"Shift\" && !state.modifierKeys.shift) dispatch({ type: \"SetModifierKey\", key: \"shift\", value: true });\n    });\n    useEventListener(\"keyup\", e => {\n        if (e.key === \"Shift\" && state.modifierKeys.shift) dispatch({ type: \"SetModifierKey\", key: \"shift\", value: false });\n    });\n\n    /**\n     * Called at app init, sets Google API signin callback\n     * info stored in React profile state\n     */\n    React.useEffect(() => {\n        GoogleApi.initClient(async (isSignedIn: boolean) => {\n            setIsSignedIn(isSignedIn);\n            if (!isSignedIn) {\n                return;\n            }\n            setProfile(GoogleApi.getProfile());\n            GoogleApi.prepareAppData()(dispatch);\n        });\n        Scry.Symbology.All()\n            .then(symbols => {\n                const endpoint = Axios.create({\n                    baseURL: \"\",\n                    responseType: \"text\",\n                    headers: {\n                        \"Content-Type\": \"image/svg+xml\",\n                    },\n                });\n                return Promise.all(\n                    symbols.map(symbol => endpoint.get<string>(symbol.svg_uri, { data: symbol }))\n                );\n            })\n            .then(responses => {\n                dispatch({\n                    type: \"AddSymbols\",\n                    symbols: responses.map(\n                        response =>\n                            ({\n                                ...JSON.parse(response.config.data),\n                                svg: response.data,\n                            } as ScryCardSymbol)\n                    ),\n                });\n            })\n            .then(Scry.Sets.All)\n            .then(sets => {\n                const endpoint = Axios.create({\n                    baseURL: \"\",\n                    responseType: \"text\",\n                    headers: {\n                        \"Content-Type\": \"image/svg+xml\",\n                    },\n                });\n                return Promise.all(\n                    sets.map(set => endpoint.get<string>(set.icon_svg_uri, { data: set }))\n                );\n            })\n            .then(responses => {\n                dispatch({\n                    type: \"AddSets\",\n                    sets: responses.map(\n                        response =>\n                            ({\n                                ...JSON.parse(response.config.data),\n                                icon_svg: response.data,\n                            } as ScrySet)\n                    ),\n                });\n            });\n    }, []);\n\n    return (\n        <State.Provider value={[state, dispatch]}>\n            <CustomAppBar position=\"sticky\" open={open}>\n                <Toolbar>\n                    <MenuButton color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerOpen} edge=\"start\" open={open}>\n                        <MenuIcon />\n                    </MenuButton>\n                    <Typography variant=\"h6\">MTGCollection</Typography>\n                    <FlexCol />\n                    {isSignedIn ? (\n                        <>\n                            {!isNullOrUndefined(profile) && (\n                                <ProfileAvatar>\n                                    <Tooltip title={`Signed in as ${profile.getGivenName()} (${profile.getEmail()})`}>\n                                        <Avatar alt={profile.getGivenName()} src={profile.getImageUrl()} />\n                                    </Tooltip>\n                                </ProfileAvatar>\n                            )}\n                            <TooltipButton title=\"SignOut\" onClick={handleSignoutClick}>\n                                <ExitToAppIcon />\n                            </TooltipButton>\n                        </>\n                    ) : (\n                        <SignInButton onClick={GoogleApi.signIn} />\n                    )}\n                </Toolbar>\n            </CustomAppBar>\n            <CustomDrawer open={open}>\n                <DrawerToolbar>\n                    <IconButton onClick={handleDrawerClose}>{MainTheme.direction === \"rtl\" ? <ChevronRightIcon /> : <ChevronLeftIcon />}</IconButton>\n                </DrawerToolbar>\n                <Divider />\n                <DrawerDeckList open={open} />\n            </CustomDrawer>\n            <MainContent open={open}>\n                <BrowserRouter basename={process.env.PUBLIC_URL}>\n                    <Redirect to={isSignedIn ? \"/\" : \"/signin/\"} />\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route exact path=\"/signin/\" component={SignIn} />\n                        <Route component={NotFound} />\n                    </Switch>\n                </BrowserRouter>\n            </MainContent>\n        </State.Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { CssBaseline } from \"@material-ui/core\";\nimport { ThemeProvider as MUIThemeProvider, StylesProvider } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { MainTheme } from \"./Components/Styled/Theme\";\n\nReactDOM.render(\n    <StylesProvider injectFirst>\n        <ThemeProvider theme={MainTheme}>\n            <MUIThemeProvider theme={MainTheme}>\n                <CssBaseline />\n                <App />\n            </MUIThemeProvider>\n        </ThemeProvider>\n    </StylesProvider>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}