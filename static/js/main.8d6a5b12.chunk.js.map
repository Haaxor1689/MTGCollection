{"version":3,"sources":["Assets/logo.png","State/index.ts","State/Reducers.ts","Utility/CollectionParser.ts","Utility/GoogleApi.ts","Utility/Scry/index.ts","Components/Styled/CardNameAutocomplete.tsx","Components/Styled/Theme.ts","Components/Styled/Grid.tsx","Components/Applets/AddDeck.tsx","Utility/Assert.ts","Utility/useCardAction.ts","Components/Styled/IncrementNumber.tsx","Components/Styled/SymbolIcon.tsx","Components/Styled/SymbolTypography.tsx","Components/Previews/CompressedCard.tsx","Components/Styled/IndentedTypography.tsx","Components/Previews/CompressedCollection.tsx","Components/Styled/TooltipButton.tsx","Components/Previews/ActionButtons/ChangeSectionButton.tsx","Components/Previews/ActionButtons/DeleteButton.tsx","Components/Previews/ActionButtons/WishlistButton.tsx","Components/Previews/ImagesCard.tsx","Components/Previews/ImagesCollection.tsx","Components/Styled/SetIcon.tsx","Components/Previews/ListCard.tsx","Components/Previews/ListCollection.tsx","Components/Previews/CollectionPreview.tsx","Components/Previews/Common/PreviewStyleToggle.tsx","Components/Previews/Common/ShowGroupsToggle.tsx","Components/Previews/Common/SortToggle.tsx","Components/Styled/Icons.tsx","Components/Applets/DeckPreview.tsx","Components/Applets/UserInfo.tsx","Components/Drawer/DeckAvatar.tsx","Components/Drawer/DrawerDeckList.tsx","Components/Applets/CardSearch.tsx","Components/Applets/DeckBox.tsx","Components/Applets/DeckList.tsx","Components/Home.tsx","Components/NotFound.tsx","Components/SignInButton.tsx","Components/SignIn.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DeckName","SectionName","getDeckName","name","Collection","Wishlist","reducers","EmptyCards","sections","reduce","obj","s","Default","initialState","files","decks","cards","cardList","symbolList","setList","selectedDeck","State","React","createContext","undefined","reducer","state","action","type","link","omit","card","symbols","symbol","sets","code","isDirty","amount","deckName","sectionName","temp","i","CollectionParser","serialize","collection","split","map","section","index","lines","line","match","filter","isNull","parseInt","comment","prev","val","p","v","deserialize","deck","Object","entries","str","values","GoogleApiInit","apiKey","process","clientId","discoveryDocs","scope","createNewFile","a","async","props","fileContent","folder","file","Blob","metadata","mimeType","appProperties","parents","accessToken","gapi","auth","getToken","access_token","form","FormData","append","JSON","stringify","fetch","method","headers","Headers","Authorization","body","res","json","id","getFileContents","client","drive","get","fileId","alt","deleteFile","delete","createNewDeck","dispatch","restProps","Sideboard","Maybeboard","GoogleApi","initClient","onUpdateStatus","load","init","then","auth2","getAuthInstance","isSignedIn","listen","console","error","getProfile","currentUser","getBasicProfile","signIn","signOut","prepareAppData","list","spaces","fields","response","collectionFile","result","find","f","info","wishlistFile","otherFiles","length","previewUrl","updateFile","deleteDeck","Api","endpoint","Axios","create","baseURL","responseType","Symbology","All","r","data","ParseMana","cost","params","Cards","Autocomplete","q","include_extras","Named","fuzzy","Sets","Scry","getImage","images","layout","card_faces","image_uris","getPlaceholder","cardName","replace","getColorIdentity","c","flatMap","color_identity","self","indexOf","join","CardNameAutocomplete","label","onNameSelect","useState","value","setValue","open","setOpen","options","setOptions","isLoading","setIsLoading","typingTimer","setTypingTimer","onChange","newValue","useEffect","style","width","onOpen","onClose","e","onInputChange","reason","clearTimeout","setTimeout","names","toLowerCase","includes","loading","renderInput","TextField","fullWidth","variant","InputProps","endAdornment","Fragment","CircularProgress","color","size","MainTheme","createMuiTheme","palette","primary","main","colors","deepOrange","secondary","blueGrey","constants","drawerWidth","drawerWidthClosed","appletHeight","css","ThemeProv","styledCss","styled","baseStyled","FlexCol","div","AppletContent","Paper","theme","spacing","breakpoints","down","AppletActions","Title","Typography","attrs","component","gutterBottom","DrawerAvatar","Avatar","background","paper","text","PreviewRow","AddDeck","history","useHistory","useContext","importText","setImportText","setDeckName","invalidName","setInvalidName","setPreviewUrl","handleClose","handleImport","push","encodeURIComponent","validateName","helperText","target","src","ButtonGroup","Button","disabled","onClick","Dialog","aria-labelledby","maxWidth","DialogTitle","DialogContent","DialogContentText","autoFocus","multiline","rows","DialogActions","assert","condition","message","AssertionError","useCardActions","targetDeck","isOnWishlist","keys","updateCardQuantity","isNullOrUndefined","openScryfallPage","scryfall_uri","window","openScryfallSetPage","scryfall_set_uri","toggleWishlist","wishlistTooltip","removeCard","changeSection","newSection","addToDeck","StyledAvatar","className","Body","Arrows","IconButton","IncrementNumber","incr","stopPropagation","title","sizeMap","Symbol","svg","SymbolIcon","symbolObj","setSymbolObj","loose_variant","dangerouslySetInnerHTML","__html","SymbolTypography","typographyProps","parsed","setParsed","m","key","CustomChip","Chip","CompressedCard","deleteIcon","mana_cost","noWrap","avatar","onDelete","IndentedTypography","CompressedCollecion","sortBy","sortOrder","showGroups","Grid","container","direction","item","xs","zeroMinWidth","StyledIconButton","darken","dark","TooltipButton","children","Tooltip","aria-label","ChangeSectionButton","actions","anchorRef","useRef","event","current","contains","ref","prevOpen","Popper","anchorEl","role","transition","TransitionProps","placement","Grow","transformOrigin","elevation","ClickAwayListener","onClickAway","MenuList","MenuItem","DeleteButton","WishlistButton","Image","img","IncrementActions","BottomActions","ActionsMenu","ImagesCard","actionsOpen","setActionsOpen","Fab","ImagesCollecion","alignItems","lg","xl","Set","rarity","SetIcon","set","setObj","setSetObj","offset","stopColor","gradientTransform","icon_svg","StyledRow","TableRow","default","Actions","between","ListCard","SetWidthCell","align","NameCell","Link","href","TableCell","position","CustomPaddingTable","Table","ListCollecion","TableHead","TableBody","colSpan","desc","b","orderBy","func","getSorting","order","StableSort","array","cmp","stabilizedThis","el","sort","rarityOrder","GetSortFunction","CollectionPreview","passedProps","renderCollection","PreviewStyleToggle","onToggle","Error","IconForStyle","ShowGroupsToggle","show","setShow","SortToggle","setSortBy","setSortOrder","startIcon","by","selected","IconWrap","CompressIcon","icon","faCompressAlt","ExpandIcon","faExpandAlt","GoogleIcon","faGoogle","ClipboardIcon","faClipboard","SectionRow","scrollable","ExportRow","AppletBackground","fade","DeckPreview","useParams","decodeURIComponent","expanded","setExpanded","exportOpened","setExportOpened","setStyle","setShowGroups","missingCards","byName","on","justify","copy","readOnly","UserInfo","DeckAvatar","Badge","invisible","overlap","badgeContent","anchorOrigin","vertical","horizontal","StyledItemText","ListItemText","DrawerDeckList","pathname","useLocation","renderItem","ListItem","to","button","ListItemAvatar","List","Divider","CardSearch","setCardName","autoompleteOptions","setAutocompleteOptions","dialogOpen","setDialogOpen","closeDialog","g","u","w","colorExactMatch","cmc","cmcType","setFilter","handleColors","newFilter","checked","freeSolo","autoHighlight","disableClearable","inputValue","FormGroup","row","FormControlLabel","control","Checkbox","alert","DeckBoxBody","DeckBoxAvatar","DeckBoxTitle","grey","DeckColorIdentity","LargeIcon","LargeFavoriteIcon","FavoriteIcon","LargeCollectionsIcon","CollectionsIcon","LargeAddCircleOutlineIcon","AddCircleOutlineIcon","DeckBox","DeckList","sm","Home","NotFound","SignInButton","SignIn","padding","Logo","height","draggable","bodyOpen","transitions","easing","sharp","duration","enteringScreen","bodyClose","leavingScreen","CustomAppBar","AppBar","zIndex","drawer","MenuButton","drawerOpen","drawerClose","CustomDrawer","Drawer","DrawerToolbar","Toolbar","NoGutterContainer","Container","MainContent","ProfileAvatar","App","useReducer","profile","setProfile","setIsSignedIn","handleDrawerClose","redirect","location","Promise","all","svg_uri","transformResponse","responses","icon_svg_uri","Provider","edge","overflow","underline","getGivenName","getEmail","getImageUrl","exact","path","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","basename","StylesProvider","injectFirst","CssBaseline","document","getElementById","URL","origin","addEventListener","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8d6a5b12.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.81aa9e7e.png\";","import React from \"react\";\nimport Scry from \"scryfall-sdk\";\nimport DeepReadonly from \"../Utility/DeepReadonly\";\nimport { ScryCardSymbol, ScrySet } from \"../Utility/Scry/Types\";\nimport { Action } from \"./Actions\";\n\nexport enum DeckName {\n    Collection = \"_collection\",\n    Wishlist = \"_wishlist\",\n}\n\nexport const getDeckName = (name: string) => {\n    if (name === DeckName.Collection) return \"Collection\";\n    if (name === DeckName.Wishlist) return \"Wishlist\";\n    return name;\n};\n\nexport enum SectionName {\n    Default = \"_default\",\n    Sideboard = \"Sideboard\",\n    Maybeboard = \"Maybeboard\",\n}\n\nexport const EmptyCards = (...sections: string[]): DeckCards => sections.reduce((obj, s) => ({ ...obj, [s]: {} }), { [SectionName.Default]: {} });\n\nexport type DeckCardList = DeepReadonly<{\n    [cardName: string]: DeckCard;\n}>;\n\nexport type DeckCards = DeepReadonly<{\n    [SectionName.Default]: DeckCardList;\n    [section: string]: DeckCardList;\n}>;\n\nexport type DeckCard = DeepReadonly<{\n    amount: number;\n    name: string;\n    comment?: string;\n}>;\n\nexport type DeckProps = Omit<Deck, \"cards\">;\n\nexport type Deck = DeepReadonly<{\n    name: string;\n    previewUrl?: string;\n    cards: DeckCards;\n    isDirty?: boolean;\n}>;\n\nexport type FileIds = DeepReadonly<{\n    [DeckName.Collection]: string;\n    [DeckName.Wishlist]: string;\n    [deckName: string]: string;\n}>;\n\nexport type Decks = DeepReadonly<{\n    [DeckName.Collection]: Deck;\n    [DeckName.Wishlist]: Deck;\n    [deckName: string]: Deck;\n}>;\n\nexport type CardList = DeepReadonly<{\n    [cardName: string]: Scry.Card;\n}>;\n\nexport type SymbolList = DeepReadonly<{\n    [symbol: string]: ScryCardSymbol;\n}>;\n\nexport type SetList = DeepReadonly<{\n    [setName: string]: ScrySet;\n}>;\n\nexport type AppState = DeepReadonly<{\n    files: FileIds;\n    decks: Decks;\n    cardList: CardList;\n    symbolList: SymbolList;\n    setList: SetList;\n    selectedDeck: string | null;\n}>;\n\nexport const initialState: AppState = {\n    files: {\n        [DeckName.Collection]: \"\",\n        [DeckName.Wishlist]: \"\",\n    },\n    decks: {\n        [DeckName.Collection]: { name: DeckName.Collection, cards: EmptyCards() },\n        [DeckName.Wishlist]: { name: DeckName.Wishlist, cards: EmptyCards() },\n    },\n    cardList: {},\n    symbolList: {},\n    setList: {},\n    selectedDeck: DeckName.Collection\n};\n\nexport const State = React.createContext<[AppState, React.Dispatch<Action>]>([initialState, undefined as any]);\n","import { omit } from \"lodash\";\nimport { AppState, CardList, Decks, EmptyCards, FileIds, SetList, SymbolList } from \".\";\nimport { Action } from \"./Actions\";\n\nconst filesReducer = (state: FileIds, action: Action): FileIds => {\n    switch (action.type) {\n        case \"CreateDeck\":\n            return {\n                ...state,\n                [action.name]: action.link,\n            };\n        case \"DeleteDeck\":\n            return { ...omit(state, [action.name]) } as FileIds;\n    }\n    return state;\n};\n\nconst cardListReducer = (state: CardList, action: Action): CardList => {\n    switch (action.type) {\n        case \"AddCard\":\n            return {\n                ...state,\n                [action.card.name]: action.card,\n            };\n    }\n    return state;\n};\n\nconst symbolListReducer = (state: SymbolList, action: Action): SymbolList => {\n    switch (action.type) {\n        case \"AddSymbols\":\n            return action.symbols.reduce((obj, s) => ({ ...obj, [s.symbol]: s }), {});\n    }\n    return state;\n};\n\nconst setListReducer = (state: SetList, action: Action): SetList => {\n    switch (action.type) {\n        case \"AddSets\":\n            return action.sets.reduce((obj, s) => ({ ...obj, [s.code]: s }), {});\n    }\n    return state;\n};\n\nconst decksReducer = (state: Decks, action: Action): Decks => {\n    switch (action.type) {\n        case \"CreateDeck\":\n            return {\n                ...state,\n                [action.name]: {\n                    cards: EmptyCards(),\n                    ...omit(action, [\"type\", \"link\"]),\n                },\n            };\n        case \"UpdateDeck\":\n            return {\n                ...state,\n                [action.name]: {\n                    ...state[action.name],\n                    isDirty: true,\n                    ...omit(action, [\"type\"]),\n                },\n            };\n        case \"UpdateDeckCard\":\n            if (action.card.amount === 0) {\n                return {\n                    ...state,\n                    [action.deckName]: {\n                        ...state[action.deckName],\n                        cards: {\n                            ...state[action.deckName].cards,\n                            [action.sectionName]: omit(state[action.deckName].cards[action.sectionName], action.card.name),\n                        },\n                        isDirty: true,\n                    },\n                };\n            }\n            return {\n                ...state,\n                [action.deckName]: {\n                    ...state[action.deckName],\n                    cards: {\n                        ...state[action.deckName].cards,\n                        [action.sectionName]: {\n                            ...state[action.deckName].cards[action.sectionName],\n                            [action.card.name]: {\n                                ...state[action.deckName].cards[action.sectionName][action.card.name],\n                                ...action.card,\n                            },\n                        },\n                    },\n                    isDirty: true,\n                },\n            };\n        case \"DeleteDeck\":\n            return { ...omit(state, [action.name]) } as Decks;\n    }\n    return state;\n};\n\nconst selectedDeckReducer = (state: string | null, action: Action): string | null => {\n    switch (action.type) {\n        case \"SelectDeck\":\n            return action.name;\n        case \"DeleteDeck\":\n            return action.name === state ? null : state;\n    }\n    return state;\n};\n\nconst combineReducers = <State, Action>(reducers: { [P in keyof State]: (state: State[P], action: Action) => State[P] }) => {\n    return (state: State, action: Action) => {\n        const temp: State = {} as any;\n        for (const i in reducers) {\n            temp[i] = reducers[i](state[i], action);\n        }\n        return temp;\n    };\n};\n\nexport const reducer = combineReducers<AppState, Action>({\n    files: filesReducer,\n    cardList: cardListReducer,\n    symbolList: symbolListReducer,\n    setList: setListReducer,\n    decks: decksReducer,\n    selectedDeck: selectedDeckReducer,\n});\n","import { isNull } from \"lodash\";\nimport { DeckCard, DeckCards, EmptyCards, SectionName } from \"../State\";\n\nconst serialize = (collection?: string, ...sections: string[]): DeckCards => {\n    if (!collection || collection === \"\") {\n        return EmptyCards(...sections);\n    }\n    return collection\n        .split(\"##\")\n        .map((section, index) => {\n            let name: string, lines: string[];\n            if (index === 0) {\n                name = SectionName.Default;\n                lines = section.split(/\\r?\\n/);\n            } else {\n                [name, ...lines] = section.split(/\\r?\\n/);\n            }\n            return [\n                name,\n                lines\n                    .map(line => line.match(/^(\\d*) +(.*?)(?: # (.*))?$/))\n                    .filter(match => !isNull(match))\n                    .map(match => ({\n                        amount: parseInt(match![1]),\n                        name: match![2],\n                        comment: match![3],\n                    })),\n            ] as [string, DeckCard[]];\n        })\n        .reduce(\n            (prev, val) => ({ ...prev, [val[0]]: val[1].reduce((p, v) => ({ ...p, [v.name]: v }), {}) }),\n            EmptyCards(...sections)\n        );\n};\n\nconst deserialize = (deck: DeckCards) =>\n    Object.entries(deck).reduce(\n        (str, section) =>\n            `${str}${section[0] !== SectionName.Default ? `#${section[0]}\\n` : \"\"}${Object.values(section[1]).reduce(\n                (s, card) => `${s}${card.amount} ${card.name}${card.comment ? ` # ${card.comment}` : \"\"}\\n`,\n                \"\"\n            )}\\n`,\n        \"\"\n    );\n\nconst CollectionParser = {\n    serialize,\n    deserialize,\n};\n\nexport default CollectionParser;\n","/* global gapi */\nimport React from \"react\";\nimport { DeckName, DeckProps, SectionName } from \"../State\";\nimport { Action } from \"../State/Actions\";\nimport CollectionParser from \"./CollectionParser\";\n\nconst GoogleApiInit = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    clientId: process.env.REACT_APP_CLIENT_ID,\n    discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"],\n    scope: \"profile https://www.googleapis.com/auth/drive.appdata https://www.googleapis.com/auth/drive.file\",\n};\n\nconst initClient = (onUpdateStatus: (isSignedIn: boolean) => void) => {\n    gapi.load(\"client:auth2\", () => {\n        gapi.client.init(GoogleApiInit).then(() => {\n            gapi.auth2.getAuthInstance().isSignedIn.listen(onUpdateStatus);\n            onUpdateStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n        }, console.error);\n    });\n};\n\nconst prepareAppData = () => async (dispatch: React.Dispatch<Action>) => {\n    var response = await gapi.client.drive.files.list({\n        spaces: \"appDataFolder\",\n        fields: \"nextPageToken, files(id, name, appProperties)\",\n    });\n\n    const collectionFile = response.result?.files?.find(f => f.appProperties?.name === DeckName.Collection);\n    if (!collectionFile) {\n        console.info(\"Creating collection...\");\n        createNewDeck(dispatch, { name: DeckName.Collection });\n    } else {\n        console.info(\"Loading collection...\");\n        dispatch({ type: \"CreateDeck\", name: DeckName.Collection, link: collectionFile.id! });\n        dispatch({\n            type: \"UpdateDeck\",\n            name: DeckName.Collection,\n            cards: CollectionParser.serialize(await getFileContents({ id: collectionFile.id! })),\n            isDirty: false,\n        });\n    }\n\n    const wishlistFile = response.result?.files?.find(f => f.appProperties?.name === DeckName.Wishlist);\n    if (!wishlistFile) {\n        console.info(\"Creating wishlist...\");\n        createNewDeck(dispatch, { name: DeckName.Wishlist });\n    } else {\n        console.info(\"Loading wishlist...\");\n        dispatch({ type: \"CreateDeck\", name: DeckName.Wishlist, link: wishlistFile.id! });\n        dispatch({\n            type: \"UpdateDeck\",\n            name: DeckName.Wishlist,\n            cards: CollectionParser.serialize(await getFileContents({ id: wishlistFile.id! })),\n            isDirty: false,\n        });\n    }\n\n    const otherFiles = response.result?.files?.filter(f => f.appProperties?.name !== DeckName.Collection && f.appProperties?.name !== DeckName.Wishlist)!;\n    for (let i = 0; i < otherFiles.length; i++) {\n        const file = otherFiles[i];\n        const name = file.appProperties?.name ?? file.name?.match(/(.*?)\\.txt/)?.[0] ?? \"unnamed\";\n        dispatch({ type: \"CreateDeck\", name, link: file.id! });\n        dispatch({\n            type: \"UpdateDeck\",\n            name,\n            previewUrl: file.appProperties?.previewUrl,\n            cards: CollectionParser.serialize(await getFileContents({ id: file.id! }), SectionName.Sideboard, SectionName.Maybeboard),\n            isDirty: false,\n        });\n    }\n};\n\nconst createNewFile = async ({\n    name,\n    props,\n    fileContent,\n    folder,\n}: {\n    name: string;\n    props?: object;\n    fileContent?: string;\n    folder?: string[];\n}): Promise<string> => {\n    const file = new Blob([fileContent ?? \"\"], { type: \"text/plain\" });\n    const metadata = {\n        name,\n        mimeType: \"text/plain\",\n        appProperties: props ?? {},\n        parents: [\"appDataFolder\", ...(folder ?? [])],\n    };\n\n    const accessToken = gapi.auth.getToken().access_token;\n    const form = new FormData();\n    form.append(\"metadata\", new Blob([JSON.stringify(metadata)], { type: \"application/json\" }));\n    form.append(\"file\", file);\n\n    const res = await fetch(\"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id\", {\n        method: \"POST\",\n        headers: new Headers({ Authorization: \"Bearer \" + accessToken }),\n        body: form,\n    });\n    const val = await res.json();\n    return val.id;\n};\n\nconst updateFile = async ({ id, fileContent }: { id: string; fileContent: string }) => {\n    const file = new Blob([fileContent], { type: \"text/plain\" });\n\n    const accessToken = gapi.auth.getToken().access_token;\n    const form = new FormData();\n    form.append(\"file\", file);\n\n    const res = await fetch(`https://www.googleapis.com/upload/drive/v3/files/${id}?uploadType=media&fields=id`, {\n        method: \"PATCH\",\n        headers: new Headers({ Authorization: \"Bearer \" + accessToken }),\n        body: form,\n    });\n    const val = await res.json();\n    return val.id;\n};\n\nconst getFileContents = async ({ id }: { id: string }) => {\n    const res = await gapi.client.drive.files.get({\n        fileId: id,\n        alt: \"media\",\n    });\n    return res.body;\n};\n\nconst deleteFile = async ({ id }: { id: string }) => gapi.client.drive.files.delete({ fileId: id });\n\nconst createNewDeck = async (dispatch: React.Dispatch<Action>, { name, fileContent, ...restProps }: DeckProps & { fileContent?: string }) => {\n    dispatch({\n        type: \"CreateDeck\",\n        name,\n        link: await createNewFile({\n            name: `${name}.txt`,\n            props: {\n                name,\n                ...restProps,\n            },\n            fileContent,\n        }),\n        cards: CollectionParser.serialize(fileContent, SectionName.Sideboard, SectionName.Maybeboard),\n        isDirty: false,\n        ...restProps,\n    });\n};\n\nconst deleteDeck = async (dispatch: React.Dispatch<Action>, { name, id }: { name: string; id: string }) => {\n    await deleteFile({ id });\n    dispatch({ type: \"DeleteDeck\", name });\n};\n\nconst getProfile = () => {\n    return gapi.auth2\n        .getAuthInstance()\n        .currentUser.get()\n        .getBasicProfile();\n};\n\nconst signIn = () => gapi.auth2.getAuthInstance().signIn();\nconst signOut = () => gapi.auth2.getAuthInstance().signOut();\n\nexport type GoogleProfile = gapi.auth2.BasicProfile;\n\nconst GoogleApi = {\n    initClient,\n    getProfile,\n    signIn,\n    signOut,\n    prepareAppData,\n    createNewFile,\n    updateFile,\n    deleteFile,\n    createNewDeck,\n    deleteDeck,\n    getFileContents,\n};\nexport default GoogleApi;\n","import ScrySdk from \"scryfall-sdk\";\nimport DeepReadonly from \"../DeepReadonly\";\nimport Axios from \"axios\";\nimport { ScryCardSymbol, ScryManaCost, ScrySet } from \"./Types\";\n\ntype List<T = any> = {\n    data: T[];\n};\n\nconst Api = (() => {\n    let endpoint = Axios.create({\n        baseURL: \"https://api.scryfall.com\",\n        responseType: \"json\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    return {\n        endpoint,\n        Symbology: {\n            All: () => endpoint.get<List<ScryCardSymbol>>(\"/symbology\").then(r => r.data.data),\n            ParseMana: (cost: string) =>\n                endpoint\n                    .get<ScryManaCost>(\"/symbology/parse-mana\", { params: { cost } })\n                    .then(r => r.data),\n        },\n        Cards: {\n            Autocomplete: (q: string) =>\n                endpoint\n                    .get<List<string>>(\"/cards/autocomplete\", { params: { q, include_extras: true } })\n                    .then(r => r.data.data),\n            Named: (fuzzy: string) =>\n                endpoint\n                    .get<ScrySdk.Card>(\"/cards/named\", { params: { fuzzy } })\n                    .then(r => r.data),\n        },\n        Sets: {\n            All: () => endpoint.get<List<ScrySet>>(\"/sets\").then(r => r.data.data),\n        },\n    };\n})();\n\nconst getImage = (card: DeepReadonly<ScrySdk.Card>, type: keyof ScrySdk.ImageUris): string | null => {\n    var images: ScrySdk.ImageUris | null | undefined;\n    switch (card.layout) {\n        case \"transform\":\n        case \"double_faced_token\":\n            images = card.card_faces![0].image_uris;\n            break;\n        default:\n            images = card.image_uris;\n    }\n    return images?.[type] ?? null;\n};\n\nconst getPlaceholder = (cardName: string): string => `https://via.placeholder.com/146x204?text=${cardName.replace(/\\s/, \"+\")}`;\n\nconst getColorIdentity = (...cards: DeepReadonly<ScrySdk.Card>[]): string =>\n    cards\n        .filter(c => !!c)\n        .flatMap(c => c.color_identity)\n        .filter((v, i, self) => self.indexOf(v) === i)\n        .map(c => `{${c}}`)\n        .join(\"\");\n\nconst Scry = {\n    ...Api,\n    getImage,\n    getPlaceholder,\n    getColorIdentity,\n};\nexport default Scry;\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Scry from \"../../Utility/Scry\";\r\n\r\ntype Props = {\r\n    label: string;\r\n    onNameSelect?: (name: string) => void;\r\n};\r\n\r\nconst CardNameAutocomplete: React.FC<Props> = ({ label, onNameSelect }) => {\r\n    const [value, setValue] = React.useState<string>(\"\");\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState<string[]>([]);\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n    const [typingTimer, setTypingTimer] = React.useState<number | undefined>(undefined);\r\n\r\n    const onInputChange = (newValue: string, reason: \"input\" | \"reset\") => {\r\n        if (value === newValue || reason === \"reset\") {\r\n            return;\r\n        }\r\n        setValue(newValue);\r\n\r\n        clearTimeout(typingTimer);\r\n        setTypingTimer(\r\n            setTimeout(() => {\r\n                if (newValue.length < 2) {\r\n                    return;\r\n                }\r\n                setIsLoading(true);\r\n                Scry.Cards.Autocomplete(newValue).then(names => {\r\n                    setOptions(names);\r\n                    setIsLoading(false);\r\n                    if (names.length === 1 && names[0].toLowerCase().includes(newValue.toLowerCase())) {\r\n                        setValue(names[0]);\r\n                        onChange(names[0]);\r\n                        setOpen(false);\r\n                    }\r\n                });\r\n            }, 500)\r\n        );\r\n    };\r\n\r\n    const onChange = (newValue: string) => {\r\n        setValue(newValue);\r\n        setOptions([]);\r\n        onNameSelect && onNameSelect(newValue);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            style={{ width: 300 }}\r\n            open={open}\r\n            value={value}\r\n            onOpen={() => setOpen(true)}\r\n            onClose={() => setOpen(false)}\r\n            onChange={(e, val) => onChange(val)}\r\n            onInputChange={(e, val, reason) => onInputChange(val, reason)}\r\n            options={options}\r\n            loading={isLoading}\r\n            renderInput={params => (\r\n                <TextField\r\n                    {...params}\r\n                    label={label}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {isLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    );\r\n};\r\nexport default CardNameAutocomplete;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport baseStyled, { css as styledCss, ThemedStyledInterface, ThemedStyledProps, ThemeProvider as ThemeProv } from \"styled-components\";\r\nimport { colors } from \"@material-ui/core\";\r\n\r\nconst additionalArgs = {\r\n    constants: {\r\n        drawerWidth: \"260px\",\r\n        drawerWidthClosed: \"72px\",\r\n        appletHeight: \"280px\",\r\n    },\r\n};\r\n\r\nexport const MainTheme = createMuiTheme(\r\n    {\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: colors.deepOrange[700] },\r\n            secondary: { main: colors.blueGrey[500] },\r\n        },\r\n    },\r\n    additionalArgs\r\n);\r\n\r\nexport const ThemeProvider = ThemeProv;\r\nexport const css = styledCss;\r\n\r\nexport type Theme = typeof MainTheme & typeof additionalArgs;\r\nexport type ComponentProps<T = {}> = ThemedStyledProps<T, Theme>;\r\nconst styled = baseStyled as ThemedStyledInterface<Theme>;\r\nexport default styled;\r\n","import { Avatar, Paper, Typography } from \"@material-ui/core\";\r\nimport styled from \"./Theme\";\r\n\r\nexport const FlexCol = styled.div`\r\n    flex: 1 1 auto;\r\n`;\r\n\r\nexport const AppletContent = styled(Paper)`\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n    min-height: ${p => p.theme.constants.appletHeight};\r\n    overflow: hidden;\r\n    padding: ${p => p.theme.spacing(4)}px;\r\n    ${p => p.theme.breakpoints.down(\"xs\")} {\r\n        & {\r\n            padding: ${p => p.theme.spacing(2)}px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const AppletActions = styled.div`\r\n    align-self: flex-end;\r\n`;\r\n\r\nexport const Title = styled(Typography).attrs(p => ({\r\n    component: \"h2\",\r\n    variant: \"h4\",\r\n    color: \"primary\",\r\n    gutterBottom: true,\r\n}))``;\r\n\r\nexport const DrawerAvatar = styled(Avatar)`\r\n    background-color: ${p => p.theme.palette.background.paper};\r\n    color: ${p => p.theme.palette.text.secondary};\r\n`;\r\n","import { Avatar, Button, ButtonGroup, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField } from \"@material-ui/core\";\nimport CollectionsIcon from \"@material-ui/icons/Collections\";\nimport React from \"react\";\nimport { State } from \"../../State\";\nimport GoogleApi from \"../../Utility/GoogleApi\";\nimport Scry from \"../../Utility/Scry\";\nimport CardNameAutocomplete from \"../Styled/CardNameAutocomplete\";\nimport { AppletActions, AppletContent, FlexCol, Title } from \"../Styled/Grid\";\nimport styled from \"../Styled/Theme\";\nimport { useHistory } from \"react-router\";\n\nconst PreviewRow = styled.div`\n    display: flex;\n    margin-top: ${p => p.theme.spacing(1)}px;\n    align-items: center;\n\n    & .MuiAutocomplete-root {\n        flex-grow: 1;\n        margin-right: ${p => p.theme.spacing(1)}px;\n    }\n`;\n\nconst AddDeck: React.FC = () => {\n    const history = useHistory();\n    const [state, dispatch] = React.useContext(State);\n\n    const [importText, setImportText] = React.useState<string>(\"\");\n    const [deckName, setDeckName] = React.useState<string>(\"\");\n    const [open, setOpen] = React.useState(false);\n    const [invalidName, setInvalidName] = React.useState<string | null>(null);\n\n    const [previewUrl, setPreviewUrl] = React.useState<string>(\"\");\n\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    const handleImport = () => {\n        GoogleApi.createNewDeck(dispatch, { name: deckName, fileContent: importText, previewUrl });\n        history.push(`/decks/${encodeURIComponent(deckName)}`);\n    };\n\n    const validateName = (name: string) => {\n        setDeckName(name);\n        if (name === \"\") {\n            setInvalidName(\"Deck name can't be empty\");\n            return;\n        }\n        if (name.indexOf(\"%\") >= 0) {\n            setInvalidName(\"Deck name can't contain '%'\");\n            return;\n        }\n        if (state.decks[name]) {\n            setInvalidName(\"Deck with this name already exists\");\n            return;\n        }\n        setInvalidName(null);\n    };\n\n    const updatePreview = (name: string) => {\n        if (!name) {\n            setPreviewUrl(\"\");\n            return;\n        }\n        Scry.Cards.Named(name).then(card => {\n            setPreviewUrl(Scry.getImage(card, \"art_crop\") ?? \"\");\n        });\n    };\n\n    React.useEffect(() => validateName(\"\"), []);\n\n    return (\n        <AppletContent>\n            <Title>Add deck</Title>\n            <FlexCol>\n                <TextField\n                    label=\"Deck name\"\n                    variant=\"outlined\"\n                    error={!!invalidName}\n                    helperText={invalidName}\n                    value={deckName}\n                    onChange={e => validateName(e.target.value)}\n                    fullWidth\n                />\n                <PreviewRow>\n                    <CardNameAutocomplete label=\"Preview card\" onNameSelect={updatePreview} />\n                    <Avatar alt=\"Preview icon\" src={previewUrl}>\n                        <CollectionsIcon />\n                    </Avatar>\n                </PreviewRow>\n            </FlexCol>\n            <AppletActions>\n                <ButtonGroup size=\"small\">\n                    <Button disabled={!!invalidName} onClick={handleClickOpen}>\n                        Import\n                    </Button>\n                    <Button disabled={!!invalidName} color=\"primary\" onClick={handleImport}>\n                        Create empty\n                    </Button>\n                </ButtonGroup>\n            </AppletActions>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"import-deck-dialog\" fullWidth maxWidth=\"md\">\n                <DialogTitle id=\"import-deck-dialog\">Import</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>Paste exported deck below.</DialogContentText>\n                    <TextField\n                        autoFocus\n                        fullWidth\n                        label=\"Import\"\n                        multiline\n                        rows=\"15\"\n                        variant=\"outlined\"\n                        value={importText}\n                        onChange={e => setImportText(e.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleImport} color=\"primary\">\n                        Import\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </AppletContent>\n    );\n};\n\nexport default AddDeck;\n","import { AssertionError } from \"assert\";\r\n\r\nfunction assert(condition: any, message: string): asserts condition {\r\n    if (!condition) {\r\n        throw new AssertionError({ message });\r\n    }\r\n}\r\nexport default assert;","import React from \"react\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport { CollectionCardProps } from \"../Components/Previews/CollectionPreview\";\r\nimport { DeckName, SectionName, State } from \"../State\";\r\nimport assert from \"./Assert\";\r\n\r\nconst useCardActions = ({ card, deckName, sectionName }: CollectionCardProps) => {\r\n    const [state, dispatch] = React.useContext(State);\r\n\r\n    const targetDeck = deckName ?? state.selectedDeck ?? null;\r\n    const isOnWishlist = () => state.decks[DeckName.Wishlist].cards[SectionName.Default][card.name] !== undefined;\r\n    const sections = (targetDeck ? Object.keys(state.decks[targetDeck].cards) : []).filter(s => s !== sectionName);\r\n    return {\r\n        updateCardQuantity: (val: number) => {\r\n            assert(!isNullOrUndefined(deckName), \"DeckName should not be empty if the preview actions are Deck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: sectionName ?? SectionName.Default,\r\n                card: {\r\n                    ...card,\r\n                    amount: val,\r\n                },\r\n            });\r\n        },\r\n        openScryfallPage: () => card.scryfall_uri && window.open(card.scryfall_uri, \"_blank\"),\r\n        openScryfallSetPage: () => card.scryfall_set_uri && window.open(card.scryfall_set_uri, \"_blank\"),\r\n        isOnWishlist,\r\n        toggleWishlist: () =>\r\n            isOnWishlist()\r\n                ? dispatch({\r\n                    type: \"UpdateDeckCard\",\r\n                    deckName: DeckName.Wishlist,\r\n                    sectionName: SectionName.Default,\r\n                    card: {\r\n                        ...card,\r\n                        amount: 0,\r\n                    },\r\n                })\r\n                : dispatch({\r\n                    type: \"UpdateDeckCard\",\r\n                    deckName: DeckName.Wishlist,\r\n                    sectionName: SectionName.Default,\r\n                    card: {\r\n                        ...card,\r\n                        amount: 1,\r\n                    },\r\n                }),\r\n        wishlistTooltip: () => (isOnWishlist() ? \"Remove from wishlist\" : \"Add to wishlist\"),\r\n        removeCard: () => {\r\n            assert(!isNullOrUndefined(deckName), \"DeckName should not be empty if the preview actions are Deck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: sectionName ?? SectionName.Default,\r\n                card: {\r\n                    ...card,\r\n                    amount: 0,\r\n                },\r\n            });\r\n        },\r\n        sections,\r\n        changeSection: (newSection: string) => {\r\n            assert(!isNullOrUndefined(deckName), \"DeckName should not be empty if the preview actions are Deck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: sectionName ?? SectionName.Default,\r\n                card: {\r\n                    ...card,\r\n                    amount: 0,\r\n                },\r\n            });\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName,\r\n                sectionName: newSection,\r\n                card: {\r\n                    ...card,\r\n                    amount: card.amount,\r\n                },\r\n            });\r\n        },\r\n        addToDeck: (section: string = SectionName.Default) => {\r\n            assert(!isNullOrUndefined(targetDeck), \"TargetDeck should not be empty if the preview actions are SearchDeck\");\r\n            dispatch({\r\n                type: \"UpdateDeckCard\",\r\n                deckName: targetDeck,\r\n                sectionName: section,\r\n                card: {\r\n                    ...card,\r\n                    amount: 1,\r\n                },\r\n            });\r\n        }\r\n    } as const;\r\n};\r\nexport default useCardActions;\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport { AvatarProps } from \"@material-ui/core/Avatar\";\r\nimport React from \"react\";\r\nimport styled, { ComponentProps, css } from \"./Theme\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport ArrowDropUpIcon from \"@material-ui/icons/ArrowDropUp\";\r\n\r\ntype StyledAvatarProps = { size: Props[\"size\"] } & AvatarProps;\r\n\r\nconst StyledAvatar = styled(Avatar).attrs((p: ComponentProps<StyledAvatarProps>) => ({\r\n    className: p.size === \"chip\" ? p.className + \" MuiChip-avatar MuiChip-avatarSmall\" : p.className,\r\n}))<StyledAvatarProps>`\r\n    cursor: pointer;\r\n    color: ${p => p.theme.palette.text.primary};\r\n\r\n    ${p =>\r\n        p.size === \"inline\" &&\r\n        css`\r\n            width: ${p.theme.spacing(3)}px;\r\n            height: ${p.theme.spacing(3)}px;\r\n            font-size: 0.875rem;\r\n        `}\r\n`;\r\n\r\nconst Body = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nconst Arrows = styled(IconButton)<{ s: Props[\"size\"] }>`\r\n    height: ${p => (!p.s ? 40 : p.s === \"chip\" ? 18 : 24)}px;\r\n    width: ${p => (!p.s ? 40 : p.s === \"chip\" ? 18 : 24)}px;\r\n    padding: 0;\r\n    ${p =>\r\n        p.s === \"chip\" &&\r\n        css`\r\n            & .MuiIconButton-label {\r\n                margin-top: -3px;\r\n            }\r\n\r\n            &:first-of-type {\r\n                margin-left: 5px;\r\n            }\r\n        `}\r\n\r\n    display: none;\r\n    ${Body}:hover & {\r\n        display: block;\r\n    }\r\n`;\r\n\r\ntype Props = {\r\n    val: number;\r\n    onChange: (val: number) => void;\r\n    size?: \"chip\" | \"inline\";\r\n};\r\n\r\nconst IncrementNumber: React.FC<Props> = ({ val, onChange, size }) => {\r\n    const onClick = (incr: number) => (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.stopPropagation();\r\n        onChange(val + incr);\r\n    };\r\n    return (\r\n        <Body>\r\n            <StyledAvatar title=\"\" size={size} onClick={e => e.stopPropagation()}>\r\n                {val}\r\n            </StyledAvatar>\r\n            <Arrows s={size} onClick={onClick(1)}>\r\n                <ArrowDropUpIcon />\r\n            </Arrows>\r\n            <Arrows s={size} onClick={onClick(-1)}>\r\n                <ArrowDropDownIcon />\r\n            </Arrows>\r\n        </Body>\r\n    );\r\n};\r\nexport default IncrementNumber;\r\n","import React from \"react\";\r\nimport { State } from \"../../State\";\r\nimport { ScryCardSymbol } from \"../../Utility/Scry/Types\";\r\nimport styled, { css } from \"./Theme\";\r\nimport { TypographyProps } from \"@material-ui/core/Typography\";\r\n\r\nconst sizeMap: [TypographyProps[\"variant\"], number][] = [\r\n    [\"h1\", 80],\r\n    [\"h2\", 51],\r\n    [\"h3\", 42],\r\n    [\"h4\", 30],\r\n    [\"h5\", 25],\r\n    [\"h6\", 20],\r\n    [\"subtitle1\", 16],\r\n    [\"subtitle2\", 14],\r\n    [\"body1\", 16],\r\n    [\"body2\", 14],\r\n    [\"caption\", 12],\r\n    [\"button\", 16],\r\n    [\"overline\", 14],\r\n];\r\n\r\nconst Symbol = styled.svg`\r\n    display: inline-block;\r\n    height: 16px;\r\n    width: 16px;\r\n    margin: 1px 1px -2px 1px;\r\n\r\n    ${p =>\r\n        sizeMap.map(\r\n            ([v, size]) => css`\r\n                .MuiTypography-${v} & {\r\n                    height: ${size}px;\r\n                    width: ${size}px;\r\n                }\r\n            `\r\n        )}\r\n`;\r\n\r\ntype Props = {\r\n    symbol: string;\r\n};\r\n\r\nconst SymbolIcon: React.FC<Props> = ({ symbol }) => {\r\n    const [state] = React.useContext(State);\r\n    const [symbolObj, setSymbolObj] = React.useState<ScryCardSymbol>();\r\n    React.useEffect(() => {\r\n        setSymbolObj(state.symbolList[symbol] ?? Object.values(state.symbolList).find(s => s.loose_variant === symbol));\r\n    }, [symbol, state.symbolList]);\r\n    return symbolObj ? <Symbol dangerouslySetInnerHTML={{ __html: symbolObj.svg }} /> : <>{symbol}</>;\r\n};\r\n\r\nexport default SymbolIcon;\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { TypographyProps } from \"@material-ui/core/Typography\";\r\nimport SymbolIcon from \"./SymbolIcon\";\r\n\r\ntype Props = TypographyProps & {\r\n    text: string;\r\n};\r\n\r\nconst SymbolTypography: React.FC<Props> = ({ text, ...typographyProps }) => {\r\n    const [parsed, setParsed] = React.useState<JSX.Element[]>([]);\r\n    React.useEffect(() => {\r\n        setParsed((text.match(/({.*?})|([^{]+)/g) ?? []).map((m, i) => (m[0] === \"{\" ? <SymbolIcon key={i} symbol={m} /> : <span key={i}>{m}</span>)));\r\n    }, [text]);\r\n    return <Typography {...typographyProps}>{parsed}</Typography>;\r\n};\r\n\r\nexport default SymbolTypography;\r\n","import { Chip } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../Utility/useCardAction\";\r\nimport IncrementNumber from \"../Styled/IncrementNumber\";\r\nimport styled from \"../Styled/Theme\";\r\nimport SymbolTypography from \"../Styled/SymbolTypography\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\n\r\nconst CustomChip = styled(Chip)`\r\n    width: 100%;\r\n\r\n    & .MuiChip-label {\r\n        flex: 1 1 auto;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    & .MuiChip-deleteIcon {\r\n        width: unset;\r\n        height: unset;\r\n        flex-shrink: 0;\r\n        margin-left: ${p => p.theme.spacing(1)}px;\r\n        margin-top: 1px;\r\n    }\r\n`;\r\n\r\nconst CompressedCard: React.FC<CollectionCardProps> = props => {\r\n    const { updateCardQuantity, openScryfallPage } = useCardActions(props);\r\n    const { card } = props;\r\n    return (\r\n        <CustomChip\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            label={card.name}\r\n            deleteIcon={<SymbolTypography text={card.mana_cost ?? \"\"} noWrap />}\r\n            avatar={<IncrementNumber size=\"chip\" val={card.amount} onChange={updateCardQuantity} />}\r\n            onDelete={openScryfallPage}\r\n            onClick={openScryfallPage}\r\n            title=\"Open on scryfall\"\r\n        />\r\n    );\r\n};\r\nexport default CompressedCard;\r\n","import styled from \"./Theme\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst IndentedTypography = styled(Typography)`\r\n    text-indent: ${p => p.theme.spacing(1)}px;\r\n`;\r\nexport default IndentedTypography;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\nimport CompressedCard from \"./CompressedCard\";\r\nimport IndentedTypography from \"../Styled/IndentedTypography\";\r\n\r\nconst CompressedCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <Grid container direction=\"column\">\r\n            {cards.length >= 1 ? (\r\n                cards.map(c => (\r\n                    <Grid item key={c.name} xs zeroMinWidth>\r\n                        <CompressedCard card={c} {...props} />\r\n                    </Grid>\r\n                ))\r\n            ) : (\r\n                <Grid item xs={12}>\r\n                    <IndentedTypography color=\"textSecondary\" variant=\"subtitle2\">Empty</IndentedTypography>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\nexport default CompressedCollecion;\r\n","import { IconButton, Tooltip, Typography } from \"@material-ui/core\";\r\nimport { IconButtonProps } from \"@material-ui/core/IconButton/IconButton\";\r\nimport { darken } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport styled, { css } from \"./Theme\";\r\n\r\nconst StyledIconButton = styled(IconButton)<{ background?: \"primary\" | \"secondary\" }>`\r\n    ${p =>\r\n        p.background &&\r\n        css`\r\n            background-color: ${p.theme.palette[p.background].main};\r\n            &.Mui-disabled {\r\n                background-color: ${darken(p.theme.palette[p.background].main, 0.3)};\r\n            }\r\n        `};\r\n    &:hover {\r\n        ${p =>\r\n        p.background &&\r\n            css`\r\n                background-color: ${p.theme.palette[p.background].dark};\r\n            `};\r\n    }\r\n`;\r\n\r\ntype Props = {\r\n    onClick: () => void;\r\n    title: string;\r\n    size?: IconButtonProps[\"size\"];\r\n    disabled?: boolean;\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst TooltipButton: React.FC<Props> = ({ onClick, title, size, background, disabled, children }) => {\r\n    return (\r\n        <Tooltip title={title}>\r\n            <span>\r\n                <StyledIconButton size={size} background={background} disabled={disabled} onClick={onClick} aria-label={title}>\r\n                    {children}\r\n                    <Typography variant=\"srOnly\">{title}</Typography>\r\n                </StyledIconButton>\r\n            </span>\r\n        </Tooltip>\r\n    );\r\n};\r\nexport default TooltipButton;\r\n","import { IconButtonProps } from \"@material-ui/core/IconButton\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../../Utility/useCardAction\";\r\nimport SwapVertIcon from \"@material-ui/icons/SwapVert\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\nimport { ClickAwayListener, Grow, MenuItem, MenuList, Paper, Popper } from \"@material-ui/core\";\r\nimport { SectionName } from \"../../../State\";\r\n\r\ntype Props = {\r\n    actions: ReturnType<typeof useCardActions>;\r\n    size?: IconButtonProps[\"size\"];\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst ChangeSectionButton: React.FC<Props> = ({ actions, size, background }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLDivElement>(null);\r\n\r\n    const handleToggle = () => setOpen(prevOpen => !prevOpen);\r\n    const handleClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <span ref={anchorRef}>\r\n                <TooltipButton title=\"Change section\" onClick={handleToggle} disabled={actions.sections.length <= 0} background={background} size={size}>\r\n                    <SwapVertIcon />\r\n                </TooltipButton>\r\n            </span>\r\n            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition>\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                        }}\r\n                    >\r\n                        <Paper elevation={5}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList>\r\n                                    {(actions.sections).map(s => (\r\n                                        <MenuItem\r\n                                            key={s}\r\n                                            onClick={() => actions.changeSection(s)}\r\n                                        >\r\n                                            {s === SectionName.Default ? \"Default\" : s}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    );\r\n};\r\nexport default ChangeSectionButton;\r\n","import { IconButtonProps } from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../../Utility/useCardAction\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\n\r\ntype Props = {\r\n    actions: ReturnType<typeof useCardActions>;\r\n    size?: IconButtonProps[\"size\"];\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst DeleteButton: React.FC<Props> = ({ actions, size, background }) => {\r\n    return (\r\n        <TooltipButton title=\"Remove card\" onClick={actions.removeCard} background={background} size={size}>\r\n            <DeleteIcon />\r\n        </TooltipButton>\r\n    );\r\n};\r\nexport default DeleteButton;\r\n","import { IconButtonProps } from \"@material-ui/core/IconButton\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport React from \"react\";\r\nimport useCardActions from \"../../../Utility/useCardAction\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\n\r\ntype Props = {\r\n    actions: ReturnType<typeof useCardActions>;\r\n    size?: IconButtonProps[\"size\"];\r\n    background?: \"primary\" | \"secondary\";\r\n};\r\n\r\nconst WishlistButton: React.FC<Props> = ({ actions, size, background }) => {\r\n    return (\r\n        <TooltipButton title={actions.wishlistTooltip()} onClick={actions.toggleWishlist} background={background} size={size}>\r\n            {actions.isOnWishlist() ? <FavoriteIcon /> : <FavoriteBorderIcon />}\r\n        </TooltipButton>\r\n    );\r\n};\r\nexport default WishlistButton;\r\n","import { Fab } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport React from \"react\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport Scry from \"../../Utility/Scry\";\r\nimport useCardActions from \"../../Utility/useCardAction\";\r\nimport IncrementNumber from \"../Styled/IncrementNumber\";\r\nimport styled from \"../Styled/Theme\";\r\nimport ChangeSectionButton from \"./ActionButtons/ChangeSectionButton\";\r\nimport DeleteButton from \"./ActionButtons/DeleteButton\";\r\nimport WishlistButton from \"./ActionButtons/WishlistButton\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    padding-bottom: 139.344262295%;\r\n    width: 100%;\r\n    height: 0;\r\n    position: relative;\r\n`;\r\n\r\nconst Image = styled.img`\r\n    border-radius: 4.75% / 3.5%;\r\n    background-image: repeating-linear-gradient(-55deg, #ddd, #ddd 5px, #ccc 5px, #ccc 10px);\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst IncrementActions = styled.div`\r\n    position: absolute;\r\n    top: 25%;\r\n    left: ${p => p.theme.spacing(2)}px;\r\n`;\r\n\r\nconst BottomActions = styled.div`\r\n    position: absolute;\r\n    bottom: ${p => p.theme.spacing(2)}px;\r\n    right: ${p => p.theme.spacing(2)}px;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    opacity: 0;\r\n    transition: opacity 0.2s ease-in-out;\r\n\r\n    ${Body}:hover & {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\nconst ActionsMenu = styled.div<{ open: boolean }>`\r\n    transform: scaleX(${p => (p.open ? 1 : 0)});\r\n    transition: all 0.2s ease-in-out;\r\n\r\n    & > * {\r\n        margin-right: ${p => p.theme.spacing(1)}px;\r\n    }\r\n`;\r\n\r\nconst ImagesCard: React.FC<CollectionCardProps> = props => {\r\n    const actions = useCardActions(props);\r\n    const { card } = props;\r\n\r\n    const [actionsOpen, setActionsOpen] = React.useState(false);\r\n    const toggleActionsOpen = () => setActionsOpen(prev => !prev);\r\n\r\n    return (\r\n        <Body>\r\n            <Image src={Scry.getImage(card, \"normal\") ?? \"\"} onClick={actions.openScryfallPage} title=\"Open on scryfall\" />\r\n            {!isNullOrUndefined(card.amount) && (\r\n                <IncrementActions>\r\n                    <IncrementNumber val={card.amount} onChange={actions.updateCardQuantity} />\r\n                </IncrementActions>\r\n            )}\r\n            <BottomActions>\r\n                <ActionsMenu open={actionsOpen}>\r\n                    <WishlistButton actions={actions} background=\"secondary\" />\r\n                    <ChangeSectionButton actions={actions} background=\"secondary\" />\r\n                    <DeleteButton actions={actions} background=\"secondary\" />\r\n                </ActionsMenu>\r\n                <Fab color=\"primary\" onClick={toggleActionsOpen}>\r\n                    <MenuIcon />\r\n                </Fab>\r\n            </BottomActions>\r\n        </Body>\r\n    );\r\n};\r\nexport default ImagesCard;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport IndentedTypography from \"../Styled/IndentedTypography\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\nimport ImagesCard from \"./ImagesCard\";\r\n\r\nconst ImagesCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <Grid container spacing={1} alignItems=\"center\">\r\n            {cards.length >= 1 ? (\r\n                cards.map(c => (\r\n                    <Grid key={c.name} item xs={6} lg={6} xl={4}>\r\n                        <ImagesCard card={c} {...props} />\r\n                    </Grid>\r\n                ))\r\n            ) : (\r\n                <Grid item xs={12}>\r\n                    <IndentedTypography color=\"textSecondary\">Empty</IndentedTypography>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\nexport default ImagesCollecion;\r\n","import React from \"react\";\r\nimport { State } from \"../../State\";\r\nimport { ScryCardRarity, ScrySet } from \"../../Utility/Scry/Types\";\r\nimport styled from \"./Theme\";\r\n\r\nconst Set = styled.svg<{ rarity: ScryCardRarity }>`\r\n    width: 25px;\r\n    height: 20px;\r\n    fill: url(#rarity-${p => p.rarity});\r\n`;\r\n\r\ntype Props = {\r\n    set: string;\r\n    rarity: ScryCardRarity;\r\n};\r\n\r\nconst SetIcon: React.FC<Props> = ({ set, rarity }) => {\r\n    const [state] = React.useContext(State);\r\n    const [setObj, setSetObj] = React.useState<ScrySet>();\r\n    React.useEffect(() => {\r\n        setSetObj(state.setList[set]);\r\n    }, [set, state.setList]);\r\n    return setObj ? (\r\n        <Set rarity={rarity}>\r\n            <defs>\r\n                <linearGradient id=\"rarity-common\">\r\n                    <stop offset=\"0%\" stopColor=\"#000\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"rarity-uncommon\" gradientTransform=\"rotate(90)\">\r\n                    <stop offset=\"0%\" stopColor=\"#4d565a\" />\r\n                    <stop offset=\"50%\" stopColor=\"#a0c3d3\" />\r\n                    <stop offset=\"100%\" stopColor=\"#4d565a\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"rarity-rare\" gradientTransform=\"rotate(90)\">\r\n                    <stop offset=\"0%\" stopColor=\"#85723e\" />\r\n                    <stop offset=\"50%\" stopColor=\"#d4b975\" />\r\n                    <stop offset=\"100%\" stopColor=\"#85723e\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"rarity-mythic\" gradientTransform=\"rotate(90)\">\r\n                    <stop offset=\"0%\" stopColor=\"#b02911\" />\r\n                    <stop offset=\"50%\" stopColor=\"#e87f03\" />\r\n                    <stop offset=\"100%\" stopColor=\"#b02911\" />\r\n                </linearGradient>\r\n            </defs>\r\n            <svg dangerouslySetInnerHTML={{ __html: setObj.icon_svg }} />\r\n        </Set>\r\n    ) : (\r\n        <>{set}</>\r\n    );\r\n};\r\n\r\nexport default SetIcon;\r\n","import { Link, TableCell, TableRow } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport React from \"react\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport useCardActions from \"../../Utility/useCardAction\";\r\nimport IncrementNumber from \"../Styled/IncrementNumber\";\r\nimport SetIcon from \"../Styled/SetIcon\";\r\nimport SymbolTypography from \"../Styled/SymbolTypography\";\r\nimport styled, { css } from \"../Styled/Theme\";\r\nimport TooltipButton from \"../Styled/TooltipButton\";\r\nimport ChangeSectionButton from \"./ActionButtons/ChangeSectionButton\";\r\nimport DeleteButton from \"./ActionButtons/DeleteButton\";\r\nimport WishlistButton from \"./ActionButtons/WishlistButton\";\r\nimport { CollectionCardProps } from \"./CollectionPreview\";\r\nimport { NameCell, SetWidthCell } from \"./ListCollection\";\r\n\r\nconst StyledRow = styled(TableRow)`\r\n    &:hover {\r\n        background-image: linear-gradient(\r\n            90deg,\r\n            rgba(0, 0, 0, 0),\r\n            ${p => p.theme.palette.background.default} 10%,\r\n            ${p => p.theme.palette.background.default} 90%,\r\n            rgba(0, 0, 0, 0)\r\n        );\r\n    }\r\n`;\r\n\r\nconst Actions = styled.div<{ open: boolean }>`\r\n    white-space: nowrap;\r\n    & > *:not(:last-child) {\r\n        margin-right: ${p => p.theme.spacing(0.5)}px;\r\n    }\r\n\r\n    ${p => p.theme.breakpoints.down(\"xs\")} {\r\n        & {\r\n            ${p =>\r\n        !p.open &&\r\n                css`\r\n                    display: none;\r\n                `}\r\n\r\n            ${p =>\r\n        p.open &&\r\n                css`\r\n                    position: absolute;\r\n                    transform: translateX(calc(-100% - 4px));\r\n                `}\r\n        }\r\n    }\r\n\r\n    ${p => p.theme.breakpoints.between(\"md\", \"sm\")} {\r\n        & {\r\n            ${p =>\r\n        !p.open &&\r\n                css`\r\n                    display: none;\r\n                `}\r\n\r\n            ${p =>\r\n        p.open &&\r\n                css`\r\n                    position: absolute;\r\n                    transform: translateX(calc(-100% - 4px));\r\n                `}\r\n        }\r\n    }\r\n`;\r\n\r\nconst ActionsMenu = styled.div`\r\n    display: none;\r\n    ${p => p.theme.breakpoints.down(\"xs\")} {\r\n        & {\r\n            display: initial;\r\n        }\r\n    }\r\n    ${p => p.theme.breakpoints.between(\"md\", \"sm\")} {\r\n        & {\r\n            display: initial;\r\n        }\r\n    }\r\n`;\r\n\r\nconst ListCard: React.FC<CollectionCardProps> = props => {\r\n    const actions = useCardActions(props);\r\n    const { card } = props;\r\n\r\n    const [actionsOpen, setActionsOpen] = React.useState(false);\r\n    const toggleActionsOpen = () => setActionsOpen(prev => !prev);\r\n\r\n    return (\r\n        <StyledRow>\r\n            <SetWidthCell width=\"40px\" component=\"th\" scope=\"row\" align=\"center\">\r\n                {!isNullOrUndefined(card.amount) ? <IncrementNumber size=\"inline\" val={card.amount} onChange={actions.updateCardQuantity} /> : \"-\"}\r\n            </SetWidthCell>\r\n            <NameCell>\r\n                <Link href=\"#\" onClick={actions.openScryfallPage} color=\"inherit\" title=\"Open on scryfall\">\r\n                    {card.name}\r\n                </Link>\r\n            </NameCell>\r\n            <SetWidthCell width=\"40px\" align=\"center\">\r\n                <Link href=\"#\" onClick={actions.openScryfallSetPage} color=\"inherit\" title=\"Open set on scryfall\">\r\n                    <SetIcon set={card.set} rarity={card.rarity} />\r\n                </Link>\r\n            </SetWidthCell>\r\n            <TableCell>\r\n                <SymbolTypography text={card.mana_cost ?? \"\"} noWrap />\r\n            </TableCell>\r\n            <TableCell style={{ position: \"relative\" }}>\r\n                <Actions open={actionsOpen}>\r\n                    <WishlistButton actions={actions} size=\"small\" background={actionsOpen ? \"secondary\" : undefined} />\r\n                    <ChangeSectionButton actions={actions} size=\"small\" background={actionsOpen ? \"secondary\" : undefined} />\r\n                    <DeleteButton actions={actions} size=\"small\" background={actionsOpen ? \"secondary\" : undefined} />\r\n                </Actions>\r\n                <ActionsMenu>\r\n                    <TooltipButton title=\"Actions\" onClick={toggleActionsOpen} size=\"small\">\r\n                        <MenuIcon />\r\n                    </TooltipButton>\r\n                </ActionsMenu>\r\n            </TableCell>\r\n        </StyledRow>\r\n    );\r\n};\r\nexport default ListCard;\r\n","import { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport IndentedTypography from \"../Styled/IndentedTypography\";\r\nimport styled from \"../Styled/Theme\";\r\nimport { CollectionPreviewProps } from \"./CollectionPreview\";\r\nimport ListCard from \"./ListCard\";\r\n\r\nconst CustomPaddingTable = styled(Table)`\r\n    width: 100%;\r\n    overflow-y: scroll;\r\n    & .MuiTableCell-sizeSmall {\r\n        padding: ${p => p.theme.spacing(0.25, 1)};\r\n    }\r\n`;\r\n\r\nexport const SetWidthCell = styled(TableCell).attrs<{ width: string }>(p => ({\r\n    width: p.width,\r\n}))<{ width: string }>``;\r\n\r\nexport const NameCell = styled(TableCell)`\r\n    width: 60%;\r\n    max-width: 120px;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n`;\r\n\r\nconst ListCollecion: React.FC<CollectionPreviewProps> = ({ cards, sortBy, sortOrder, showGroups, ...props }) => {\r\n    return (\r\n        <CustomPaddingTable size=\"small\" aria-label=\"card table\">\r\n            <TableHead>\r\n                <TableRow>\r\n                    <SetWidthCell width=\"40px\" align=\"center\">\r\n                        #\r\n                    </SetWidthCell>\r\n                    <NameCell>Name</NameCell>\r\n                    <SetWidthCell width=\"40px\" align=\"center\">\r\n                        Set\r\n                    </SetWidthCell>\r\n                    <TableCell>Cost</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {cards.length >= 1 ? (\r\n                    cards.map(c => <ListCard key={c.name} card={c} {...props} />)\r\n                ) : (\r\n                    <TableRow>\r\n                        <TableCell colSpan={6}>\r\n                            <IndentedTypography color=\"textSecondary\">Empty</IndentedTypography>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </TableBody>\r\n        </CustomPaddingTable>\r\n    );\r\n};\r\nexport default ListCollecion;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport omit from \"lodash.omit\";\r\nimport React from \"react\";\r\nimport ScrySdk from \"scryfall-sdk\";\r\nimport { DeckCard, SectionName } from \"../../State\";\r\nimport CompressedCollecion from \"./CompressedCollection\";\r\nimport ImagesCollecion from \"./ImagesCollection\";\r\nimport ListCollecion from \"./ListCollection\";\r\n\r\nexport type PreviewStyle = \"Standard\" | \"List\" | \"Images\" | \"Compressed\";\r\nexport type PreviewActions = \"SearchDeck\" | \"SearchWishlist\" | \"Deck\";\r\nexport type SortByOptions = \"Name\" | \"Cmc\" | \"Type\" | \"Rarity\";\r\nexport type SortOrderOptions = \"Asc\" | \"Desc\";\r\n\r\nexport type CollectionPreviewProps = {\r\n    cards: (DeckCard & ScrySdk.Card)[];\r\n    actions: PreviewActions;\r\n    sortBy: SortByOptions;\r\n    sortOrder: SortOrderOptions;\r\n    showGroups: boolean;\r\n    deckName?: string;\r\n    sectionName?: string;\r\n};\r\n\r\nexport type CollectionCardProps = {\r\n    card: DeckCard & ScrySdk.Card;\r\n    actions: PreviewActions;\r\n    deckName?: string;\r\n    sectionName?: string;\r\n};\r\n\r\nconst desc = <T extends object>(a: T, b: T, orderBy: keyof T, func: <U extends any>(v: U) => U | number) => {\r\n    if (func(b[orderBy]) < func(a[orderBy])) {\r\n        return -1;\r\n    }\r\n    if (func(b[orderBy]) > func(a[orderBy])) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n};\r\n\r\nconst getSorting = <T extends object>(order: SortOrderOptions, orderBy: keyof T, func: <U extends any>(v: U) => U | number = v => v): ((a: T, b: T) => number) => {\r\n    return order === \"Desc\" ? (a, b) => desc(a, b, orderBy, func) : (a, b) => -desc(a, b, orderBy, func);\r\n};\r\n\r\n\r\nconst StableSort = <T extends object>(array: T[], cmp: (a: T, b: T) => number) => {\r\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = cmp(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n};\r\n\r\nconst rarityOrder = [\"common\", \"uncommon\", \"rare\", \"mythic\"] as const;\r\nconst GetSortFunction = (sortBy: SortByOptions, sortOrder: SortOrderOptions) => {\r\n    switch (sortBy) {\r\n        case \"Name\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"name\");\r\n        case \"Cmc\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"mana_cost\");\r\n        case \"Type\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"type_line\");\r\n        case \"Rarity\":\r\n            return getSorting<DeckCard & ScrySdk.Card>(sortOrder, \"rarity\", v => rarityOrder.indexOf(v));\r\n    }\r\n};\r\n\r\ntype Props = CollectionPreviewProps & {\r\n    style: PreviewStyle;\r\n};\r\n\r\nconst CollectionPreview: React.FC<Props> = props => {\r\n    const renderCollection = () => {\r\n        const passedProps = {\r\n            ...omit(props, \"style\", \"cards\"),\r\n            cards: StableSort(props.cards, GetSortFunction(props.sortBy, props.sortOrder)),\r\n        };\r\n        switch (props.style) {\r\n            case \"List\":\r\n                return <ListCollecion {...passedProps} />;\r\n            case \"Images\":\r\n                return <ImagesCollecion {...passedProps} />;\r\n            case \"Compressed\":\r\n                return <CompressedCollecion {...passedProps} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {props.sectionName !== SectionName.Default && <Typography variant=\"h6\">{props.sectionName}</Typography>}\r\n            {renderCollection()}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CollectionPreview;\r\n","import { Button, ButtonGroup, Tooltip, Typography } from \"@material-ui/core\";\r\nimport ViewHeadlineIcon from \"@material-ui/icons/ViewHeadline\";\r\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\r\nimport ViewModuleIcon from \"@material-ui/icons/ViewModule\";\r\nimport React from \"react\";\r\nimport styled from \"../../Styled/Theme\";\r\nimport { PreviewStyle } from \"../CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n\r\n    & .MuiTypography-root {\r\n        margin-right: ${p => p.theme.spacing(1)}px;\r\n    }\r\n\r\n    & .MuiButton-root {\r\n        padding-left: 0;\r\n        padding-right: 0;\r\n    }\r\n`;\r\n\r\nconst IconForStyle = (style: PreviewStyle) => {\r\n    switch (style) {\r\n        case \"Standard\":\r\n            return <ViewListIcon />;\r\n        case \"List\":\r\n            return <ViewHeadlineIcon />;\r\n        case \"Images\":\r\n            return <ViewModuleIcon />;\r\n    }\r\n    throw Error(`Style ${style} does not have an icon.`);\r\n};\r\n\r\ntype Props = {\r\n    style: PreviewStyle;\r\n    onToggle: (style: PreviewStyle) => void;\r\n};\r\n\r\nconst PreviewStyleToggle: React.FC<Props> = ({ style, onToggle }) => {\r\n    return (\r\n        <Body>\r\n            <Typography variant=\"caption\">Display:</Typography>\r\n            <ButtonGroup variant=\"outlined\" size=\"small\">\r\n                {([\"Standard\", \"List\", \"Images\"] as const).map(s => (\r\n                    <Button key={s} onClick={() => onToggle(s)} variant={style === s ? \"contained\" : undefined}>\r\n                        <Tooltip title={s}>{IconForStyle(s)}</Tooltip>\r\n                    </Button>\r\n                ))}\r\n            </ButtonGroup>\r\n        </Body>\r\n    );\r\n};\r\nexport default PreviewStyleToggle;\r\n","import ListAltIcon from \"@material-ui/icons/ListAlt\";\r\nimport React from \"react\";\r\nimport TooltipButton from \"../../Styled/TooltipButton\";\r\nimport styled from \"../../Styled/Theme\";\r\n\r\nconst Body = styled.div`\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n    margin-left: ${p => p.theme.spacing(1)}px;\r\n`;\r\n\r\ntype Props = {\r\n    show: boolean;\r\n    setShow: (show: boolean) => void;\r\n};\r\n\r\nconst ShowGroupsToggle: React.FC<Props> = ({ show, setShow }) => {\r\n    return (\r\n        <Body>\r\n            <TooltipButton size=\"small\" title={show ? \"Hide groups\" : \"Show groups\"} onClick={() => setShow(!show)}>\r\n                <ListAltIcon />\r\n            </TooltipButton>\r\n        </Body>\r\n    );\r\n};\r\nexport default ShowGroupsToggle;\r\n","import { Button, ClickAwayListener, Grow, MenuItem, MenuList, Paper, Popper } from \"@material-ui/core\";\r\nimport SortIcon from \"@material-ui/icons/Sort\";\r\nimport React from \"react\";\r\nimport styled from \"../../Styled/Theme\";\r\nimport { SortByOptions, SortOrderOptions } from \"../CollectionPreview\";\r\n\r\nconst Body = styled.div`\r\n    margin-bottom: ${p => p.theme.spacing(1)}px;\r\n`;\r\n\r\ntype Props = {\r\n    sortBy: SortByOptions;\r\n    setSortBy: (sortBy: SortByOptions) => void;\r\n    sortOrder: SortOrderOptions;\r\n    setSortOrder: (sortOrder: SortOrderOptions) => void;\r\n};\r\n\r\nconst SortToggle: React.FC<Props> = ({ sortBy, setSortBy, sortOrder, setSortOrder }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n\r\n    const handleToggle = () => setOpen(prevOpen => !prevOpen);\r\n    const handleClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Body>\r\n            <Button ref={anchorRef} size=\"small\" onClick={handleToggle} startIcon={<SortIcon />}>\r\n                Sort by\r\n            </Button>\r\n            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition>\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                        }}\r\n                    >\r\n                        <Paper elevation={5}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList>\r\n                                    {([\r\n                                        [\"Name\", \"Asc\"],\r\n                                        [\"Name\", \"Desc\"],\r\n                                        [\"Cmc\", \"Asc\"],\r\n                                        [\"Cmc\", \"Desc\"],\r\n                                        [\"Type\", \"Asc\"],\r\n                                        [\"Type\", \"Desc\"],\r\n                                        [\"Rarity\", \"Asc\"],\r\n                                        [\"Rarity\", \"Desc\"],\r\n                                    ] as const).map(([by, order]) => (\r\n                                        <MenuItem\r\n                                            key={`${by} (${order})`}\r\n                                            selected={by === sortBy && order === sortOrder}\r\n                                            onClick={event => {\r\n                                                setSortBy(by);\r\n                                                setSortOrder(order);\r\n                                            }}\r\n                                        >\r\n                                            {`${by} (${order})`}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </Body>\r\n    );\r\n};\r\nexport default SortToggle;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClipboard, faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faGoogle } from \"@fortawesome/free-brands-svg-icons\";\r\nimport styled from \"./Theme\";\r\n\r\nconst IconWrap = styled.div`\r\n    width: 24px;\r\n    height: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const CompressIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faCompressAlt} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const ExpandIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faExpandAlt} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const GoogleIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faGoogle} />\r\n    </IconWrap>\r\n);\r\n\r\nexport const ClipboardIcon: React.FC = () => (\r\n    <IconWrap>\r\n        <FontAwesomeIcon icon={faClipboard} />\r\n    </IconWrap>\r\n);\r\n","import { Dialog, DialogContent, DialogContentText, DialogTitle, Grid, TextField } from \"@material-ui/core\";\nimport { fade } from \"@material-ui/core/styles\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport copy from \"clipboard-copy\";\nimport React from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport * as Scry from \"scryfall-sdk\";\nimport { DeckCard, DeckName, getDeckName, State } from \"../../State\";\nimport CollectionParser from \"../../Utility/CollectionParser\";\nimport GoogleApi from \"../../Utility/GoogleApi\";\nimport CollectionPreview, { PreviewStyle, SortByOptions, SortOrderOptions } from \"../Previews/CollectionPreview\";\nimport PreviewStyleToggle from \"../Previews/Common/PreviewStyleToggle\";\nimport ShowGroupsToggle from \"../Previews/Common/ShowGroupsToggle\";\nimport SortToggle from \"../Previews/Common/SortToggle\";\nimport { AppletActions, AppletContent, FlexCol, Title } from \"../Styled/Grid\";\nimport { ClipboardIcon, CompressIcon, ExpandIcon } from \"../Styled/Icons\";\nimport styled, { css } from \"../Styled/Theme\";\nimport TooltipButton from \"../Styled/TooltipButton\";\n\nconst SectionRow = styled.div<{ scrollable: boolean }>`\n    margin-bottom: ${p => p.theme.spacing(2)}px;\n    ${p =>\n        p.scrollable &&\n        css`\n            width: 100%;\n            overflow-x: auto;\n            overflow-y: hidden;\n        `}\n`;\n\nconst ExportRow = styled(FlexCol)`\n    display: flex;\n    align-items: center;\n    margin-bottom: ${p => p.theme.spacing(1)}px;\n\n    & .MuiDialogContentText-root {\n        flex-grow: 1;\n        margin-bottom: 0;\n    }\n`;\n\nconst AppletBackground = styled.div`\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 75%;\n    z-index: 0;\n\n    & img {\n        width: 100%;\n    }\n\n    &:after {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        right: 0;\n        width: 100%;\n        height: 100%;\n        display: inline-block;\n        background-image: radial-gradient(\n            ellipse at top 35% right 35%,\n            ${p => fade(p.theme.palette.background.paper, 0.8)} 0%,\n            ${p => p.theme.palette.background.paper} 70%\n        );\n    }\n`;\n\nconst Body = styled.div`\n    z-index: 0;\n    display: flex;\n    flex-direction: column;\n`;\n\ntype Params = {\n    deckName: string;\n};\n\nconst DeckPreview: React.FC = () => {\n    let { deckName } = useParams<Params>();\n    deckName = decodeURIComponent(deckName);\n\n    const history = useHistory();\n    const [state, dispatch] = React.useContext(State);\n    const deck = state.decks[deckName];\n\n    const [expanded, setExpanded] = React.useState(true);\n    const [exportOpened, setExportOpened] = React.useState(false);\n    const [style, setStyle] = React.useState<PreviewStyle>(\"List\");\n    const [sortBy, setSortBy] = React.useState<SortByOptions>(\"Cmc\");\n    const [sortOrder, setSortOrder] = React.useState<SortOrderOptions>(\"Asc\");\n    const [showGroups, setShowGroups] = React.useState(false);\n\n    React.useEffect(() => {\n        dispatch({ type: \"SelectDeck\", name: deckName });\n        const missingCards = Object.values(deck?.cards ?? {})\n            .reduce((prev, val) => [...prev, ...Object.values(val)], [] as DeckCard[])\n            .filter(card => !state.cardList[card.name]);\n        Scry.Cards.collection(...missingCards.map(card => Scry.CardIdentifier.byName(card.name))).on(\"data\", (card: any) =>\n            dispatch({ type: \"AddCard\", card })\n        );\n    }, [deckName, deck]);\n\n    const closePreview = () => dispatch({ type: \"SelectDeck\", name: null });\n    const toggleExpanded = () => setExpanded(e => !e);\n    const onDeleteDeck = () => {\n        history.push(\"/\");\n        GoogleApi.deleteDeck(dispatch, { name: deckName, id: state.files[deckName] });\n    };\n    const onSaveChanges = () =>\n        GoogleApi.updateFile({ id: state.files[deckName], fileContent: CollectionParser.deserialize(deck.cards) }).then(() =>\n            dispatch({ type: \"UpdateDeck\", name: deckName, isDirty: false })\n        );\n    const onExportOpen = () => setExportOpened(true);\n    const onExportClose = () => setExportOpened(false);\n\n    if (deck === undefined) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <AppletContent>\n            <AppletBackground>\n                <img src={deck.previewUrl} />\n            </AppletBackground>\n            <Body>\n                <Grid container direction=\"row\" justify=\"space-between\">\n                    <Grid item>\n                        <Title>{getDeckName(deck.name)}</Title>\n                    </Grid>\n                    <Grid item>\n                        <TooltipButton title={expanded ? \"Compress\" : \"Expand\"} size=\"small\" onClick={toggleExpanded}>\n                            {expanded ? <CompressIcon /> : <ExpandIcon />}\n                        </TooltipButton>\n                        <TooltipButton title=\"Close preview\" size=\"small\" onClick={closePreview}>\n                            <CloseIcon />\n                        </TooltipButton>\n                    </Grid>\n                </Grid>\n                <Grid container justify=\"space-between\">\n                    <SortToggle sortBy={sortBy} setSortBy={setSortBy} sortOrder={sortOrder} setSortOrder={setSortOrder} />\n                    <ShowGroupsToggle show={showGroups} setShow={setShowGroups} />\n                    <FlexCol />\n                    {expanded && <PreviewStyleToggle style={style} onToggle={setStyle} />}\n                </Grid>\n                <FlexCol>\n                    {Object.entries(deck.cards).map(([sectionName, cards]) => (\n                        <SectionRow key={sectionName} scrollable={expanded && style === \"List\"}>\n                            <CollectionPreview\n                                cards={Object.values(cards).map(c => ({ ...c, ...(state.cardList[c.name] ?? {}) })) as any}\n                                style={expanded ? style : \"Compressed\"}\n                                actions={deckName === DeckName.Wishlist ? \"SearchWishlist\" : \"Deck\"}\n                                sortBy={sortBy}\n                                sortOrder={sortOrder}\n                                showGroups={showGroups}\n                                deckName={deckName}\n                                sectionName={sectionName}\n                            />\n                        </SectionRow>\n                    ))}\n                </FlexCol>\n                <AppletActions>\n                    <TooltipButton title=\"Export deck\" onClick={onExportOpen}>\n                        <GetAppIcon />\n                    </TooltipButton>\n                    {deckName !== DeckName.Collection && deckName !== DeckName.Wishlist && (\n                        <TooltipButton title=\"Delete deck\" onClick={onDeleteDeck}>\n                            <DeleteIcon />\n                        </TooltipButton>\n                    )}\n                    {deck.isDirty && (\n                        <TooltipButton title=\"Save changes\" onClick={onSaveChanges} background=\"primary\">\n                            <SaveIcon />\n                        </TooltipButton>\n                    )}\n                </AppletActions>\n            </Body>\n            <Dialog open={exportOpened} onClose={onExportClose} aria-labelledby=\"export-deck-dialog\" fullWidth maxWidth=\"md\">\n                <DialogTitle id=\"import-deck-dialog\">Export</DialogTitle>\n                <DialogContent>\n                    <ExportRow>\n                        <DialogContentText>Copy exported text below.</DialogContentText>\n                        <TooltipButton title=\"Copy to clipboard\" onClick={() => copy(CollectionParser.deserialize(deck.cards))}>\n                            <ClipboardIcon />\n                        </TooltipButton>\n                    </ExportRow>\n                    <TextField\n                        label=\"Export\"\n                        multiline\n                        rows=\"15\"\n                        fullWidth\n                        variant=\"outlined\"\n                        value={CollectionParser.deserialize(deck.cards)}\n                        InputProps={{\n                            readOnly: true,\n                        }}\n                    />\n                </DialogContent>\n            </Dialog>\n        </AppletContent>\n    );\n};\n\nexport default DeckPreview;\n","import React from \"react\";\nimport { AppletContent, Title } from \"../Styled/Grid\";\n\nconst UserInfo: React.FC = () => {\n    return (\n        <AppletContent>\n            <Title>User info</Title>\n            UserInfo paceholder.\n        </AppletContent>\n    );\n};\n\nexport default UserInfo;\n","import { Badge } from \"@material-ui/core\";\r\nimport CollectionsIcon from \"@material-ui/icons/Collections\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport React from \"react\";\r\nimport { Deck, DeckName, getDeckName, State } from \"../../State\";\r\nimport { DrawerAvatar } from \"../Styled/Grid\";\r\nimport { AvatarProps } from \"@material-ui/core/Avatar\";\r\n\r\nconst getDeckIcon = (name: string) => {\r\n    return name === DeckName.Wishlist ? <FavoriteIcon /> : <CollectionsIcon />;\r\n};\r\n\r\ntype Props = {\r\n    deck: Deck;\r\n    variant?: AvatarProps[\"variant\"];\r\n};\r\n\r\nconst DeckAvatar: React.FC<Props> = ({ deck, variant }) => {\r\n    const [state] = React.useContext(State);\r\n    return (\r\n        <Badge\r\n            invisible={!state.decks[deck.name].isDirty}\r\n            color=\"primary\"\r\n            overlap=\"circle\"\r\n            badgeContent=\" \"\r\n            anchorOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"right\",\r\n            }}\r\n        >\r\n            <DrawerAvatar variant={variant} alt={getDeckName(deck.name)} src={deck.previewUrl}>\r\n                {getDeckIcon(deck.name)}\r\n            </DrawerAvatar>\r\n        </Badge>\r\n    );\r\n};\r\nexport default DeckAvatar;\r\n","import { Divider, List, ListItem, ListItemAvatar, ListItemText, Tooltip } from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport React from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { Deck, DeckName, getDeckName, State } from \"../../State\";\r\nimport { DrawerAvatar } from \"../Styled/Grid\";\r\nimport styled from \"../Styled/Theme\";\r\nimport DeckAvatar from \"./DeckAvatar\";\r\n\r\nconst StyledItemText = styled(ListItemText)`\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n`;\r\n\r\ntype Props = {\r\n    open: boolean;\r\n};\r\n\r\nconst DrawerDeckList: React.FC<Props> = ({ open }) => {\r\n    const { pathname } = useLocation();\r\n    const [state] = React.useContext(State);\r\n\r\n    const renderItem = (deck: Deck) => (\r\n        <Tooltip key={deck.name} title={open ? \"\" : (state.decks[deck.name].isDirty ? \"*\" : \"\") + getDeckName(deck.name)} placement=\"right\">\r\n            <ListItem\r\n                component={Link}\r\n                to={`/decks/${encodeURIComponent(deck.name)}`}\r\n                button\r\n                selected={state.selectedDeck === deck.name && !pathname.match(\"/addDeck\")}\r\n            >\r\n                <ListItemAvatar>\r\n                    <DeckAvatar deck={deck} />\r\n                </ListItemAvatar>\r\n                <StyledItemText primary={getDeckName(deck.name)} />\r\n            </ListItem>\r\n        </Tooltip>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {renderItem(state.decks[DeckName.Collection])}\r\n                {renderItem(state.decks[DeckName.Wishlist])}\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                <Tooltip title=\"Add deck\" placement=\"right\">\r\n                    <ListItem component={Link} to=\"/addDeck/\" button selected={!!pathname.match(\"/addDeck\")}>\r\n                        <ListItemAvatar>\r\n                            <DrawerAvatar alt=\"Add deck\">\r\n                                <AddCircleOutlineIcon />\r\n                            </DrawerAvatar>\r\n                        </ListItemAvatar>\r\n                        <StyledItemText primary=\"Add deck\" />\r\n                    </ListItem>\r\n                </Tooltip>\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                {Object.values(state.decks)\r\n                    .filter(deck => deck.name !== DeckName.Collection && deck.name !== DeckName.Wishlist)\r\n                    .map(deck => renderItem(deck))}\r\n            </List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DrawerDeckList;\r\n","import { Button, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, FormControlLabel, FormGroup, TextField, Tooltip, Typography } from \"@material-ui/core\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport React from \"react\";\nimport Scry from \"../../Utility/Scry\";\nimport { AppletActions, AppletContent, FlexCol, Title } from \"../Styled/Grid\";\nimport SymbolTypography from \"../Styled/SymbolTypography\";\nimport styled from \"../Styled/Theme\";\n\n// TODO: remove from here & make it reusable?\nconst PreviewRow = styled.div`\n    display: flex;\n    margin-top: ${p => p.theme.spacing(1)}px;\n    align-items: center;\n\n    & .MuiAutocomplete-root {\n        flex-grow: 1;\n        margin-right: ${p => p.theme.spacing(1)}px;\n    }\n`;\n\n// Reusable?\ninterface CardSearchFilter {\n    /** Array of selected colors inside advanced search */\n    colors: {\n        r: boolean; // Red\n        g: boolean; // Green\n        u: boolean; // Blue\n        b: boolean; // Black\n        w: boolean; // White\n    };\n    /** Checkbox whether the search should match exact colors */\n    colorExactMatch: boolean;\n\n    /** Converted Mana Cost */\n    cmc: number;\n    /** Type: equal [=], less than [<], more than [>] */\n    cmcType: string;\n\n    // type: string;\n    // subtype: string;\n\n    // legality: string;\n}\n\nconst initCardSearchFilter = (): CardSearchFilter => {\n    return {\n        colors: { r: false, g: false, u: false, b: false, w: false },\n        colorExactMatch: false,\n        cmc: 0,\n        cmcType: \"=\",\n    };\n};\n\nconst CardSearch: React.FC = () => {\n    // Card name & autocomplete structures\n    const [cardName, setCardName] = React.useState<string>(\"\");\n    const [autoompleteOptions, setAutocompleteOptions] = React.useState<string[]>([]);\n\n    const updateAutoComplete = (name: string) => {\n        setCardName(name);\n        Scry.Cards.Autocomplete(cardName).then(names => setAutocompleteOptions(names));\n    };\n\n    const performSearch = () => {\n        alert(JSON.stringify(filter));\n    };\n\n    // Advanced Filters Dialog structures\n    const [dialogOpen, setDialogOpen] = React.useState<boolean>(false);\n    const openDialog = () => setDialogOpen(true);\n    const closeDialog = () => setDialogOpen(false);\n\n    // Filter structures\n    const [filter, setFilter] = React.useState<CardSearchFilter>(initCardSearchFilter());\n\n    const resetFilter = () => setFilter(initCardSearchFilter());\n    const handleColors = (color: \"r\" | \"g\" | \"u\" | \"b\" | \"w\") => (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newFilter = { ...filter };\n        newFilter.colors[color] = event.target.checked;\n        setFilter(newFilter);\n    };\n\n    return (\n        <AppletContent>\n            <Title>Card search</Title>\n\n            <FlexCol>\n                <PreviewRow>\n                    <Autocomplete\n                        freeSolo\n                        autoHighlight\n                        disableClearable\n                        options={autoompleteOptions}\n                        inputValue={cardName}\n                        onInputChange={(e, value) => updateAutoComplete(value)}\n                        renderInput={params => <TextField {...params} label=\"Card name\" variant=\"outlined\" fullWidth />}\n                    />\n                </PreviewRow>\n            </FlexCol>\n\n            <Dialog open={dialogOpen} onClose={closeDialog} aria-labelledby=\"advanced-card-search-dialog\" maxWidth=\"md\" fullWidth>\n                <DialogTitle id=\"advanced-card-search-dialog\">Advanced card search</DialogTitle>\n                <DialogContent>\n                    <Typography variant=\"subtitle2\">Filter by color</Typography>\n                    <FormGroup row>\n                        <FormControlLabel\n                            label={<SymbolTypography text=\"{R} Red\" />}\n                            control={<Checkbox checked={filter.colors.r} onChange={handleColors(\"r\")} />}\n                        />\n                        <FormControlLabel\n                            label={<SymbolTypography text=\"{G} Green\" />}\n                            control={<Checkbox checked={filter.colors.g} onChange={handleColors(\"g\")} />}\n                        />\n                        <FormControlLabel\n                            label={<SymbolTypography text=\"{U} Blue\" />}\n                            control={<Checkbox checked={filter.colors.u} onChange={handleColors(\"u\")} />}\n                        />\n                        <FormControlLabel\n                            label={<SymbolTypography text=\"{B} Black\" />}\n                            control={<Checkbox checked={filter.colors.b} onChange={handleColors(\"b\")} />}\n                        />\n                        <FormControlLabel\n                            label={<SymbolTypography text=\"{W} White\" />}\n                            control={<Checkbox checked={filter.colors.w} onChange={handleColors(\"w\")} />}\n                        />\n                    </FormGroup>\n\n                    <FormControlLabel\n                        label=\"Exact color match?\"\n                        control={<Checkbox checked={filter.colorExactMatch} onChange={e => setFilter({ ...filter, colorExactMatch: e.target.checked })} />}\n                    />\n\n                    {/* <br />\n\n                        <ul>\n                            <li>[DONE] Filter by color identity (only selected colors or all cards with selected colors)</li>\n                            <li>Filter by converted mana cost (equal, less than, more than)</li>\n                            <li>Filter by type/subtype (restrict subtype options based on type)</li>\n                            <li>Filter by format legality (choose one)</li>\n                        </ul> */}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={resetFilter} color=\"primary\">\n                        Reset\n                    </Button>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        OK\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <AppletActions>\n                <Tooltip title=\"Advanced search filter\">\n                    <Button onClick={openDialog}>\n                        <FilterListIcon />\n                    </Button>\n                </Tooltip>\n                <Tooltip title=\"Search for results\">\n                    <Button onClick={performSearch}>\n                        <SearchIcon />\n                    </Button>\n                </Tooltip>\n            </AppletActions>\n        </AppletContent>\n    );\n};\n\nexport default CardSearch;\n","import { Avatar, Paper, Typography } from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport CollectionsIcon from \"@material-ui/icons/Collections\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Deck, DeckName, getDeckName, SectionName, State } from \"../../State\";\r\nimport Scry from \"../../Utility/Scry\";\r\nimport SymbolTypography from \"../Styled/SymbolTypography\";\r\nimport styled, { css } from \"../Styled/Theme\";\r\n\r\nconst DeckBoxBody = styled.div`\r\n    padding-bottom: 65%;\r\n    width: 100%;\r\n    height: 0;\r\n    position: relative;\r\n`;\r\n\r\nconst DeckBoxAvatar = styled(Avatar)`\r\n    background-color: ${p => p.theme.palette.background.default};\r\n    color: ${p => p.theme.palette.text.secondary};\r\n    border-radius: ${p => p.theme.spacing(4)}px;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst DeckBoxTitle = styled(Paper)`\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: ${p => p.theme.spacing(1, 2)};\r\n    background-color: ${p => p.theme.palette.grey[900]};\r\n    border-radius: ${p => p.theme.spacing(4)}px;\r\n\r\n    & .MuiTypography-root {\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n`;\r\n\r\nconst DeckColorIdentity = styled.div`\r\n    position: absolute;\r\n    top: -75%;\r\n    right: 50%;\r\n    transform: translateX(50%);\r\n`;\r\n\r\nconst LargeIcon = css`\r\n    width: 50%;\r\n    height: 50%;\r\n`;\r\n\r\nconst LargeFavoriteIcon = styled(FavoriteIcon)`\r\n    ${LargeIcon}\r\n`;\r\nconst LargeCollectionsIcon = styled(CollectionsIcon)`\r\n    ${LargeIcon}\r\n`;\r\nconst LargeAddCircleOutlineIcon = styled(AddCircleOutlineIcon)`\r\n    ${LargeIcon}\r\n`;\r\n\r\nconst getDeckIcon = (name: string) => {\r\n    return name === DeckName.Wishlist ? <LargeFavoriteIcon /> : <LargeCollectionsIcon />;\r\n};\r\n\r\ntype Props = {\r\n    deck?: Deck;\r\n};\r\n\r\nconst DeckBox: React.FC<Props> = ({ deck }) => {\r\n    const [state] = React.useContext(State);\r\n    if (!deck) {\r\n        return (\r\n            <DeckBoxBody>\r\n                <Link to=\"/addDeck/\">\r\n                    <DeckBoxAvatar variant=\"rounded\" alt=\"Add deck\">\r\n                        <LargeAddCircleOutlineIcon />\r\n                    </DeckBoxAvatar>\r\n                </Link>\r\n            </DeckBoxBody>\r\n        );\r\n    }\r\n    return (\r\n        <DeckBoxBody>\r\n            <Link to={`/decks/${encodeURIComponent(deck.name)}`}>\r\n                <DeckBoxAvatar variant=\"rounded\" alt={getDeckName(deck.name)} src={deck.previewUrl}>\r\n                    {getDeckIcon(deck.name)}\r\n                </DeckBoxAvatar>\r\n                <DeckBoxTitle>\r\n                    <DeckColorIdentity>\r\n                        <SymbolTypography variant=\"h3\" text={Scry.getColorIdentity(...Object.keys(deck.cards[SectionName.Default]).map(c => state.cardList[c]))} />\r\n                    </DeckColorIdentity>\r\n                    <Typography variant=\"h6\">{getDeckName(deck.name)}</Typography>\r\n                </DeckBoxTitle>\r\n            </Link>\r\n        </DeckBoxBody>\r\n    );\r\n};\r\nexport default DeckBox;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { DeckName, State } from \"../../State\";\r\nimport { AppletContent, Title } from \"../Styled/Grid\";\r\nimport DeckBox from \"./DeckBox\";\r\n\r\nconst DeckList: React.FC = () => {\r\n    const [state] = React.useContext(State);\r\n    return (\r\n        <AppletContent>\r\n            <Title>Your decks</Title>\r\n            <Grid container spacing={6} direction=\"column\">\r\n                <Grid item container spacing={1}>\r\n                    <Grid item xs={12} sm={6} lg={3}>\r\n                        <DeckBox deck={state.decks[DeckName.Collection]} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} lg={3}>\r\n                        <DeckBox deck={state.decks[DeckName.Wishlist]} />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item container spacing={1}>\r\n                    <Grid item xs={12} sm={6} lg={3}>\r\n                        <DeckBox />\r\n                    </Grid>\r\n                    {Object.values(state.decks)\r\n                        .filter(deck => deck.name !== DeckName.Collection && deck.name !== DeckName.Wishlist)\r\n                        .map(deck => (\r\n                            <Grid key={deck.name} item xs={12} sm={6} lg={3}>\r\n                                <DeckBox deck={deck} />\r\n                            </Grid>\r\n                        ))}\r\n                </Grid>\r\n            </Grid>\r\n        </AppletContent>\r\n    );\r\n};\r\n\r\nexport default DeckList;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport CardSearch from \"./Applets/CardSearch\";\r\nimport DeckList from \"./Applets/DeckList\";\r\nimport SymbolTypography from \"./Styled/SymbolTypography\";\r\n\r\nconst Home: React.FC = () => {\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n                <CardSearch />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <DeckList />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst NotFound: React.FC = () => {\r\n    return <div>Not found</div>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport { GoogleIcon } from \"./Styled/Icons\";\r\n\r\ntype Props = {\r\n    variant?: \"text\" | \"outlined\" | \"contained\";\r\n    onClick: () => void;\r\n};\r\n\r\nconst SignInButton: React.FC<Props> = ({ variant, onClick }: Props) => {\r\n    return (\r\n        <Button variant={variant} onClick={onClick} startIcon={<GoogleIcon />}>\r\n            <Typography noWrap>Sign in</Typography>\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default SignInButton;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Logo from \"../Assets/logo.png\";\r\nimport GoogleApi from \"../Utility/GoogleApi\";\r\nimport SignInButton from \"./SignInButton\";\r\n\r\nconst SignIn: React.FC = () => {\r\n    return (\r\n        <>\r\n            <Grid container justify=\"center\" alignItems=\"center\" style={{ padding: 25 }}>\r\n                <img src={Logo} alt=\"\" width=\"150px\" height=\"150px\" draggable={false} />\r\n            </Grid>\r\n            <Grid container justify=\"center\" alignItems=\"center\">\r\n                <SignInButton variant=\"contained\" onClick={GoogleApi.signIn} />\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignIn;\r\n","import { AppBar, Avatar, ClickAwayListener, Container, Divider, Drawer, IconButton, Link as MUILink, Toolbar, Tooltip, Typography } from \"@material-ui/core\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Axios, { AxiosResponse } from \"axios\";\nimport React from \"react\";\nimport { Link, Route, Switch, useHistory } from \"react-router-dom\";\nimport { isNullOrUndefined } from \"util\";\nimport { initialState, State } from \"../State\";\nimport { reducer } from \"../State/Reducers\";\nimport GoogleApi, { GoogleProfile } from \"../Utility/GoogleApi\";\nimport Scry from \"../Utility/Scry\";\nimport { ScryCardSymbol, ScrySet } from \"../Utility/Scry/Types\";\nimport AddDeck from \"./Applets/AddDeck\";\nimport DeckPreview from \"./Applets/DeckPreview\";\nimport UserInfo from \"./Applets/UserInfo\";\nimport DrawerDeckList from \"./Drawer/DrawerDeckList\";\nimport Home from \"./Home\";\nimport NotFound from \"./NotFound\";\nimport SignIn from \"./SignIn\";\nimport SignInButton from \"./SignInButton\";\nimport { FlexCol } from \"./Styled/Grid\";\nimport styled, { ComponentProps, css, MainTheme } from \"./Styled/Theme\";\nimport TooltipButton from \"./Styled/TooltipButton\";\n\nconst bodyOpen = css<ComponentProps<any>>`\n    margin-left: ${p => p.theme.constants.drawerWidth};\n    width: calc(100% - ${p => p.theme.constants.drawerWidth});\n    transition: ${p =>\n        p.theme.transitions.create([\"width\", \"margin\"], {\n            easing: p.theme.transitions.easing.sharp,\n            duration: p.theme.transitions.duration.enteringScreen,\n        })};\n`;\n\nconst bodyClose = css<ComponentProps<any>>`\n    transition: ${p =>\n        p.theme.transitions.create([\"width\", \"margin\"], {\n            easing: p.theme.transitions.easing.sharp,\n            duration: p.theme.transitions.duration.leavingScreen,\n        })};\n`;\n\nconst CustomAppBar = styled(AppBar)<{ open: boolean }>`\n    z-index: ${p => p.theme.zIndex.drawer + 1};\n    ${bodyClose}\n    ${p => p.open && bodyOpen}\n    ${p =>\n        p.open &&\n        css`\n            ${p.theme.breakpoints.down(\"xs\")} {\n                & {\n                    width: 100%;\n                    margin-left: 0;\n                }\n            }\n        `}\n`;\n\nconst MenuButton = styled(IconButton)<{ open: boolean }>`\n    margin-right: 36px;\n    ${p =>\n        p.open &&\n        css`\n            display: none;\n        `}\n\n    ${p => p.theme.breakpoints.down(\"xs\")} {\n        & {\n            margin-right: ${p => p.theme.spacing(1)}px;\n            display: inline-block;\n        }\n    }\n`;\n\nconst drawerOpen = css<ComponentProps<any>>`\n    width: ${p => p.theme.constants.drawerWidth};\n    transition: ${p =>\n        p.theme.transitions.create(\"width\", {\n            easing: p.theme.transitions.easing.sharp,\n            duration: p.theme.transitions.duration.enteringScreen,\n        })};\n`;\n\nconst drawerClose = css<ComponentProps<any>>`\n    width: ${p => p.theme.constants.drawerWidthClosed};\n    transition: ${p =>\n        p.theme.transitions.create(\"width\", {\n            easing: p.theme.transitions.easing.sharp,\n            duration: p.theme.transitions.duration.leavingScreen,\n        })};\n    overflow-x: hidden;\n\n    ${p => p.theme.breakpoints.down(\"xs\")} {\n        & {\n            width: 0;\n        }\n    }\n`;\n\nconst CustomDrawer = styled(Drawer).attrs(() => ({\n    variant: \"permanent\",\n}))<{ open?: boolean }>`\n    width: ${p => p.theme.constants.drawerWidth};\n    flex-shrink: 0;\n    white-space: nowrap;\n    ${p => (p.open ? drawerOpen : drawerClose)}\n\n    .MuiDrawer-paper {\n        ${p => (p.open ? drawerOpen : drawerClose)}\n    }\n`;\n\nconst DrawerToolbar = styled(Toolbar)`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    padding: ${p => p.theme.spacing(0, 1)}px;\n`;\n\nconst NoGutterContainer = styled(Container)`\n    ${p => p.theme.breakpoints.down(\"xs\")} {\n        & {\n            padding: 0;\n        }\n    }\n`;\n\nconst MainContent = styled.div<{ open: boolean }>`\n    flex-grow: 1;\n    padding: ${p => p.theme.spacing(2)}px;\n    margin-left: ${p => p.theme.constants.drawerWidthClosed};\n    ${bodyClose}\n    ${p => p.open && bodyOpen}\n\n    ${p =>\n        p.open &&\n        css`\n            ${p.theme.breakpoints.down(\"sm\")} {\n                & {\n                    margin-left: ${p => p.theme.constants.drawerWidthClosed};\n                    width: calc(100% - ${p => p.theme.constants.drawerWidthClosed});\n                }\n            }\n        `}\n    ${p => p.theme.breakpoints.down(\"xs\")} {\n        & {\n            width: 100%;\n            margin-left: 0;\n            padding: 0;\n        }\n    }\n`;\n\nconst ProfileAvatar = styled.div`\n    margin-right: ${p => p.theme.spacing(1)}px;\n`;\n\nconst App: React.FC = () => {\n    const history = useHistory();\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n\n    const [profile, setProfile] = React.useState<GoogleProfile>();\n    const [isSignedIn, setIsSignedIn] = React.useState<boolean | undefined>(undefined);\n\n    const handleSignoutClick = () => {\n        GoogleApi.signOut();\n        setProfile(undefined);\n    };\n\n    const [[open], setOpen] = React.useState<[boolean, boolean]>([false, false]);\n\n    const handleDrawerToggle = () => setOpen(p => [!p[0], true]);\n    const handleDrawerClose = () => setOpen(p => [p[1] ? p[0] : false, false]);\n\n    React.useEffect(() => {\n        GoogleApi.initClient(async (isSignedIn: boolean) => {\n            let redirect = history.location.pathname;\n            setIsSignedIn(isSignedIn);\n            if (!isSignedIn) {\n                history.push(\"/signin/\");\n                return;\n            }\n            if (redirect.match(\"/signin\")) redirect = \"/\";\n            history.push(redirect);\n            setProfile(GoogleApi.getProfile());\n            GoogleApi.prepareAppData()(dispatch);\n        });\n        Scry.Symbology.All()\n            .then(symbols => {\n                const endpoint = Axios.create({\n                    baseURL: \"\",\n                    responseType: \"text\",\n                    headers: {\n                        \"Content-Type\": \"image/svg+xml\",\n                    },\n                });\n                return Promise.all(\n                    symbols.map(symbol =>\n                        endpoint.get<string, AxiosResponse<ScryCardSymbol>>(symbol.svg_uri, { transformResponse: r => ({ ...symbol, svg: r }) })\n                    )\n                );\n            })\n            .then(responses => {\n                dispatch({\n                    type: \"AddSymbols\",\n                    symbols: responses.map(r => r.data),\n                });\n            })\n            .then(Scry.Sets.All)\n            .then(sets => {\n                const endpoint = Axios.create({\n                    baseURL: \"\",\n                    responseType: \"text\",\n                    headers: {\n                        \"Content-Type\": \"image/svg+xml\",\n                    },\n                });\n                return Promise.all(\n                    sets.map(set => endpoint.get<string, AxiosResponse<ScrySet>>(set.icon_svg_uri, { transformResponse: r => ({ ...set, icon_svg: r }) }))\n                );\n            })\n            .then(responses => {\n                dispatch({\n                    type: \"AddSets\",\n                    sets: responses.map(r => r.data),\n                });\n            });\n    }, []);\n\n    return (\n        <State.Provider value={[state, dispatch]}>\n            <CustomAppBar position=\"sticky\" open={open}>\n                <Toolbar>\n                    <MenuButton color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerToggle} edge=\"start\" open={open}>\n                        <MenuIcon />\n                    </MenuButton>\n                    <Typography variant=\"h6\" style={{ overflow: \"hidden\" }}>\n                        <MUILink variant=\"inherit\" color=\"inherit\" underline=\"none\" component={Link} to=\"/\">\n                            MTGCollection\n                        </MUILink>\n                    </Typography>\n                    <FlexCol />\n                    {isSignedIn ? (\n                        <>\n                            {!isNullOrUndefined(profile) && (\n                                <ProfileAvatar>\n                                    <Tooltip title={`Signed in as ${profile.getGivenName()} (${profile.getEmail()})`}>\n                                        <Avatar component={Link} to=\"/user/\" alt={profile.getGivenName()} src={profile.getImageUrl()} />\n                                    </Tooltip>\n                                </ProfileAvatar>\n                            )}\n                            <TooltipButton title=\"SignOut\" onClick={handleSignoutClick}>\n                                <ExitToAppIcon />\n                            </TooltipButton>\n                        </>\n                    ) : (\n                        <SignInButton onClick={GoogleApi.signIn} />\n                    )}\n                </Toolbar>\n            </CustomAppBar>\n            <ClickAwayListener onClickAway={handleDrawerClose}>\n                <CustomDrawer open={open}>\n                    <DrawerToolbar>\n                        <IconButton onClick={handleDrawerClose}>{MainTheme.direction === \"rtl\" ? <ChevronRightIcon /> : <ChevronLeftIcon />}</IconButton>\n                    </DrawerToolbar>\n                    <Divider />\n                    {isSignedIn && <DrawerDeckList open={open} />}\n                </CustomDrawer>\n            </ClickAwayListener>\n            <NoGutterContainer maxWidth=\"xl\">\n                <MainContent open={open}>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route exact path=\"/signin/\" component={SignIn} />\n                        <Route exact path=\"/user/\" component={UserInfo} />\n                        <Route exact path=\"/addDeck/\" component={AddDeck} />\n                        <Route path=\"/decks/:deckName\" component={DeckPreview} />\n                        <Route component={NotFound} />\n                    </Switch>\n                </MainContent>\n            </NoGutterContainer>\n        </State.Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { CssBaseline } from \"@material-ui/core\";\nimport { ThemeProvider as MUIThemeProvider, StylesProvider } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./Components/App\";\nimport { MainTheme } from \"./Components/Styled/Theme\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <StylesProvider injectFirst>\n            <ThemeProvider theme={MainTheme}>\n                <MUIThemeProvider theme={MainTheme}>\n                    <CssBaseline />\n                    <App />\n                </MUIThemeProvider>\n            </ThemeProvider>\n        </StylesProvider>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}