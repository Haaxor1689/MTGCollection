{"version":3,"sources":["Components/Styled/SymbolIcon.tsx","Components/Styled/SymbolTypography.tsx","Components/Applets/CardSearch.tsx","Components/Applets/DeckBox.tsx","Components/Applets/DeckList.tsx","Components/Applets/Home.tsx"],"names":["Symbol","styled","svg","map","v","size","css","SymbolIcon","symbol","React","useContext","AppState","state","useState","symbolObj","setSymbolObj","useEffect","symbolList","Object","values","find","s","loose_variant","dangerouslySetInnerHTML","__html","SymbolTypography","text","typographyProps","parsed","setParsed","match","m","i","key","Typography","PreviewRow","div","p","theme","spacing","CardSearch","cardName","setCardName","autoompleteOptions","setAutocompleteOptions","dialogOpen","setDialogOpen","closeDialog","colors","R","G","U","B","W","colorExactMatch","cmc","cmcType","filter","setFilter","handleColors","color","event","newFilter","target","checked","Autocomplete","freeSolo","autoHighlight","disableClearable","options","inputValue","onInputChange","e","value","Scry","Cards","then","names","renderInput","params","TextField","label","variant","fullWidth","Dialog","open","onClose","aria-labelledby","maxWidth","DialogTitle","id","DialogContent","FormGroup","row","FormControlLabel","control","Checkbox","onChange","DialogActions","Button","onClick","Tooltip","title","alert","JSON","stringify","DeckBoxBody","DeckBoxAvatar","Avatar","palette","background","default","secondary","DeckBoxTitle","Paper","grey","DeckColorIdentity","LargeIcon","LargeFavoriteIcon","FavoriteIcon","LargeCollectionsIcon","CollectionsIcon","LargeAddCircleOutlineIcon","AddCircleOutlineIcon","DeckBox","deck","to","RouteNames","Deck","encodeURIComponent","name","alt","getDeckName","src","previewUrl","DeckName","Wishlist","Collection","getColorIdentity","keys","cards","SectionName","Default","c","cardList","AddDeck","DeckList","Grid","container","direction","item","xs","sm","lg","decks","Home"],"mappings":"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","file":"static/js/13.788f66d4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppState } from \"../../State\";\r\nimport { ScryCardSymbol } from \"../../Utility/Scry/Types\";\r\nimport styled, { css } from \"./Theme\";\r\nimport { TypographyProps } from \"@material-ui/core/Typography\";\r\n\r\nconst sizeMap: [TypographyProps[\"variant\"], number][] = [\r\n    [\"h1\", 80],\r\n    [\"h2\", 51],\r\n    [\"h3\", 42],\r\n    [\"h4\", 30],\r\n    [\"h5\", 25],\r\n    [\"h6\", 20],\r\n    [\"subtitle1\", 16],\r\n    [\"subtitle2\", 14],\r\n    [\"body1\", 16],\r\n    [\"body2\", 14],\r\n    [\"caption\", 12],\r\n    [\"button\", 16],\r\n    [\"overline\", 14],\r\n];\r\n\r\nconst Symbol = styled.svg`\r\n    display: inline-block;\r\n    height: 16px;\r\n    width: 16px;\r\n    margin: 1px 1px -2px 1px;\r\n\r\n    ${sizeMap.map(\r\n        ([v, size]) => css`\r\n            .MuiTypography-${v} & {\r\n                height: ${size}px;\r\n                width: ${size}px;\r\n            }\r\n        `\r\n    )}\r\n`;\r\n\r\ntype Props = {\r\n    symbol: string;\r\n};\r\n\r\nconst SymbolIcon: React.FC<Props> = ({ symbol }) => {\r\n    const [state] = React.useContext(AppState);\r\n    const [symbolObj, setSymbolObj] = React.useState<ScryCardSymbol>();\r\n    React.useEffect(() => {\r\n        setSymbolObj(state.symbolList[symbol] ?? Object.values(state.symbolList).find(s => s.loose_variant === symbol));\r\n    }, [symbol, state.symbolList]);\r\n    return symbolObj ? <Symbol dangerouslySetInnerHTML={{ __html: symbolObj.svg }} /> : <>{symbol}</>;\r\n};\r\n\r\nexport default SymbolIcon;\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { TypographyProps } from \"@material-ui/core/Typography\";\r\nimport SymbolIcon from \"./SymbolIcon\";\r\n\r\ntype Props = TypographyProps & {\r\n    text: string;\r\n};\r\n\r\nconst SymbolTypography: React.FC<Props> = ({ text, ...typographyProps }) => {\r\n    const [parsed, setParsed] = React.useState<JSX.Element[]>([]);\r\n    React.useEffect(() => {\r\n        setParsed((text.match(/({.*?})|([^{]+)/g) ?? []).map((m, i) => (m[0] === \"{\" ? <SymbolIcon key={i} symbol={m} /> : <span key={i}>{m}</span>)));\r\n    }, [text]);\r\n    return <Typography {...typographyProps}>{parsed}</Typography>;\r\n};\r\n\r\nexport default SymbolTypography;\r\n","import {\n    Button,\n    Checkbox,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControlLabel,\n    FormGroup,\n    TextField,\n    Tooltip,\n    Typography,\n} from \"@material-ui/core\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport React from \"react\";\nimport Scry from \"../../Utility/Scry\";\nimport { ScryCardColor } from \"../../Utility/Scry/Types\";\nimport { AppletActions, AppletContent, FlexCol, Title } from \"../Styled/Grid\";\nimport SymbolTypography from \"../Styled/SymbolTypography\";\nimport styled from \"../Styled/Theme\";\n\n// TODO: remove from here & make it reusable?\nconst PreviewRow = styled.div`\n    display: flex;\n    margin-top: ${p => p.theme.spacing(1)}px;\n    align-items: center;\n\n    & .MuiAutocomplete-root {\n        flex-grow: 1;\n        margin-right: ${p => p.theme.spacing(1)}px;\n    }\n`;\n\n// Reusable?\ninterface CardSearchFilter {\n    /** Array of selected colors inside advanced search */\n    colors: Record<ScryCardColor, boolean>;\n    /** Checkbox whether the search should match exact colors */\n    colorExactMatch: boolean;\n\n    /** Converted Mana Cost */\n    cmc: number;\n    /** Type: equal [=], less than [<], more than [>] */\n    cmcType: string;\n\n    // type: string;\n    // subtype: string;\n\n    // legality: string;\n}\n\nconst initCardSearchFilter = (): CardSearchFilter => {\n    return {\n        colors: { R: false, G: false, U: false, B: false, W: false },\n        colorExactMatch: false,\n        cmc: 0,\n        cmcType: \"=\",\n    };\n};\n\nconst CardSearch: React.FC = () => {\n    // Card name & autocomplete structures\n    const [cardName, setCardName] = React.useState<string>(\"\");\n    const [autoompleteOptions, setAutocompleteOptions] = React.useState<string[]>([]);\n\n    const updateAutoComplete = (name: string) => {\n        setCardName(name);\n        Scry.Cards.Autocomplete(cardName).then(names => setAutocompleteOptions(names));\n    };\n\n    const performSearch = () => {\n        alert(JSON.stringify(filter));\n    };\n\n    // Advanced Filters Dialog structures\n    const [dialogOpen, setDialogOpen] = React.useState<boolean>(false);\n    const openDialog = () => setDialogOpen(true);\n    const closeDialog = () => setDialogOpen(false);\n\n    // Filter structures\n    const [filter, setFilter] = React.useState<CardSearchFilter>(initCardSearchFilter());\n\n    const resetFilter = () => setFilter(initCardSearchFilter());\n    const handleColors = (color: ScryCardColor) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newFilter = { ...filter };\n        newFilter.colors[color] = event.target.checked;\n        setFilter(newFilter);\n    };\n\n    return (\n        <AppletContent>\n            <Title>Card search</Title>\n\n            <FlexCol>\n                <PreviewRow>\n                    <Autocomplete\n                        freeSolo\n                        autoHighlight\n                        disableClearable\n                        options={autoompleteOptions}\n                        inputValue={cardName}\n                        onInputChange={(e, value) => updateAutoComplete(value)}\n                        renderInput={params => <TextField {...params} label=\"Card name\" variant=\"outlined\" fullWidth />}\n                    />\n                </PreviewRow>\n            </FlexCol>\n\n            <Dialog open={dialogOpen} onClose={closeDialog} aria-labelledby=\"advanced-card-search-dialog\" maxWidth=\"md\" fullWidth>\n                <DialogTitle id=\"advanced-card-search-dialog\">Advanced card search</DialogTitle>\n                <DialogContent>\n                    <Typography variant=\"subtitle2\">Filter by color</Typography>\n                    <FormGroup row>\n                        <FormControlLabel\n                            label={<SymbolTypography text=\"{R} Red\" />}\n                            control={<Checkbox checked={filter.colors.R} onChange={handleColors(\"R\")} />}\n                        />\n                        <FormControlLabel\n                            label={<SymbolTypography text=\"{G} Green\" />}\n                            control={<Checkbox checked={filter.colors.G} onChange={handleColors(\"G\")} />}\n                        />\n                        <FormControlLabel\n                            label={<SymbolTypography text=\"{U} Blue\" />}\n                            control={<Checkbox checked={filter.colors.U} onChange={handleColors(\"U\")} />}\n                        />\n                        <FormControlLabel\n                            label={<SymbolTypography text=\"{B} Black\" />}\n                            control={<Checkbox checked={filter.colors.B} onChange={handleColors(\"B\")} />}\n                        />\n                        <FormControlLabel\n                            label={<SymbolTypography text=\"{W} White\" />}\n                            control={<Checkbox checked={filter.colors.W} onChange={handleColors(\"W\")} />}\n                        />\n                    </FormGroup>\n\n                    <FormControlLabel\n                        label=\"Exact color match?\"\n                        control={<Checkbox checked={filter.colorExactMatch} onChange={e => setFilter({ ...filter, colorExactMatch: e.target.checked })} />}\n                    />\n\n                    {/* <br />\n\n                        <ul>\n                            <li>[DONE] Filter by color identity (only selected colors or all cards with selected colors)</li>\n                            <li>Filter by converted mana cost (equal, less than, more than)</li>\n                            <li>Filter by type/subtype (restrict subtype options based on type)</li>\n                            <li>Filter by format legality (choose one)</li>\n                        </ul> */}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={resetFilter} color=\"primary\">\n                        Reset\n                    </Button>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        OK\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <AppletActions>\n                <Tooltip title=\"Advanced search filter\">\n                    <Button onClick={openDialog}>\n                        <FilterListIcon />\n                    </Button>\n                </Tooltip>\n                <Tooltip title=\"Search for results\">\n                    <Button onClick={performSearch}>\n                        <SearchIcon />\n                    </Button>\n                </Tooltip>\n            </AppletActions>\n        </AppletContent>\n    );\n};\n\nexport default CardSearch;\n","import { Avatar, Paper, Typography } from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport CollectionsIcon from \"@material-ui/icons/Collections\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { RouteNames } from \"../../Routes/Routes\";\r\nimport { AppState, Deck, DeckName, getDeckName, SectionName } from \"../../State\";\r\nimport Scry from \"../../Utility/Scry\";\r\nimport SymbolTypography from \"../Styled/SymbolTypography\";\r\nimport styled, { css } from \"../Styled/Theme\";\r\n\r\nconst DeckBoxBody = styled.div`\r\n    padding-bottom: 65%;\r\n    width: 100%;\r\n    height: 0;\r\n    position: relative;\r\n`;\r\n\r\nconst DeckBoxAvatar = styled(Avatar)`\r\n    background-color: ${p => p.theme.palette.background.default};\r\n    color: ${p => p.theme.palette.text.secondary};\r\n    border-radius: ${p => p.theme.spacing(4)}px;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst DeckBoxTitle = styled(Paper)`\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: ${p => p.theme.spacing(1, 2)};\r\n    background-color: ${p => p.theme.palette.grey[900]};\r\n    border-radius: ${p => p.theme.spacing(4)}px;\r\n\r\n    & .MuiTypography-root {\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n`;\r\n\r\nconst DeckColorIdentity = styled.div`\r\n    position: absolute;\r\n    top: -75%;\r\n    right: 50%;\r\n    transform: translateX(50%);\r\n`;\r\n\r\nconst LargeIcon = css`\r\n    width: 50%;\r\n    height: 50%;\r\n`;\r\n\r\nconst LargeFavoriteIcon = styled(FavoriteIcon)`\r\n    ${LargeIcon}\r\n`;\r\nconst LargeCollectionsIcon = styled(CollectionsIcon)`\r\n    ${LargeIcon}\r\n`;\r\nconst LargeAddCircleOutlineIcon = styled(AddCircleOutlineIcon)`\r\n    ${LargeIcon}\r\n`;\r\n\r\nconst getDeckIcon = (name: string) => {\r\n    return name === DeckName.Wishlist ? <LargeFavoriteIcon /> : <LargeCollectionsIcon />;\r\n};\r\n\r\ntype Props = {\r\n    deck?: Deck;\r\n};\r\n\r\nconst DeckBox: React.FC<Props> = ({ deck }) => {\r\n    const [state] = React.useContext(AppState);\r\n    if (!deck) {\r\n        return (\r\n            <DeckBoxBody>\r\n                <Link to={RouteNames.AddDeck}>\r\n                    <DeckBoxAvatar variant=\"rounded\" alt=\"Add deck\">\r\n                        <LargeAddCircleOutlineIcon />\r\n                    </DeckBoxAvatar>\r\n                </Link>\r\n            </DeckBoxBody>\r\n        );\r\n    }\r\n    return (\r\n        <DeckBoxBody>\r\n            <Link to={RouteNames.Deck(encodeURIComponent(deck.name))}>\r\n                <DeckBoxAvatar variant=\"rounded\" alt={getDeckName(deck.name)} src={deck.previewUrl}>\r\n                    {getDeckIcon(deck.name)}\r\n                </DeckBoxAvatar>\r\n                <DeckBoxTitle>\r\n                    {deck.name !== DeckName.Collection && deck.name !== DeckName.Wishlist && (\r\n                        <DeckColorIdentity>\r\n                            <SymbolTypography\r\n                                variant=\"h3\"\r\n                                text={Scry.getColorIdentity(...Object.keys(deck.cards[SectionName.Default]).map(c => state.cardList[c]))}\r\n                            />\r\n                        </DeckColorIdentity>\r\n                    )}\r\n                    <Typography variant=\"h6\">{getDeckName(deck.name)}</Typography>\r\n                </DeckBoxTitle>\r\n            </Link>\r\n        </DeckBoxBody>\r\n    );\r\n};\r\nexport default DeckBox;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { AppState, DeckName } from \"../../State\";\r\nimport { AppletContent, Title } from \"../Styled/Grid\";\r\nimport DeckBox from \"./DeckBox\";\r\n\r\nconst DeckList: React.FC = () => {\r\n    const [state] = React.useContext(AppState);\r\n    return (\r\n        <AppletContent>\r\n            <Title>Your decks</Title>\r\n            <Grid container spacing={6} direction=\"column\">\r\n                <Grid item container spacing={1}>\r\n                    <Grid item xs={12} sm={6} lg={3}>\r\n                        <DeckBox deck={state.decks[DeckName.Collection]} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} lg={3}>\r\n                        <DeckBox deck={state.decks[DeckName.Wishlist]} />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item container spacing={1}>\r\n                    <Grid item xs={12} sm={6} lg={3}>\r\n                        <DeckBox />\r\n                    </Grid>\r\n                    {Object.values(state.decks)\r\n                        .filter(deck => deck.name !== DeckName.Collection && deck.name !== DeckName.Wishlist)\r\n                        .map(deck => (\r\n                            <Grid key={deck.name} item xs={12} sm={6} lg={3}>\r\n                                <DeckBox deck={deck} />\r\n                            </Grid>\r\n                        ))}\r\n                </Grid>\r\n            </Grid>\r\n        </AppletContent>\r\n    );\r\n};\r\n\r\nexport default DeckList;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport CardSearch from \"./CardSearch\";\r\nimport DeckList from \"./DeckList\";\r\n\r\nconst Home: React.FC = () => {\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n                <CardSearch />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <DeckList />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\nexport default Home;\r\n"],"sourceRoot":""}