{"version":3,"sources":["State/Reducers.ts","State/index.ts","Utility/CollectionParser.ts","Utility/GoogleApi.ts","Utility/ScryHelpers.ts","Components/CardPreview.tsx","Components/DeckPreview.tsx","Components/ImportCards.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["reducers","initialState","files","collection","decks","cardList","State","React","createContext","undefined","reducer","state","action","type","name","link","omit","card","temp","i","parseSimple","split","filter","line","match","startsWith","map","isNull","amount","parseInt","set","parseCsv","result","Papa","parse","header","dynamicTyping","skipEmptyLines","errors","length","forEach","console","error","data","c","card_name","isFoil","is_foil","set_code","comment","CollectionParser","GoogleApiInit","apiKey","process","clientId","discoveryDocs","scope","createNewFile","a","async","fileContent","folder","file","Blob","metadata","mimeType","parents","accessToken","gapi","auth","getToken","access_token","form","FormData","append","JSON","stringify","fetch","method","headers","Headers","Authorization","body","res","json","val","id","getFileContents","client","drive","get","fileId","alt","lines","text","slice","join","GoogleApi","initClient","onUpdateStatus","load","init","then","auth2","getAuthInstance","isSignedIn","listen","getProfile","currentUser","getBasicProfile","signIn","signOut","prepareAppData","dispatch","list","spaces","fields","response","collectionFile","find","f","info","updateFile","getPlaceholder","cardName","replace","ScryHelpers","getImage","images","layout","card_faces","image_uris","CardPreview","style","useContext","scryCard","title","mana_cost","src","DeckPreview","deckName","deck","useState","setStyle","useEffect","missingCards","log","Scry","byName","on","disabled","onClick","key","ImportCards","onImport","value","setValue","onChange","e","target","App","useReducer","signedIn","setSignedIn","profile","setProfile","handleSignoutClick","importCollection","exportCollection","url","basename","to","exact","path","render","Provider","isNullOrUndefined","getImageUrl","getGivenName","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","document","getElementById","URL","href","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.37b4de99.chunk.js","sourcesContent":["import { omit } from \"lodash\";\nimport { AppState, CardList, Decks, FileIds } from \".\";\nimport { Action } from \"./Actions\";\n\nconst filesReducer = (state: FileIds, action: Action): FileIds => {\n    switch (action.type) {\n        case \"SetDeckLink\":\n            return {\n                ...state,\n                [action.name]: action.link,\n            };\n        case \"DeleteDeck\":\n            return { collection: \"\", ...omit(state, [action.name]) };\n    }\n    return state;\n};\n\nconst cardListReducer = (state: CardList, action: Action): CardList => {\n    switch (action.type) {\n        case \"AddCard\":\n            return {\n                ...state,\n                [action.card.name]: action.card,\n            };\n    }\n    return state;\n};\n\nconst decksReducer = (state: Decks, action: Action): Decks => {\n    switch (action.type) {\n        case \"UpdateDeck\":\n            return {\n                ...state,\n                [action.name]: action.cardList,\n            };\n        case \"DeleteDeck\":\n            return { collection: [], ...omit(state, [action.name]) };\n    }\n    return state;\n};\n\nconst combineReducers = <State, Action>(reducers: { [P in keyof State]: (state: State[P], action: Action) => State[P] }) => {\n    return (state: State, action: Action) => {\n        const temp: State = {} as any;\n        for (const i in reducers) {\n            temp[i] = reducers[i](state[i], action);\n        }\n        return temp;\n    };\n};\n\nexport const reducer = combineReducers<AppState, Action>({\n    files: filesReducer,\n    cardList: cardListReducer,\n    decks: decksReducer,\n});\n","import React from \"react\";\nimport Scry from \"scryfall-sdk\";\nimport { Action } from \"./Actions\";\nimport DeepReadonly from \"../Utility/DeepReadonly\";\n\nexport type DeckCard = DeepReadonly<{\n    amount: number;\n    name: string;\n    isFoil?: boolean;\n    set?: string;\n    comment?: string;\n}>;\n\nexport type Deck = DeepReadonly<DeckCard[]>;\n\nexport type FileIds = DeepReadonly<{\n    collection: string;\n    [deckName: string]: string;\n}>;\n\nexport type Decks = DeepReadonly<{\n    collection: Deck;\n    [deckName: string]: Deck;\n}>;\n\nexport type CardList = DeepReadonly<{\n    [cardName: string]: Scry.Card;\n}>;\n\nexport type AppState = DeepReadonly<{\n    files: FileIds;\n    decks: Decks;\n    cardList: CardList;\n}>;\n\nexport const initialState: AppState = {\n    files: {\n        collection: \"\",\n    },\n    decks: {\n        collection: [],\n    },\n    cardList: {},\n};\n\nexport const State = React.createContext<[AppState, React.Dispatch<Action>]>([initialState, undefined as any]);\n","import { isNull } from \"lodash\";\nimport Papa from \"papaparse\";\nimport { Deck } from \"../State\";\n\nconst parse = (collection: string): Deck => {\n    if (!collection || collection === \"\") {\n        return [];\n    }\n    if (collection.match(/^([\\D_]+,?)+/)) {\n        return parseCsv(collection);\n    }\n    return parseSimple(collection);\n};\n\nconst parseSimple = (collection: string): Deck =>\n    collection\n        .split(\"\\n\")\n        .filter(line => !line.match(/^\\s*$/) && !line.startsWith(\"//\"))\n        .map(line => line.match(/^(\\d*) (?:\\[(.*)\\] )?(.*)$/))\n        .filter(match => !isNull(match))\n        .map(match => ({\n            amount: parseInt(match![1]),\n            name: match![3],\n            set: match![2],\n        }));\n\nconst parseCsv = (collection: string): Deck => {\n    const result = Papa.parse(collection, {\n        header: true,\n        dynamicTyping: true,\n        skipEmptyLines: \"greedy\",\n    });\n    if (result.errors?.length > 0) {\n        result.errors.forEach(console.error);\n    }\n    return result.data.map(c => ({\n        amount: c.amount,\n        name: c.name ?? c.card_name,\n        isFoil: c.isFoil ?? c.is_foil === 1,\n        set: c.set ?? c.set_code,\n        comment: c.comment,\n    }));\n};\n\nconst CollectionParser = {\n    parse,\n};\nexport default CollectionParser;\n","/* global gapi */\nimport React from \"react\";\nimport { Action } from \"../State/Actions\";\nimport CollectionParser from \"./CollectionParser\";\n\nconst GoogleApiInit = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    clientId: process.env.REACT_APP_CLIENT_ID,\n    discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"],\n    scope: \"profile https://www.googleapis.com/auth/drive.appdata https://www.googleapis.com/auth/drive.file\",\n};\n\nconst initClient = (onUpdateStatus: (isSignedIn: boolean) => void) => {\n    gapi.load(\"client:auth2\", () => {\n        gapi.client.init(GoogleApiInit).then(() => {\n            gapi.auth2.getAuthInstance().isSignedIn.listen(onUpdateStatus);\n            onUpdateStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n        }, console.error);\n    });\n};\n\nconst prepareAppData = () => async (dispatch: React.Dispatch<Action>) => {\n    var response = await gapi.client.drive.files.list({\n        spaces: \"appDataFolder\",\n        fields: \"nextPageToken, files(id, name)\",\n    });\n\n    const collectionFile = response.result?.files?.find(f => f.name === \"collection.txt\");\n    if (!collectionFile) {\n        console.info(\"Creating collection\");\n        dispatch({\n            type: \"SetDeckLink\",\n            name: \"collection\",\n            link: await createNewFile({\n                name: \"collection.txt\",\n                fileContent: \"\",\n                folder: [],\n            }),\n        });\n    } else {\n        console.info(\"Loading collection\");\n        dispatch({ type: \"SetDeckLink\", name: \"collection\", link: collectionFile.id! });\n        dispatch({ type: \"UpdateDeck\", name: \"collection\", cardList: CollectionParser.parse(await getFileContents({ id: collectionFile.id! })) });\n    }\n};\n\nconst createNewFile = async ({ name, fileContent, folder }: { name: string; fileContent: string; folder: string[] }): Promise<string> => {\n    const file = new Blob([fileContent], { type: \"text/plain\" });\n    const metadata = {\n        name,\n        mimeType: \"text/plain\",\n        parents: [\"appDataFolder\", ...folder],\n    };\n\n    const accessToken = gapi.auth.getToken().access_token;\n    const form = new FormData();\n    form.append(\"metadata\", new Blob([JSON.stringify(metadata)], { type: \"application/json\" }));\n    form.append(\"file\", file);\n\n    const res = await fetch(\"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id\", {\n        method: \"POST\",\n        headers: new Headers({ Authorization: \"Bearer \" + accessToken }),\n        body: form,\n    });\n    const val = await res.json();\n    return val.id;\n};\n\nconst updateFile = async ({ id, fileContent }: { id: string; fileContent: string }) => {\n    const file = new Blob([fileContent], { type: \"text/plain\" });\n\n    const accessToken = gapi.auth.getToken().access_token;\n    const form = new FormData();\n    form.append(\"file\", file);\n\n    const res = await fetch(`https://www.googleapis.com/upload/drive/v3/files/${id}?uploadType=media&fields=id`, {\n        method: \"PATCH\",\n        headers: new Headers({ Authorization: \"Bearer \" + accessToken }),\n        body: form,\n    });\n    const val = await res.json();\n    return val.id;\n};\n\nconst getFileContents = async ({ id }: { id: string }) => {\n    const res = await gapi.client.drive.files.get({\n        fileId: id,\n        alt: \"media\",\n    });\n    const lines = res.body.split(\"\\n\");\n    const text = lines.slice(4, lines.length - 2).join(\"\\n\");\n    return text;\n};\n\nconst getProfile = () => {\n    return gapi.auth2\n        .getAuthInstance()\n        .currentUser.get()\n        .getBasicProfile();\n};\n\nconst signIn = () => gapi.auth2.getAuthInstance().signIn();\nconst signOut = () => gapi.auth2.getAuthInstance().signOut();\n\nexport type GoogleProfile = gapi.auth2.BasicProfile;\n\nconst GoogleApi = {\n    initClient,\n    getProfile,\n    signIn,\n    signOut,\n    prepareAppData,\n    createNewFile,\n    updateFile,\n    getFileContents,\n};\nexport default GoogleApi;\n","import Scry from \"scryfall-sdk\";\nimport DeepReadonly from \"./DeepReadonly\";\n\nconst getImage = (card: DeepReadonly<Scry.Card>, type: keyof Scry.ImageUris): string => {\n    var images: Scry.ImageUris | null | undefined;\n    switch (card.layout) {\n        case \"transform\":\n        case \"double_faced_token\":\n            images = card.card_faces![0].image_uris;\n            break;\n        default:\n            images = card.image_uris;\n    }\n    return images?.[type] ?? getPlaceholder(card.name);\n};\n\nconst getPlaceholder = (cardName: string): string => `https://via.placeholder.com/146x204?text=${cardName.replace(/\\s/, \"+\")}`;\n\nconst ScryHelpers = {\n    getImage,\n    getPlaceholder,\n};\nexport default ScryHelpers;\n","import { DeckCard, State } from \"../State\";\nimport React from \"react\";\nimport { PreviewStyle } from \"./DeckPreview\";\nimport ScryHelpers from \"../Utility/ScryHelpers\";\n\ntype Props = DeckCard & {\n    style: PreviewStyle;\n};\n\nconst CardPreview = ({ style, ...card }: Props) => {\n    const [state] = React.useContext(State);\n    const scryCard = state.cardList[card.name];\n\n    switch (style) {\n        case \"Minimal\":\n            return (\n                <tr title={card.comment}>\n                    <td>{card.amount}x</td>\n                    <td>\n                        {card.isFoil && <div>(Foil)</div>}\n                        {card.name}\n                    </td>\n                    <td>{card.set ?? \"-\"}</td>\n                </tr>\n            );\n        case \"Checklist\":\n            return (\n                <tr>\n                    <td>{card.amount}x</td>\n                    <td>\n                        {card.isFoil && <div>(Foil)</div>}\n                        {card.name}\n                    </td>\n                    <td>{scryCard ? scryCard.mana_cost : \"???\"}</td>\n                    <td>{card.set}</td>\n                </tr>\n            );\n        case \"Images\":\n            return <img title={card.name} alt={card.name} src={scryCard ? ScryHelpers.getImage(scryCard, \"small\") : ScryHelpers.getPlaceholder(card.name)} />;\n        case \"Full\":\n            return <div>PLACEHOLDER</div>;\n    }\n};\n\nexport default CardPreview;\n","import React from \"react\";\nimport * as Scry from \"scryfall-sdk\";\nimport { State } from \"../State\";\nimport CardPreview from \"./CardPreview\";\n\nexport type PreviewStyle = \"Minimal\" | \"Checklist\" | \"Images\" | \"Full\";\n\ntype Props = {\n    deckName: string;\n};\n\nconst DeckPreview = ({ deckName }: Props) => {\n    const [state, dispatch] = React.useContext(State);\n    const deck = state.decks[deckName];\n\n    const [style, setStyle] = React.useState<PreviewStyle>(\"Minimal\");\n\n    React.useEffect(() => {\n        const missingCards = deck.filter(card => !state.cardList[card.name]);\n        console.log({ deck, missingCards });\n        Scry.Cards.collection(\n            ...missingCards.map(card => (card.set ? Scry.CardIdentifier.byName(card.name, card.set) : Scry.CardIdentifier.byName(card.name)))\n        ).on(\"data\", (card: any) => dispatch({ type: \"AddCard\", card }));\n    }, [deck, dispatch, state.cardList]);\n    \n    return (\n        <div>\n            <div>Deck: {deckName}</div>\n            <div>\n                <div>Style:</div>\n                <button disabled={style === \"Minimal\"} onClick={() => setStyle(\"Minimal\")}>\n                    Minimal\n                </button>\n                <button disabled={style === \"Checklist\"} onClick={() => setStyle(\"Checklist\")}>\n                    Checklist\n                </button>\n                <button disabled={style === \"Images\"} onClick={() => setStyle(\"Images\")}>\n                    Images\n                </button>\n                <button disabled={style === \"Full\"} onClick={() => setStyle(\"Full\")}>\n                    Full\n                </button>\n            </div>\n            {style === \"Minimal\" || style === \"Checklist\" ? (\n                <table>\n                    {style === \"Minimal\" && (\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Card name</th>\n                                <th>Set</th>\n                            </tr>\n                        </thead>\n                    )}\n                    {style === \"Checklist\" && (\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Card name</th>\n                                <th>Mana cost</th>\n                                <th>Set</th>\n                            </tr>\n                        </thead>\n                    )}\n                    <tbody>\n                        {deck.map((card, i) => (\n                            <CardPreview style={style} key={i} {...card} />\n                        ))}\n                    </tbody>\n                </table>\n            ) : (\n                <div>\n                    {deck.map((card, i) => (\n                        <CardPreview style={style} key={i} {...card} />\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default DeckPreview;\n","import React from \"react\";\n\ntype Props = {\n    onImport: (value: string) => void;\n}\n\nexport const ImportCards = ({ onImport }: Props) => {\n    const [value, setValue] = React.useState<string>(\"\");\n\n    return (\n        <div>\n            <textarea value={value} onChange={e => setValue(e.target.value)} />\n            <button onClick={() => onImport(value)}>Import collection</button>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { isNullOrUndefined } from \"util\";\nimport { initialState, State } from \"../State\";\nimport { reducer } from \"../State/Reducers\";\nimport CollectionParser from \"../Utility/CollectionParser\";\nimport GoogleApi, { GoogleProfile } from \"../Utility/GoogleApi\";\nimport DeckPreview from \"./DeckPreview\";\nimport { ImportCards } from \"./ImportCards\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\n\nconst App: React.FC = () => {\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n\n    const [signedIn, setSignedIn] = React.useState(false);\n    const [profile, setProfile] = React.useState<GoogleProfile>();\n\n    const handleSignoutClick = () => {\n        GoogleApi.signOut();\n        setProfile(undefined);\n    };\n\n    /**\n     * Called at app init, sets Google API signin callback\n     * info stored in React profile state\n     */\n    React.useEffect(() => {\n        GoogleApi.initClient(async (isSignedIn: boolean) => {\n            setSignedIn(isSignedIn);\n            if (!isSignedIn) {\n                return;\n            }\n            setProfile(GoogleApi.getProfile());\n            GoogleApi.prepareAppData()(dispatch);\n        });\n    }, []);\n\n    const importCollection = (value: string) => {\n        GoogleApi.updateFile({ id: state.files.collection, fileContent: value });\n        dispatch({ type: \"UpdateDeck\", name: \"collection\", cardList: CollectionParser.parse(value) });\n    };\n\n    const exportCollection = async () => {\n        console.log(await GoogleApi.getFileContents({ id: state.files.collection }));\n    };\n    console.log({ url: process.env.PUBLIC_URL });\n\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Redirect to={signedIn ? \"/\" : \"/signin\"} />\n            <Switch>\n                <Route\n                    exact\n                    path=\"/\"\n                    render={() => (\n                        <State.Provider value={[state, dispatch]}>\n                            <button onClick={handleSignoutClick}>Sign Out</button>\n                            {!isNullOrUndefined(profile) && (\n                                <div>\n                                    <img src={profile.getImageUrl()} alt=\"Profile\" />\n                                    <div>Welcome back, {profile.getGivenName()}</div>\n                                </div>\n                            )}\n                            <ImportCards onImport={importCollection} />\n                            <button onClick={exportCollection}>Export collection</button>\n                            <DeckPreview deckName=\"collection\" />\n                        </State.Provider>\n                    )}\n                />\n                <Route exact path=\"/signin/\" render={() => <button onClick={GoogleApi.signIn}>Sign in to google</button>} />\n            </Switch>\n        </BrowserRouter>\n    );\n\n    // return signedIn ? (\n    //     // TODO: Main dashboard design\n    //     <State.Provider value={[state, dispatch]}>\n    //         <button onClick={handleSignoutClick}>Sign Out</button>\n    //         {!isNullOrUndefined(profile) && (\n    //             <div>\n    //                 <img src={profile.getImageUrl()} alt=\"Profile\" />\n    //                 <div>Welcome back, {profile.getGivenName()}</div>\n    //             </div>\n    //         )}\n    //         <ImportCards onImport={importCollection} />\n    //         <button onClick={exportCollection}>Export collection</button>\n    //         <DeckPreview deckName=\"collection\" />\n    //     </State.Provider>\n    // ) : (\n    //     // TODO: Login screen design\n    //     <button onClick={GoogleApi.signIn}>Sign in to google</button>\n    // );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}