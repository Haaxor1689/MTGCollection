{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["googleClientId","App","react_default","a","createElement","google_login_default","clientId","onSuccess","response","console","log","onFailure","google_login","onLogoutSuccess","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oJAIMA,EAAiB,2EAuBRC,EArBsB,WAajC,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAaG,SAAUN,EAAgBO,UAd7B,SAACC,GACfC,QAAQC,IAAI,CAAEF,cAamDG,UAVnD,SAACH,GACfC,QAAQC,IAAI,CAAEF,gBAUVN,EAAAC,EAAAC,cAACQ,EAAA,aAAD,CAAcN,SAAUN,EAAgBa,gBAPxB,WACpBJ,QAAQC,IAAI,mBCJdI,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAuCvC,SAASC,EAAgBC,EAAeC,GACpCC,UAAUC,cACLC,SAASJ,GACTK,KAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,YAIxBxB,QAAQC,IAAI,iHAGRY,GAAUA,EAAOY,UACjBZ,EAAOY,SAASP,KAMpBlB,QAAQC,IAAI,sCAGRY,GAAUA,EAAOf,WACjBe,EAAOf,UAAUoB,UAOxCQ,MAAM,SAAAC,GACH3B,QAAQ2B,MAAM,4CAA6CA,KCxFvEC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SDoB1C,SAAkBnB,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAImB,IAAKC,iBAA+D3B,OAAOC,SAAS2B,MAC5FC,SAAW7B,OAAOC,SAAS4B,OAIrC,OAGJ7B,OAAO8B,iBAAiB,OAAQ,WAC5B,IAAMzB,EAAK,GAAA0B,OAAMJ,iBAAN,sBAEP7B,GA0DhB,SAAiCO,EAAeC,GAE5C0B,MAAM3B,GACDK,KAAK,SAAAlB,GAEF,IAAMyC,EAAczC,EAAS0C,QAAQC,IAAI,gBACjB,MAApB3C,EAAS4C,QAAkC,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAEvE9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GAC/BA,EAAa4B,aAAa7B,KAAK,WAC3BV,OAAOC,SAASuC,aAKxBpC,EAAgBC,EAAOC,KAG9Ba,MAAM,WACH1B,QAAQC,IAAI,mEA3ER+C,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,KAAK,WAC/BjB,QAAQC,IAAI,gHAIhBU,EAAgBC,EAAOC,MC3CvCE","file":"static/js/main.05045b3a.chunk.js","sourcesContent":["import React from \"react\";\n\nimport GoogleLogin, { GoogleLoginResponse, GoogleLoginResponseOffline, GoogleLogout } from \"react-google-login\";\n\nconst googleClientId = \"213841300532-aqinavnoi53if8cbk6re0aa6gkf965q3.apps.googleusercontent.com\";\n\nconst App: React.FunctionComponent = () => {\n    const onSuccess = (response: GoogleLoginResponse | GoogleLoginResponseOffline) => {\n        console.log({ response });\n    };\n\n    const onFailure = (response: any) => {\n        console.log({ response });\n    };\n\n    const onLogoutSuccess = () => {\n        console.log(\"Logged ouy\");\n    }\n\n    return (\n        <div>\n            <GoogleLogin clientId={googleClientId} onSuccess={onSuccess} onFailure={onFailure} />\n            <GoogleLogout clientId={googleClientId} onLogoutSuccess={onLogoutSuccess} />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}